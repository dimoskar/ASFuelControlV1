#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the ContextGenerator.ttinclude code generation file.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Common;
using System.Collections.Generic;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;
using ASFuelControl.Data;
using System.ComponentModel;

namespace ASFuelControl.Data	
{
	public partial class DatabaseModel : OpenAccessContext, IDatabaseModelUnitOfWork
	{
		private static string connectionStringName = @"ASFuelControlDBConnection";
			
		private static BackendConfiguration backend = GetBackendConfiguration();
				
		private static MetadataSource metadataSource = XmlMetadataSource.FromAssemblyResource("DatabaseModel.rlinq");
		
		public DatabaseModel()
			:base(connectionStringName, backend, metadataSource)
		{ }
		
		public DatabaseModel(string connection)
			:base(connection, backend, metadataSource)
		{ }
		
		public DatabaseModel(BackendConfiguration backendConfiguration)
			:base(connectionStringName, backendConfiguration, metadataSource)
		{ }
			
		public DatabaseModel(string connection, MetadataSource metadataSource)
			:base(connection, backend, metadataSource)
		{ }
		
		public DatabaseModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource)
			:base(connection, backendConfiguration, metadataSource)
		{ }
			
		public IQueryable<Vehicle> Vehicles 
		{
			get
			{
				return this.GetAll<Vehicle>();
			}
		}
		
		public IQueryable<UsagePeriod> UsagePeriods 
		{
			get
			{
				return this.GetAll<UsagePeriod>();
			}
		}
		
		public IQueryable<Trader> Traders 
		{
			get
			{
				return this.GetAll<Trader>();
			}
		}
		
		public IQueryable<TitrimetryLevel> TitrimetryLevels 
		{
			get
			{
				return this.GetAll<TitrimetryLevel>();
			}
		}
		
		public IQueryable<Titrimetry> Titrimetries 
		{
			get
			{
				return this.GetAll<Titrimetry>();
			}
		}
		
		public IQueryable<TankUsagePeriod> TankUsagePeriods 
		{
			get
			{
				return this.GetAll<TankUsagePeriod>();
			}
		}
		
		public IQueryable<TankSetting> TankSettings 
		{
			get
			{
				return this.GetAll<TankSetting>();
			}
		}
		
		public IQueryable<TankSale> TankSales 
		{
			get
			{
				return this.GetAll<TankSale>();
			}
		}
		
		public IQueryable<TankPrice> TankPrices 
		{
			get
			{
				return this.GetAll<TankPrice>();
			}
		}
		
		public IQueryable<TankFilling> TankFillings 
		{
			get
			{
				return this.GetAll<TankFilling>();
			}
		}
		
		public IQueryable<Tank> Tanks 
		{
			get
			{
				return this.GetAll<Tank>();
			}
		}
		
		public IQueryable<SystemEventDatum> SystemEventData 
		{
			get
			{
				return this.GetAll<SystemEventDatum>();
			}
		}
		
		public IQueryable<SystemEvent> SystemEvents 
		{
			get
			{
				return this.GetAll<SystemEvent>();
			}
		}
		
		public IQueryable<SendLog> SendLogs 
		{
			get
			{
				return this.GetAll<SendLog>();
			}
		}
		
		public IQueryable<SalesTransaction> SalesTransactions 
		{
			get
			{
				return this.GetAll<SalesTransaction>();
			}
		}
		
		public IQueryable<PriceListTimeSpan> PriceListTimeSpans 
		{
			get
			{
				return this.GetAll<PriceListTimeSpan>();
			}
		}
		
		public IQueryable<PriceList> PriceLists 
		{
			get
			{
				return this.GetAll<PriceList>();
			}
		}
		
		public IQueryable<PendingSend> PendingSends 
		{
			get
			{
				return this.GetAll<PendingSend>();
			}
		}
		
		public IQueryable<Option> Options 
		{
			get
			{
				return this.GetAll<Option>();
			}
		}
		
		public IQueryable<NozzleUsagePeriod> NozzleUsagePeriods 
		{
			get
			{
				return this.GetAll<NozzleUsagePeriod>();
			}
		}
		
		public IQueryable<NozzlePriceList> NozzlePriceLists 
		{
			get
			{
				return this.GetAll<NozzlePriceList>();
			}
		}
		
		public IQueryable<NozzleFlow> NozzleFlows 
		{
			get
			{
				return this.GetAll<NozzleFlow>();
			}
		}
		
		public IQueryable<Nozzle> Nozzles 
		{
			get
			{
				return this.GetAll<Nozzle>();
			}
		}
		
		public IQueryable<Normalization> Normalizations 
		{
			get
			{
				return this.GetAll<Normalization>();
			}
		}
		
		public IQueryable<InvoiceType> InvoiceTypes 
		{
			get
			{
				return this.GetAll<InvoiceType>();
			}
		}
		
		public IQueryable<InvoiceRelation> InvoiceRelations 
		{
			get
			{
				return this.GetAll<InvoiceRelation>();
			}
		}
		
		public IQueryable<InvoicePrint> InvoicePrints 
		{
			get
			{
				return this.GetAll<InvoicePrint>();
			}
		}
		
		public IQueryable<InvoiceLine> InvoiceLines 
		{
			get
			{
				return this.GetAll<InvoiceLine>();
			}
		}
		
		public IQueryable<InvoiceForm> InvoiceForms 
		{
			get
			{
				return this.GetAll<InvoiceForm>();
			}
		}
		
		public IQueryable<Invoice> Invoices 
		{
			get
			{
				return this.GetAll<Invoice>();
			}
		}
		
		public IQueryable<FuelTypePrice> FuelTypePrices 
		{
			get
			{
				return this.GetAll<FuelTypePrice>();
			}
		}
		
		public IQueryable<FuelType> FuelTypes 
		{
			get
			{
				return this.GetAll<FuelType>();
			}
		}
		
		public IQueryable<DispenserType> DispenserTypes 
		{
			get
			{
				return this.GetAll<DispenserType>();
			}
		}
		
		public IQueryable<DispenserSetting> DispenserSettings 
		{
			get
			{
				return this.GetAll<DispenserSetting>();
			}
		}
		
		public IQueryable<DispenserProtocol> DispenserProtocols 
		{
			get
			{
				return this.GetAll<DispenserProtocol>();
			}
		}
		
		public IQueryable<Dispenser> Dispensers 
		{
			get
			{
				return this.GetAll<Dispenser>();
			}
		}
		
		public IQueryable<CommunicationController> CommunicationControllers 
		{
			get
			{
				return this.GetAll<CommunicationController>();
			}
		}
		
		public IQueryable<Balance> Balances 
		{
			get
			{
				return this.GetAll<Balance>();
			}
		}
		
		public IQueryable<AtgProbeType> AtgProbeTypes 
		{
			get
			{
				return this.GetAll<AtgProbeType>();
			}
		}
		
		public IQueryable<AtgProbeProtocol> AtgProbeProtocols 
		{
			get
			{
				return this.GetAll<AtgProbeProtocol>();
			}
		}
		
		public IQueryable<ApplicationUserLoggon> ApplicationUserLoggons 
		{
			get
			{
				return this.GetAll<ApplicationUserLoggon>();
			}
		}
		
		public IQueryable<ApplicationUser> ApplicationUsers 
		{
			get
			{
				return this.GetAll<ApplicationUser>();
			}
		}
		
		public IQueryable<AlertDefinition> AlertDefinitions 
		{
			get
			{
				return this.GetAll<AlertDefinition>();
			}
		}
		
		public IQueryable<TankFillingView> TankFillingViews 
		{
			get
			{
				return this.GetAll<TankFillingView>();
			}
		}
		
		public IQueryable<SalesView> SalesViews 
		{
			get
			{
				return this.GetAll<SalesView>();
			}
		}
		
		public IQueryable<Shift> Shifts 
		{
			get
			{
				return this.GetAll<Shift>();
			}
		}
		
		public IQueryable<InvoiceGroupView> InvoiceGroupViews 
		{
			get
			{
				return this.GetAll<InvoiceGroupView>();
			}
		}
		
		public IQueryable<TankLevelStartView> TankLevelStartViews 
		{
			get
			{
				return this.GetAll<TankLevelStartView>();
			}
		}
		
		public IQueryable<TankLevelEndView> TankLevelEndViews 
		{
			get
			{
				return this.GetAll<TankLevelEndView>();
			}
		}
		
		public IQueryable<TankFillingInvoiceView> TankFillingInvoiceViews 
		{
			get
			{
				return this.GetAll<TankFillingInvoiceView>();
			}
		}
		
		public IQueryable<InvoicePrintView> InvoicePrintViews 
		{
			get
			{
				return this.GetAll<InvoicePrintView>();
			}
		}
		
		public IQueryable<TankSaleView> TankSaleViews 
		{
			get
			{
				return this.GetAll<TankSaleView>();
			}
		}
		
		public static BackendConfiguration GetBackendConfiguration()
		{
			BackendConfiguration backend = new BackendConfiguration();
			backend.Backend = "MsSql";
			backend.ProviderName = "System.Data.SqlClient";
			backend.Logging.MetricStoreSnapshotInterval = 0;
			backend.Runtime.SupportConcurrentThreadsInScope = true;
		
			CustomizeBackendConfiguration(ref backend);
		
			return backend;
		}
		
		/// <summary>
		/// Allows you to customize the BackendConfiguration of DatabaseModel.
		/// </summary>
		/// <param name="config">The BackendConfiguration of DatabaseModel.</param>
		static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
		
	}
	
	public interface IDatabaseModelUnitOfWork : IUnitOfWork
	{
		IQueryable<Vehicle> Vehicles
		{
			get;
		}
		IQueryable<UsagePeriod> UsagePeriods
		{
			get;
		}
		IQueryable<Trader> Traders
		{
			get;
		}
		IQueryable<TitrimetryLevel> TitrimetryLevels
		{
			get;
		}
		IQueryable<Titrimetry> Titrimetries
		{
			get;
		}
		IQueryable<TankUsagePeriod> TankUsagePeriods
		{
			get;
		}
		IQueryable<TankSetting> TankSettings
		{
			get;
		}
		IQueryable<TankSale> TankSales
		{
			get;
		}
		IQueryable<TankPrice> TankPrices
		{
			get;
		}
		IQueryable<TankFilling> TankFillings
		{
			get;
		}
		IQueryable<Tank> Tanks
		{
			get;
		}
		IQueryable<SystemEventDatum> SystemEventData
		{
			get;
		}
		IQueryable<SystemEvent> SystemEvents
		{
			get;
		}
		IQueryable<SendLog> SendLogs
		{
			get;
		}
		IQueryable<SalesTransaction> SalesTransactions
		{
			get;
		}
		IQueryable<PriceListTimeSpan> PriceListTimeSpans
		{
			get;
		}
		IQueryable<PriceList> PriceLists
		{
			get;
		}
		IQueryable<PendingSend> PendingSends
		{
			get;
		}
		IQueryable<Option> Options
		{
			get;
		}
		IQueryable<NozzleUsagePeriod> NozzleUsagePeriods
		{
			get;
		}
		IQueryable<NozzlePriceList> NozzlePriceLists
		{
			get;
		}
		IQueryable<NozzleFlow> NozzleFlows
		{
			get;
		}
		IQueryable<Nozzle> Nozzles
		{
			get;
		}
		IQueryable<Normalization> Normalizations
		{
			get;
		}
		IQueryable<InvoiceType> InvoiceTypes
		{
			get;
		}
		IQueryable<InvoiceRelation> InvoiceRelations
		{
			get;
		}
		IQueryable<InvoicePrint> InvoicePrints
		{
			get;
		}
		IQueryable<InvoiceLine> InvoiceLines
		{
			get;
		}
		IQueryable<InvoiceForm> InvoiceForms
		{
			get;
		}
		IQueryable<Invoice> Invoices
		{
			get;
		}
		IQueryable<FuelTypePrice> FuelTypePrices
		{
			get;
		}
		IQueryable<FuelType> FuelTypes
		{
			get;
		}
		IQueryable<DispenserType> DispenserTypes
		{
			get;
		}
		IQueryable<DispenserSetting> DispenserSettings
		{
			get;
		}
		IQueryable<DispenserProtocol> DispenserProtocols
		{
			get;
		}
		IQueryable<Dispenser> Dispensers
		{
			get;
		}
		IQueryable<CommunicationController> CommunicationControllers
		{
			get;
		}
		IQueryable<Balance> Balances
		{
			get;
		}
		IQueryable<AtgProbeType> AtgProbeTypes
		{
			get;
		}
		IQueryable<AtgProbeProtocol> AtgProbeProtocols
		{
			get;
		}
		IQueryable<ApplicationUserLoggon> ApplicationUserLoggons
		{
			get;
		}
		IQueryable<ApplicationUser> ApplicationUsers
		{
			get;
		}
		IQueryable<AlertDefinition> AlertDefinitions
		{
			get;
		}
		IQueryable<TankFillingView> TankFillingViews
		{
			get;
		}
		IQueryable<SalesView> SalesViews
		{
			get;
		}
		IQueryable<Shift> Shifts
		{
			get;
		}
		IQueryable<InvoiceGroupView> InvoiceGroupViews
		{
			get;
		}
		IQueryable<TankLevelStartView> TankLevelStartViews
		{
			get;
		}
		IQueryable<TankLevelEndView> TankLevelEndViews
		{
			get;
		}
		IQueryable<TankFillingInvoiceView> TankFillingInvoiceViews
		{
			get;
		}
		IQueryable<InvoicePrintView> InvoicePrintViews
		{
			get;
		}
		IQueryable<TankSaleView> TankSaleViews
		{
			get;
		}
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class Vehicle : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _vehicleId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid VehicleId
		{
			get
			{
				return this._vehicleId;
			}
			set
			{
				if(this._vehicleId != value)
				{
					this._vehicleId = value;
					this.OnPropertyChanged("VehicleId");
				}
			}
		}
		
		private string _plateNumber;
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string PlateNumber
		{
			get
			{
				return this._plateNumber;
			}
			set
			{
				if(this._plateNumber != value)
				{
					this._plateNumber = value;
					this.OnPropertyChanged("PlateNumber");
				}
			}
		}
		
		private Guid _traderId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TraderId
		{
			get
			{
				return this._traderId;
			}
			set
			{
				if(this._traderId != value)
				{
					this._traderId = value;
					this.OnPropertyChanged("TraderId");
				}
			}
		}
		
		private Trader _trader;
		public virtual Trader Trader
		{
			get
			{
				return this._trader;
			}
			set
			{
				if(this._trader != value)
				{
					this._trader = value;
					this.OnPropertyChanged("Trader");
				}
			}
		}
		
		private IList<Invoice> _invoices = new List<Invoice>();
		public virtual IList<Invoice> Invoices
		{
			get
			{
				return this._invoices;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public Vehicle()
		{
		}
		
		protected Vehicle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.VehicleId = (Guid)info.GetValue("VehicleId", typeof(Guid));
			this.PlateNumber = info.GetString("PlateNumber");
			this.TraderId = (Guid)info.GetValue("TraderId", typeof(Guid));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("VehicleId", this.VehicleId, typeof(Guid));
			info.AddValue("PlateNumber", this.PlateNumber, typeof(string));
			info.AddValue("TraderId", this.TraderId, typeof(Guid));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class UsagePeriod : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _usagePeriodId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid UsagePeriodId
		{
			get
			{
				return this._usagePeriodId;
			}
			set
			{
				if(this._usagePeriodId != value)
				{
					this._usagePeriodId = value;
					this.OnPropertyChanged("UsagePeriodId");
				}
			}
		}
		
		private DateTime _periodStart;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime PeriodStart
		{
			get
			{
				return this._periodStart;
			}
			set
			{
				if(this._periodStart != value)
				{
					this._periodStart = value;
					this.OnPropertyChanged("PeriodStart");
				}
			}
		}
		
		private DateTime? _periodEnd;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? PeriodEnd
		{
			get
			{
				return this._periodEnd;
			}
			set
			{
				if(this._periodEnd != value)
				{
					this._periodEnd = value;
					this.OnPropertyChanged("PeriodEnd");
				}
			}
		}
		
		private bool _isLocked;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsLocked
		{
			get
			{
				return this._isLocked;
			}
			set
			{
				if(this._isLocked != value)
				{
					this._isLocked = value;
					this.OnPropertyChanged("IsLocked");
				}
			}
		}
		
		private IList<TankUsagePeriod> _tankUsagePeriods = new List<TankUsagePeriod>();
		public virtual IList<TankUsagePeriod> TankUsagePeriods
		{
			get
			{
				return this._tankUsagePeriods;
			}
		}
		
		private IList<TankFilling> _tankFillings = new List<TankFilling>();
		public virtual IList<TankFilling> TankFillings
		{
			get
			{
				return this._tankFillings;
			}
		}
		
		private IList<SalesTransaction> _salesTransactions = new List<SalesTransaction>();
		public virtual IList<SalesTransaction> SalesTransactions
		{
			get
			{
				return this._salesTransactions;
			}
		}
		
		private IList<NozzleUsagePeriod> _nozzleUsagePeriods = new List<NozzleUsagePeriod>();
		public virtual IList<NozzleUsagePeriod> NozzleUsagePeriods
		{
			get
			{
				return this._nozzleUsagePeriods;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public UsagePeriod()
		{
		}
		
		protected UsagePeriod(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.UsagePeriodId = (Guid)info.GetValue("UsagePeriodId", typeof(Guid));
			this.PeriodStart = (DateTime)info.GetValue("PeriodStart", typeof(DateTime));
			this.PeriodEnd = (DateTime?)info.GetValue("PeriodEnd", typeof(DateTime?));
			this.IsLocked = info.GetBoolean("IsLocked");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("UsagePeriodId", this.UsagePeriodId, typeof(Guid));
			info.AddValue("PeriodStart", this.PeriodStart, typeof(DateTime));
			info.AddValue("PeriodEnd", this.PeriodEnd, typeof(DateTime?));
			info.AddValue("IsLocked", this.IsLocked, typeof(bool));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class Trader : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _traderId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid TraderId
		{
			get
			{
				return this._traderId;
			}
			set
			{
				if(this._traderId != value)
				{
					this._traderId = value;
					this.OnPropertyChanged("TraderId");
				}
			}
		}
		
		private string _name;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if(this._name != value)
				{
					this._name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
		
		private string _taxRegistrationNumber;
		[System.ComponentModel.DataAnnotations.StringLength(40)]
		public virtual string TaxRegistrationNumber
		{
			get
			{
				return this._taxRegistrationNumber;
			}
			set
			{
				if(this._taxRegistrationNumber != value)
				{
					this._taxRegistrationNumber = value;
					this.OnPropertyChanged("TaxRegistrationNumber");
				}
			}
		}
		
		private string _taxRegistrationOffice;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string TaxRegistrationOffice
		{
			get
			{
				return this._taxRegistrationOffice;
			}
			set
			{
				if(this._taxRegistrationOffice != value)
				{
					this._taxRegistrationOffice = value;
					this.OnPropertyChanged("TaxRegistrationOffice");
				}
			}
		}
		
		private string _address;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string Address
		{
			get
			{
				return this._address;
			}
			set
			{
				if(this._address != value)
				{
					this._address = value;
					this.OnPropertyChanged("Address");
				}
			}
		}
		
		private string _city;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string City
		{
			get
			{
				return this._city;
			}
			set
			{
				if(this._city != value)
				{
					this._city = value;
					this.OnPropertyChanged("City");
				}
			}
		}
		
		private string _phone1;
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		public virtual string Phone1
		{
			get
			{
				return this._phone1;
			}
			set
			{
				if(this._phone1 != value)
				{
					this._phone1 = value;
					this.OnPropertyChanged("Phone1");
				}
			}
		}
		
		private string _phone2;
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		public virtual string Phone2
		{
			get
			{
				return this._phone2;
			}
			set
			{
				if(this._phone2 != value)
				{
					this._phone2 = value;
					this.OnPropertyChanged("Phone2");
				}
			}
		}
		
		private string _fax;
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		public virtual string Fax
		{
			get
			{
				return this._fax;
			}
			set
			{
				if(this._fax != value)
				{
					this._fax = value;
					this.OnPropertyChanged("Fax");
				}
			}
		}
		
		private string _email;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string Email
		{
			get
			{
				return this._email;
			}
			set
			{
				if(this._email != value)
				{
					this._email = value;
					this.OnPropertyChanged("Email");
				}
			}
		}
		
		private string _website;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string Website
		{
			get
			{
				return this._website;
			}
			set
			{
				if(this._website != value)
				{
					this._website = value;
					this.OnPropertyChanged("Website");
				}
			}
		}
		
		private Guid? _invoiceTypeId;
		public virtual Guid? InvoiceTypeId
		{
			get
			{
				return this._invoiceTypeId;
			}
			set
			{
				if(this._invoiceTypeId != value)
				{
					this._invoiceTypeId = value;
					this.OnPropertyChanged("InvoiceTypeId");
				}
			}
		}
		
		private Guid? _priceListId;
		public virtual Guid? PriceListId
		{
			get
			{
				return this._priceListId;
			}
			set
			{
				if(this._priceListId != value)
				{
					this._priceListId = value;
					this.OnPropertyChanged("PriceListId");
				}
			}
		}
		
		private bool _isCustomer;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsCustomer
		{
			get
			{
				return this._isCustomer;
			}
			set
			{
				if(this._isCustomer != value)
				{
					this._isCustomer = value;
					this.OnPropertyChanged("IsCustomer");
				}
			}
		}
		
		private bool _isSupplier;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsSupplier
		{
			get
			{
				return this._isSupplier;
			}
			set
			{
				if(this._isSupplier != value)
				{
					this._isSupplier = value;
					this.OnPropertyChanged("IsSupplier");
				}
			}
		}
		
		private InvoiceType _invoiceType;
		public virtual InvoiceType InvoiceType
		{
			get
			{
				return this._invoiceType;
			}
			set
			{
				if(this._invoiceType != value)
				{
					this._invoiceType = value;
					this.OnPropertyChanged("InvoiceType");
				}
			}
		}
		
		private PriceList _priceList;
		public virtual PriceList PriceList
		{
			get
			{
				return this._priceList;
			}
			set
			{
				if(this._priceList != value)
				{
					this._priceList = value;
					this.OnPropertyChanged("PriceList");
				}
			}
		}
		
		private IList<Vehicle> _vehicles = new List<Vehicle>();
		public virtual IList<Vehicle> Vehicles
		{
			get
			{
				return this._vehicles;
			}
		}
		
		private IList<Invoice> _invoices = new List<Invoice>();
		public virtual IList<Invoice> Invoices
		{
			get
			{
				return this._invoices;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public Trader()
		{
		}
		
		protected Trader(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.TraderId = (Guid)info.GetValue("TraderId", typeof(Guid));
			this.Name = info.GetString("Name");
			this.TaxRegistrationNumber = info.GetString("TaxRegistrationNumber");
			this.TaxRegistrationOffice = info.GetString("TaxRegistrationOffice");
			this.Address = info.GetString("Address");
			this.City = info.GetString("City");
			this.Phone1 = info.GetString("Phone1");
			this.Phone2 = info.GetString("Phone2");
			this.Fax = info.GetString("Fax");
			this.Email = info.GetString("Email");
			this.Website = info.GetString("Website");
			this.InvoiceTypeId = (Guid?)info.GetValue("InvoiceTypeId", typeof(Guid?));
			this.PriceListId = (Guid?)info.GetValue("PriceListId", typeof(Guid?));
			this.IsCustomer = info.GetBoolean("IsCustomer");
			this.IsSupplier = info.GetBoolean("IsSupplier");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("TraderId", this.TraderId, typeof(Guid));
			info.AddValue("Name", this.Name, typeof(string));
			info.AddValue("TaxRegistrationNumber", this.TaxRegistrationNumber, typeof(string));
			info.AddValue("TaxRegistrationOffice", this.TaxRegistrationOffice, typeof(string));
			info.AddValue("Address", this.Address, typeof(string));
			info.AddValue("City", this.City, typeof(string));
			info.AddValue("Phone1", this.Phone1, typeof(string));
			info.AddValue("Phone2", this.Phone2, typeof(string));
			info.AddValue("Fax", this.Fax, typeof(string));
			info.AddValue("Email", this.Email, typeof(string));
			info.AddValue("Website", this.Website, typeof(string));
			info.AddValue("InvoiceTypeId", this.InvoiceTypeId, typeof(Guid?));
			info.AddValue("PriceListId", this.PriceListId, typeof(Guid?));
			info.AddValue("IsCustomer", this.IsCustomer, typeof(bool));
			info.AddValue("IsSupplier", this.IsSupplier, typeof(bool));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class TitrimetryLevel : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _titrimetryLevelId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid TitrimetryLevelId
		{
			get
			{
				return this._titrimetryLevelId;
			}
			set
			{
				if(this._titrimetryLevelId != value)
				{
					this._titrimetryLevelId = value;
					this.OnPropertyChanged("TitrimetryLevelId");
				}
			}
		}
		
		private Guid? _titrimetryId;
		public virtual Guid? TitrimetryId
		{
			get
			{
				return this._titrimetryId;
			}
			set
			{
				if(this._titrimetryId != value)
				{
					this._titrimetryId = value;
					this.OnPropertyChanged("TitrimetryId");
				}
			}
		}
		
		private decimal? _height;
		public virtual decimal? Height
		{
			get
			{
				return this._height;
			}
			set
			{
				if(this._height != value)
				{
					this._height = value;
					this.OnPropertyChanged("Height");
				}
			}
		}
		
		private decimal? _volume;
		public virtual decimal? Volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if(this._volume != value)
				{
					this._volume = value;
					this.OnPropertyChanged("Volume");
				}
			}
		}
		
		private Titrimetry _titrimetry;
		public virtual Titrimetry Titrimetry
		{
			get
			{
				return this._titrimetry;
			}
			set
			{
				if(this._titrimetry != value)
				{
					this._titrimetry = value;
					this.OnPropertyChanged("Titrimetry");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public TitrimetryLevel()
		{
		}
		
		protected TitrimetryLevel(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.TitrimetryLevelId = (Guid)info.GetValue("TitrimetryLevelId", typeof(Guid));
			this.TitrimetryId = (Guid?)info.GetValue("TitrimetryId", typeof(Guid?));
			this.Height = (decimal?)info.GetValue("Height", typeof(decimal?));
			this.Volume = (decimal?)info.GetValue("Volume", typeof(decimal?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("TitrimetryLevelId", this.TitrimetryLevelId, typeof(Guid));
			info.AddValue("TitrimetryId", this.TitrimetryId, typeof(Guid?));
			info.AddValue("Height", this.Height, typeof(decimal?));
			info.AddValue("Volume", this.Volume, typeof(decimal?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class Titrimetry : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _titrimetryId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid TitrimetryId
		{
			get
			{
				return this._titrimetryId;
			}
			set
			{
				if(this._titrimetryId != value)
				{
					this._titrimetryId = value;
					this.OnPropertyChanged("TitrimetryId");
				}
			}
		}
		
		private Guid? _tankId;
		public virtual Guid? TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private DateTime? _titrationDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? TitrationDate
		{
			get
			{
				return this._titrationDate;
			}
			set
			{
				if(this._titrationDate != value)
				{
					this._titrationDate = value;
					this.OnPropertyChanged("TitrationDate");
				}
			}
		}
		
		private DateTime? _printDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? PrintDate
		{
			get
			{
				return this._printDate;
			}
			set
			{
				if(this._printDate != value)
				{
					this._printDate = value;
					this.OnPropertyChanged("PrintDate");
				}
			}
		}
		
		private string _documentSign;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string DocumentSign
		{
			get
			{
				return this._documentSign;
			}
			set
			{
				if(this._documentSign != value)
				{
					this._documentSign = value;
					this.OnPropertyChanged("DocumentSign");
				}
			}
		}
		
		private Tank _tank;
		public virtual Tank Tank
		{
			get
			{
				return this._tank;
			}
			set
			{
				if(this._tank != value)
				{
					this._tank = value;
					this.OnPropertyChanged("Tank");
				}
			}
		}
		
		private IList<TitrimetryLevel> _titrimetryLevels = new List<TitrimetryLevel>();
		public virtual IList<TitrimetryLevel> TitrimetryLevels
		{
			get
			{
				return this._titrimetryLevels;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public Titrimetry()
		{
		}
		
		protected Titrimetry(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.TitrimetryId = (Guid)info.GetValue("TitrimetryId", typeof(Guid));
			this.TankId = (Guid?)info.GetValue("TankId", typeof(Guid?));
			this.TitrationDate = (DateTime?)info.GetValue("TitrationDate", typeof(DateTime?));
			this.PrintDate = (DateTime?)info.GetValue("PrintDate", typeof(DateTime?));
			this.DocumentSign = info.GetString("DocumentSign");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("TitrimetryId", this.TitrimetryId, typeof(Guid));
			info.AddValue("TankId", this.TankId, typeof(Guid?));
			info.AddValue("TitrationDate", this.TitrationDate, typeof(DateTime?));
			info.AddValue("PrintDate", this.PrintDate, typeof(DateTime?));
			info.AddValue("DocumentSign", this.DocumentSign, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class TankUsagePeriod : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _tankUsagePeriodId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid TankUsagePeriodId
		{
			get
			{
				return this._tankUsagePeriodId;
			}
			set
			{
				if(this._tankUsagePeriodId != value)
				{
					this._tankUsagePeriodId = value;
					this.OnPropertyChanged("TankUsagePeriodId");
				}
			}
		}
		
		private Guid _tankId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private Guid _usagePeriodId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid UsagePeriodId
		{
			get
			{
				return this._usagePeriodId;
			}
			set
			{
				if(this._usagePeriodId != value)
				{
					this._usagePeriodId = value;
					this.OnPropertyChanged("UsagePeriodId");
				}
			}
		}
		
		private DateTime _measurementDateTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime MeasurementDateTime
		{
			get
			{
				return this._measurementDateTime;
			}
			set
			{
				if(this._measurementDateTime != value)
				{
					this._measurementDateTime = value;
					this.OnPropertyChanged("MeasurementDateTime");
				}
			}
		}
		
		private DateTime _expirationDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime ExpirationDate
		{
			get
			{
				return this._expirationDate;
			}
			set
			{
				if(this._expirationDate != value)
				{
					this._expirationDate = value;
					this.OnPropertyChanged("ExpirationDate");
				}
			}
		}
		
		private decimal _totalVolume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalVolume
		{
			get
			{
				return this._totalVolume;
			}
			set
			{
				if(this._totalVolume != value)
				{
					this._totalVolume = value;
					this.OnPropertyChanged("TotalVolume");
				}
			}
		}
		
		private long _cRC;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual long CRC
		{
			get
			{
				return this._cRC;
			}
			set
			{
				if(this._cRC != value)
				{
					this._cRC = value;
					this.OnPropertyChanged("CRC");
				}
			}
		}
		
		private Tank _tank;
		public virtual Tank Tank
		{
			get
			{
				return this._tank;
			}
			set
			{
				if(this._tank != value)
				{
					this._tank = value;
					this.OnPropertyChanged("Tank");
				}
			}
		}
		
		private UsagePeriod _usagePeriod;
		public virtual UsagePeriod UsagePeriod
		{
			get
			{
				return this._usagePeriod;
			}
			set
			{
				if(this._usagePeriod != value)
				{
					this._usagePeriod = value;
					this.OnPropertyChanged("UsagePeriod");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public TankUsagePeriod()
		{
		}
		
		protected TankUsagePeriod(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.TankUsagePeriodId = (Guid)info.GetValue("TankUsagePeriodId", typeof(Guid));
			this.TankId = (Guid)info.GetValue("TankId", typeof(Guid));
			this.UsagePeriodId = (Guid)info.GetValue("UsagePeriodId", typeof(Guid));
			this.MeasurementDateTime = (DateTime)info.GetValue("MeasurementDateTime", typeof(DateTime));
			this.ExpirationDate = (DateTime)info.GetValue("ExpirationDate", typeof(DateTime));
			this.TotalVolume = info.GetDecimal("TotalVolume");
			this.CRC = info.GetInt64("CRC");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("TankUsagePeriodId", this.TankUsagePeriodId, typeof(Guid));
			info.AddValue("TankId", this.TankId, typeof(Guid));
			info.AddValue("UsagePeriodId", this.UsagePeriodId, typeof(Guid));
			info.AddValue("MeasurementDateTime", this.MeasurementDateTime, typeof(DateTime));
			info.AddValue("ExpirationDate", this.ExpirationDate, typeof(DateTime));
			info.AddValue("TotalVolume", this.TotalVolume, typeof(decimal));
			info.AddValue("CRC", this.CRC, typeof(long));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class TankSetting : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _tankSettingId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid TankSettingId
		{
			get
			{
				return this._tankSettingId;
			}
			set
			{
				if(this._tankSettingId != value)
				{
					this._tankSettingId = value;
					this.OnPropertyChanged("TankSettingId");
				}
			}
		}
		
		private Guid _tankId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private string _settingKey;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string SettingKey
		{
			get
			{
				return this._settingKey;
			}
			set
			{
				if(this._settingKey != value)
				{
					this._settingKey = value;
					this.OnPropertyChanged("SettingKey");
				}
			}
		}
		
		private string _settingValue;
		public virtual string SettingValue
		{
			get
			{
				return this._settingValue;
			}
			set
			{
				if(this._settingValue != value)
				{
					this._settingValue = value;
					this.OnPropertyChanged("SettingValue");
				}
			}
		}
		
		private string _description;
		public virtual string Description
		{
			get
			{
				return this._description;
			}
			set
			{
				if(this._description != value)
				{
					this._description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
		
		private Tank _tank;
		public virtual Tank Tank
		{
			get
			{
				return this._tank;
			}
			set
			{
				if(this._tank != value)
				{
					this._tank = value;
					this.OnPropertyChanged("Tank");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public TankSetting()
		{
		}
		
		protected TankSetting(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.TankSettingId = (Guid)info.GetValue("TankSettingId", typeof(Guid));
			this.TankId = (Guid)info.GetValue("TankId", typeof(Guid));
			this.SettingKey = info.GetString("SettingKey");
			this.SettingValue = info.GetString("SettingValue");
			this.Description = info.GetString("Description");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("TankSettingId", this.TankSettingId, typeof(Guid));
			info.AddValue("TankId", this.TankId, typeof(Guid));
			info.AddValue("SettingKey", this.SettingKey, typeof(string));
			info.AddValue("SettingValue", this.SettingValue, typeof(string));
			info.AddValue("Description", this.Description, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class TankSale : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _tankSaleId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid TankSaleId
		{
			get
			{
				return this._tankSaleId;
			}
			set
			{
				if(this._tankSaleId != value)
				{
					this._tankSaleId = value;
					this.OnPropertyChanged("TankSaleId");
				}
			}
		}
		
		private Guid _salesTransactionId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid SalesTransactionId
		{
			get
			{
				return this._salesTransactionId;
			}
			set
			{
				if(this._salesTransactionId != value)
				{
					this._salesTransactionId = value;
					this.OnPropertyChanged("SalesTransactionId");
				}
			}
		}
		
		private Guid _tankId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private decimal _startVolume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal StartVolume
		{
			get
			{
				return this._startVolume;
			}
			set
			{
				if(this._startVolume != value)
				{
					this._startVolume = value;
					this.OnPropertyChanged("StartVolume");
				}
			}
		}
		
		private decimal? _endVolume;
		public virtual decimal? EndVolume
		{
			get
			{
				return this._endVolume;
			}
			set
			{
				if(this._endVolume != value)
				{
					this._endVolume = value;
					this.OnPropertyChanged("EndVolume");
				}
			}
		}
		
		private decimal _startVolumeNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal StartVolumeNormalized
		{
			get
			{
				return this._startVolumeNormalized;
			}
			set
			{
				if(this._startVolumeNormalized != value)
				{
					this._startVolumeNormalized = value;
					this.OnPropertyChanged("StartVolumeNormalized");
				}
			}
		}
		
		private decimal? _endVolumeNormalized;
		public virtual decimal? EndVolumeNormalized
		{
			get
			{
				return this._endVolumeNormalized;
			}
			set
			{
				if(this._endVolumeNormalized != value)
				{
					this._endVolumeNormalized = value;
					this.OnPropertyChanged("EndVolumeNormalized");
				}
			}
		}
		
		private decimal? _startTemperature;
		public virtual decimal? StartTemperature
		{
			get
			{
				return this._startTemperature;
			}
			set
			{
				if(this._startTemperature != value)
				{
					this._startTemperature = value;
					this.OnPropertyChanged("StartTemperature");
				}
			}
		}
		
		private decimal _endTemperature;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal EndTemperature
		{
			get
			{
				return this._endTemperature;
			}
			set
			{
				if(this._endTemperature != value)
				{
					this._endTemperature = value;
					this.OnPropertyChanged("EndTemperature");
				}
			}
		}
		
		private long _cRC;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual long CRC
		{
			get
			{
				return this._cRC;
			}
			set
			{
				if(this._cRC != value)
				{
					this._cRC = value;
					this.OnPropertyChanged("CRC");
				}
			}
		}
		
		private decimal _startLevel;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal StartLevel
		{
			get
			{
				return this._startLevel;
			}
			set
			{
				if(this._startLevel != value)
				{
					this._startLevel = value;
					this.OnPropertyChanged("StartLevel");
				}
			}
		}
		
		private decimal? _endLevel;
		public virtual decimal? EndLevel
		{
			get
			{
				return this._endLevel;
			}
			set
			{
				if(this._endLevel != value)
				{
					this._endLevel = value;
					this.OnPropertyChanged("EndLevel");
				}
			}
		}
		
		private decimal _fuelDensity;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal FuelDensity
		{
			get
			{
				return this._fuelDensity;
			}
			set
			{
				if(this._fuelDensity != value)
				{
					this._fuelDensity = value;
					this.OnPropertyChanged("FuelDensity");
				}
			}
		}
		
		private SalesTransaction _salesTransaction;
		public virtual SalesTransaction SalesTransaction
		{
			get
			{
				return this._salesTransaction;
			}
			set
			{
				if(this._salesTransaction != value)
				{
					this._salesTransaction = value;
					this.OnPropertyChanged("SalesTransaction");
				}
			}
		}
		
		private Tank _tank;
		public virtual Tank Tank
		{
			get
			{
				return this._tank;
			}
			set
			{
				if(this._tank != value)
				{
					this._tank = value;
					this.OnPropertyChanged("Tank");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public TankSale()
		{
		}
		
		protected TankSale(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.TankSaleId = (Guid)info.GetValue("TankSaleId", typeof(Guid));
			this.SalesTransactionId = (Guid)info.GetValue("SalesTransactionId", typeof(Guid));
			this.TankId = (Guid)info.GetValue("TankId", typeof(Guid));
			this.StartVolume = info.GetDecimal("StartVolume");
			this.EndVolume = (decimal?)info.GetValue("EndVolume", typeof(decimal?));
			this.StartVolumeNormalized = info.GetDecimal("StartVolumeNormalized");
			this.EndVolumeNormalized = (decimal?)info.GetValue("EndVolumeNormalized", typeof(decimal?));
			this.StartTemperature = (decimal?)info.GetValue("StartTemperature", typeof(decimal?));
			this.EndTemperature = info.GetDecimal("EndTemperature");
			this.CRC = info.GetInt64("CRC");
			this.StartLevel = info.GetDecimal("StartLevel");
			this.EndLevel = (decimal?)info.GetValue("EndLevel", typeof(decimal?));
			this.FuelDensity = info.GetDecimal("FuelDensity");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("TankSaleId", this.TankSaleId, typeof(Guid));
			info.AddValue("SalesTransactionId", this.SalesTransactionId, typeof(Guid));
			info.AddValue("TankId", this.TankId, typeof(Guid));
			info.AddValue("StartVolume", this.StartVolume, typeof(decimal));
			info.AddValue("EndVolume", this.EndVolume, typeof(decimal?));
			info.AddValue("StartVolumeNormalized", this.StartVolumeNormalized, typeof(decimal));
			info.AddValue("EndVolumeNormalized", this.EndVolumeNormalized, typeof(decimal?));
			info.AddValue("StartTemperature", this.StartTemperature, typeof(decimal?));
			info.AddValue("EndTemperature", this.EndTemperature, typeof(decimal));
			info.AddValue("CRC", this.CRC, typeof(long));
			info.AddValue("StartLevel", this.StartLevel, typeof(decimal));
			info.AddValue("EndLevel", this.EndLevel, typeof(decimal?));
			info.AddValue("FuelDensity", this.FuelDensity, typeof(decimal));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class TankPrice : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _tankPriceId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid TankPriceId
		{
			get
			{
				return this._tankPriceId;
			}
			set
			{
				if(this._tankPriceId != value)
				{
					this._tankPriceId = value;
					this.OnPropertyChanged("TankPriceId");
				}
			}
		}
		
		private Guid _tankId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private decimal _price;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Price
		{
			get
			{
				return this._price;
			}
			set
			{
				if(this._price != value)
				{
					this._price = value;
					this.OnPropertyChanged("Price");
				}
			}
		}
		
		private DateTime _changeDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime ChangeDate
		{
			get
			{
				return this._changeDate;
			}
			set
			{
				if(this._changeDate != value)
				{
					this._changeDate = value;
					this.OnPropertyChanged("ChangeDate");
				}
			}
		}
		
		private decimal _fuelDensity;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal FuelDensity
		{
			get
			{
				return this._fuelDensity;
			}
			set
			{
				if(this._fuelDensity != value)
				{
					this._fuelDensity = value;
					this.OnPropertyChanged("FuelDensity");
				}
			}
		}
		
		private Tank _tank;
		public virtual Tank Tank
		{
			get
			{
				return this._tank;
			}
			set
			{
				if(this._tank != value)
				{
					this._tank = value;
					this.OnPropertyChanged("Tank");
				}
			}
		}
		
		private IList<TankFilling> _tankFillings = new List<TankFilling>();
		public virtual IList<TankFilling> TankFillings
		{
			get
			{
				return this._tankFillings;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public TankPrice()
		{
		}
		
		protected TankPrice(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.TankPriceId = (Guid)info.GetValue("TankPriceId", typeof(Guid));
			this.TankId = (Guid)info.GetValue("TankId", typeof(Guid));
			this.Price = info.GetDecimal("Price");
			this.ChangeDate = (DateTime)info.GetValue("ChangeDate", typeof(DateTime));
			this.FuelDensity = info.GetDecimal("FuelDensity");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("TankPriceId", this.TankPriceId, typeof(Guid));
			info.AddValue("TankId", this.TankId, typeof(Guid));
			info.AddValue("Price", this.Price, typeof(decimal));
			info.AddValue("ChangeDate", this.ChangeDate, typeof(DateTime));
			info.AddValue("FuelDensity", this.FuelDensity, typeof(decimal));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class TankFilling : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _tankFillingId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid TankFillingId
		{
			get
			{
				return this._tankFillingId;
			}
			set
			{
				if(this._tankFillingId != value)
				{
					this._tankFillingId = value;
					this.OnPropertyChanged("TankFillingId");
				}
			}
		}
		
		private Guid _usagePeriodId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid UsagePeriodId
		{
			get
			{
				return this._usagePeriodId;
			}
			set
			{
				if(this._usagePeriodId != value)
				{
					this._usagePeriodId = value;
					this.OnPropertyChanged("UsagePeriodId");
				}
			}
		}
		
		private Guid _tankId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private Guid _tankPriceId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankPriceId
		{
			get
			{
				return this._tankPriceId;
			}
			set
			{
				if(this._tankPriceId != value)
				{
					this._tankPriceId = value;
					this.OnPropertyChanged("TankPriceId");
				}
			}
		}
		
		private DateTime _transactionTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime TransactionTime
		{
			get
			{
				return this._transactionTime;
			}
			set
			{
				if(this._transactionTime != value)
				{
					this._transactionTime = value;
					this.OnPropertyChanged("TransactionTime");
				}
			}
		}
		
		private decimal _volume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if(this._volume != value)
				{
					this._volume = value;
					this.OnPropertyChanged("Volume");
				}
			}
		}
		
		private decimal _volumeNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VolumeNormalized
		{
			get
			{
				return this._volumeNormalized;
			}
			set
			{
				if(this._volumeNormalized != value)
				{
					this._volumeNormalized = value;
					this.OnPropertyChanged("VolumeNormalized");
				}
			}
		}
		
		private decimal _tankTemperatureStart;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TankTemperatureStart
		{
			get
			{
				return this._tankTemperatureStart;
			}
			set
			{
				if(this._tankTemperatureStart != value)
				{
					this._tankTemperatureStart = value;
					this.OnPropertyChanged("TankTemperatureStart");
				}
			}
		}
		
		private decimal _tankTemperatureEnd;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TankTemperatureEnd
		{
			get
			{
				return this._tankTemperatureEnd;
			}
			set
			{
				if(this._tankTemperatureEnd != value)
				{
					this._tankTemperatureEnd = value;
					this.OnPropertyChanged("TankTemperatureEnd");
				}
			}
		}
		
		private bool _isLocked;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsLocked
		{
			get
			{
				return this._isLocked;
			}
			set
			{
				if(this._isLocked != value)
				{
					this._isLocked = value;
					this.OnPropertyChanged("IsLocked");
				}
			}
		}
		
		private long _cRC;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual long CRC
		{
			get
			{
				return this._cRC;
			}
			set
			{
				if(this._cRC != value)
				{
					this._cRC = value;
					this.OnPropertyChanged("CRC");
				}
			}
		}
		
		private DateTime _transactionTimeEnd;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime TransactionTimeEnd
		{
			get
			{
				return this._transactionTimeEnd;
			}
			set
			{
				if(this._transactionTimeEnd != value)
				{
					this._transactionTimeEnd = value;
					this.OnPropertyChanged("TransactionTimeEnd");
				}
			}
		}
		
		private decimal _levelStart;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal LevelStart
		{
			get
			{
				return this._levelStart;
			}
			set
			{
				if(this._levelStart != value)
				{
					this._levelStart = value;
					this.OnPropertyChanged("LevelStart");
				}
			}
		}
		
		private decimal _levelEnd;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal LevelEnd
		{
			get
			{
				return this._levelEnd;
			}
			set
			{
				if(this._levelEnd != value)
				{
					this._levelEnd = value;
					this.OnPropertyChanged("LevelEnd");
				}
			}
		}
		
		private decimal _fuelDensity;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal FuelDensity
		{
			get
			{
				return this._fuelDensity;
			}
			set
			{
				if(this._fuelDensity != value)
				{
					this._fuelDensity = value;
					this.OnPropertyChanged("FuelDensity");
				}
			}
		}
		
		private decimal _volumeReal;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VolumeReal
		{
			get
			{
				return this._volumeReal;
			}
			set
			{
				if(this._volumeReal != value)
				{
					this._volumeReal = value;
					this.OnPropertyChanged("VolumeReal");
				}
			}
		}
		
		private decimal _volumeRealNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VolumeRealNormalized
		{
			get
			{
				return this._volumeRealNormalized;
			}
			set
			{
				if(this._volumeRealNormalized != value)
				{
					this._volumeRealNormalized = value;
					this.OnPropertyChanged("VolumeRealNormalized");
				}
			}
		}
		
		private Guid _applicationUserId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid ApplicationUserId
		{
			get
			{
				return this._applicationUserId;
			}
			set
			{
				if(this._applicationUserId != value)
				{
					this._applicationUserId = value;
					this.OnPropertyChanged("ApplicationUserId");
				}
			}
		}
		
		private DateTime? _sentDateTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? SentDateTime
		{
			get
			{
				return this._sentDateTime;
			}
			set
			{
				if(this._sentDateTime != value)
				{
					this._sentDateTime = value;
					this.OnPropertyChanged("SentDateTime");
				}
			}
		}
		
		private string _responseCode;
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public virtual string ResponseCode
		{
			get
			{
				return this._responseCode;
			}
			set
			{
				if(this._responseCode != value)
				{
					this._responseCode = value;
					this.OnPropertyChanged("ResponseCode");
				}
			}
		}
		
		private string _signSignature;
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public virtual string SignSignature
		{
			get
			{
				return this._signSignature;
			}
			set
			{
				if(this._signSignature != value)
				{
					this._signSignature = value;
					this.OnPropertyChanged("SignSignature");
				}
			}
		}
		
		private ApplicationUser _applicationUser;
		public virtual ApplicationUser ApplicationUser
		{
			get
			{
				return this._applicationUser;
			}
			set
			{
				if(this._applicationUser != value)
				{
					this._applicationUser = value;
					this.OnPropertyChanged("ApplicationUser");
				}
			}
		}
		
		private Tank _tank;
		public virtual Tank Tank
		{
			get
			{
				return this._tank;
			}
			set
			{
				if(this._tank != value)
				{
					this._tank = value;
					this.OnPropertyChanged("Tank");
				}
			}
		}
		
		private TankPrice _tankPrice;
		public virtual TankPrice TankPrice
		{
			get
			{
				return this._tankPrice;
			}
			set
			{
				if(this._tankPrice != value)
				{
					this._tankPrice = value;
					this.OnPropertyChanged("TankPrice");
				}
			}
		}
		
		private UsagePeriod _usagePeriod;
		public virtual UsagePeriod UsagePeriod
		{
			get
			{
				return this._usagePeriod;
			}
			set
			{
				if(this._usagePeriod != value)
				{
					this._usagePeriod = value;
					this.OnPropertyChanged("UsagePeriod");
				}
			}
		}
		
		private IList<InvoiceLine> _invoiceLines = new List<InvoiceLine>();
		public virtual IList<InvoiceLine> InvoiceLines
		{
			get
			{
				return this._invoiceLines;
			}
		}
		
		private IList<Balance> _balances = new List<Balance>();
		public virtual IList<Balance> Balances
		{
			get
			{
				return this._balances;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public TankFilling()
		{
		}
		
		protected TankFilling(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.TankFillingId = (Guid)info.GetValue("TankFillingId", typeof(Guid));
			this.UsagePeriodId = (Guid)info.GetValue("UsagePeriodId", typeof(Guid));
			this.TankId = (Guid)info.GetValue("TankId", typeof(Guid));
			this.TankPriceId = (Guid)info.GetValue("TankPriceId", typeof(Guid));
			this.TransactionTime = (DateTime)info.GetValue("TransactionTime", typeof(DateTime));
			this.Volume = info.GetDecimal("Volume");
			this.VolumeNormalized = info.GetDecimal("VolumeNormalized");
			this.TankTemperatureStart = info.GetDecimal("TankTemperatureStart");
			this.TankTemperatureEnd = info.GetDecimal("TankTemperatureEnd");
			this.IsLocked = info.GetBoolean("IsLocked");
			this.CRC = info.GetInt64("CRC");
			this.TransactionTimeEnd = (DateTime)info.GetValue("TransactionTimeEnd", typeof(DateTime));
			this.LevelStart = info.GetDecimal("LevelStart");
			this.LevelEnd = info.GetDecimal("LevelEnd");
			this.FuelDensity = info.GetDecimal("FuelDensity");
			this.VolumeReal = info.GetDecimal("VolumeReal");
			this.VolumeRealNormalized = info.GetDecimal("VolumeRealNormalized");
			this.ApplicationUserId = (Guid)info.GetValue("ApplicationUserId", typeof(Guid));
			this.SentDateTime = (DateTime?)info.GetValue("SentDateTime", typeof(DateTime?));
			this.ResponseCode = info.GetString("ResponseCode");
			this.SignSignature = info.GetString("SignSignature");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("TankFillingId", this.TankFillingId, typeof(Guid));
			info.AddValue("UsagePeriodId", this.UsagePeriodId, typeof(Guid));
			info.AddValue("TankId", this.TankId, typeof(Guid));
			info.AddValue("TankPriceId", this.TankPriceId, typeof(Guid));
			info.AddValue("TransactionTime", this.TransactionTime, typeof(DateTime));
			info.AddValue("Volume", this.Volume, typeof(decimal));
			info.AddValue("VolumeNormalized", this.VolumeNormalized, typeof(decimal));
			info.AddValue("TankTemperatureStart", this.TankTemperatureStart, typeof(decimal));
			info.AddValue("TankTemperatureEnd", this.TankTemperatureEnd, typeof(decimal));
			info.AddValue("IsLocked", this.IsLocked, typeof(bool));
			info.AddValue("CRC", this.CRC, typeof(long));
			info.AddValue("TransactionTimeEnd", this.TransactionTimeEnd, typeof(DateTime));
			info.AddValue("LevelStart", this.LevelStart, typeof(decimal));
			info.AddValue("LevelEnd", this.LevelEnd, typeof(decimal));
			info.AddValue("FuelDensity", this.FuelDensity, typeof(decimal));
			info.AddValue("VolumeReal", this.VolumeReal, typeof(decimal));
			info.AddValue("VolumeRealNormalized", this.VolumeRealNormalized, typeof(decimal));
			info.AddValue("ApplicationUserId", this.ApplicationUserId, typeof(Guid));
			info.AddValue("SentDateTime", this.SentDateTime, typeof(DateTime?));
			info.AddValue("ResponseCode", this.ResponseCode, typeof(string));
			info.AddValue("SignSignature", this.SignSignature, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class Tank : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _tankId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private Guid _fuelTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid FuelTypeId
		{
			get
			{
				return this._fuelTypeId;
			}
			set
			{
				if(this._fuelTypeId != value)
				{
					this._fuelTypeId = value;
					this.OnPropertyChanged("FuelTypeId");
				}
			}
		}
		
		private decimal _totalVolume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalVolume
		{
			get
			{
				return this._totalVolume;
			}
			set
			{
				if(this._totalVolume != value)
				{
					this._totalVolume = value;
					this.OnPropertyChanged("TotalVolume");
				}
			}
		}
		
		private decimal _offsetVolume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal OffsetVolume
		{
			get
			{
				return this._offsetVolume;
			}
			set
			{
				if(this._offsetVolume != value)
				{
					this._offsetVolume = value;
					this.OnPropertyChanged("OffsetVolume");
				}
			}
		}
		
		private int _physicalState;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int PhysicalState
		{
			get
			{
				return this._physicalState;
			}
			set
			{
				if(this._physicalState != value)
				{
					this._physicalState = value;
					this.OnPropertyChanged("PhysicalState");
				}
			}
		}
		
		private int _channel;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int Channel
		{
			get
			{
				return this._channel;
			}
			set
			{
				if(this._channel != value)
				{
					this._channel = value;
					this.OnPropertyChanged("Channel");
				}
			}
		}
		
		private int _address;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int Address
		{
			get
			{
				return this._address;
			}
			set
			{
				if(this._address != value)
				{
					this._address = value;
					this.OnPropertyChanged("Address");
				}
			}
		}
		
		private Guid _atgProbeTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid AtgProbeTypeId
		{
			get
			{
				return this._atgProbeTypeId;
			}
			set
			{
				if(this._atgProbeTypeId != value)
				{
					this._atgProbeTypeId = value;
					this.OnPropertyChanged("AtgProbeTypeId");
				}
			}
		}
		
		private Guid _communicationControllerId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid CommunicationControllerId
		{
			get
			{
				return this._communicationControllerId;
			}
			set
			{
				if(this._communicationControllerId != value)
				{
					this._communicationControllerId = value;
					this.OnPropertyChanged("CommunicationControllerId");
				}
			}
		}
		
		private decimal _maxWaterHeight;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal MaxWaterHeight
		{
			get
			{
				return this._maxWaterHeight;
			}
			set
			{
				if(this._maxWaterHeight != value)
				{
					this._maxWaterHeight = value;
					this.OnPropertyChanged("MaxWaterHeight");
				}
			}
		}
		
		private decimal _minFuelHeight;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal MinFuelHeight
		{
			get
			{
				return this._minFuelHeight;
			}
			set
			{
				if(this._minFuelHeight != value)
				{
					this._minFuelHeight = value;
					this.OnPropertyChanged("MinFuelHeight");
				}
			}
		}
		
		private decimal _maxFuelHeight;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal MaxFuelHeight
		{
			get
			{
				return this._maxFuelHeight;
			}
			set
			{
				if(this._maxFuelHeight != value)
				{
					this._maxFuelHeight = value;
					this.OnPropertyChanged("MaxFuelHeight");
				}
			}
		}
		
		private int _tankNumber;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int TankNumber
		{
			get
			{
				return this._tankNumber;
			}
			set
			{
				if(this._tankNumber != value)
				{
					this._tankNumber = value;
					this.OnPropertyChanged("TankNumber");
				}
			}
		}
		
		private string _tankSerialNumber;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string TankSerialNumber
		{
			get
			{
				return this._tankSerialNumber;
			}
			set
			{
				if(this._tankSerialNumber != value)
				{
					this._tankSerialNumber = value;
					this.OnPropertyChanged("TankSerialNumber");
				}
			}
		}
		
		private decimal _fuelLevelBase;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal FuelLevelBase
		{
			get
			{
				return this._fuelLevelBase;
			}
			set
			{
				if(this._fuelLevelBase != value)
				{
					this._fuelLevelBase = value;
					this.OnPropertyChanged("FuelLevelBase");
				}
			}
		}
		
		private decimal _waterLevelBase;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal WaterLevelBase
		{
			get
			{
				return this._waterLevelBase;
			}
			set
			{
				if(this._waterLevelBase != value)
				{
					this._waterLevelBase = value;
					this.OnPropertyChanged("WaterLevelBase");
				}
			}
		}
		
		private decimal _temperatire;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Temperatire
		{
			get
			{
				return this._temperatire;
			}
			set
			{
				if(this._temperatire != value)
				{
					this._temperatire = value;
					this.OnPropertyChanged("Temperatire");
				}
			}
		}
		
		private decimal _offestWater;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal OffestWater
		{
			get
			{
				return this._offestWater;
			}
			set
			{
				if(this._offestWater != value)
				{
					this._offestWater = value;
					this.OnPropertyChanged("OffestWater");
				}
			}
		}
		
		private bool? _isVirtual;
		public virtual bool? IsVirtual
		{
			get
			{
				return this._isVirtual;
			}
			set
			{
				if(this._isVirtual != value)
				{
					this._isVirtual = value;
					this.OnPropertyChanged("IsVirtual");
				}
			}
		}
		
		private decimal? _orderLimit;
		public virtual decimal? OrderLimit
		{
			get
			{
				return this._orderLimit;
			}
			set
			{
				if(this._orderLimit != value)
				{
					this._orderLimit = value;
					this.OnPropertyChanged("OrderLimit");
				}
			}
		}
		
		private AtgProbeType _atgProbeType;
		public virtual AtgProbeType AtgProbeType
		{
			get
			{
				return this._atgProbeType;
			}
			set
			{
				if(this._atgProbeType != value)
				{
					this._atgProbeType = value;
					this.OnPropertyChanged("AtgProbeType");
				}
			}
		}
		
		private CommunicationController _communicationController;
		public virtual CommunicationController CommunicationController
		{
			get
			{
				return this._communicationController;
			}
			set
			{
				if(this._communicationController != value)
				{
					this._communicationController = value;
					this.OnPropertyChanged("CommunicationController");
				}
			}
		}
		
		private FuelType _fuelType;
		public virtual FuelType FuelType
		{
			get
			{
				return this._fuelType;
			}
			set
			{
				if(this._fuelType != value)
				{
					this._fuelType = value;
					this.OnPropertyChanged("FuelType");
				}
			}
		}
		
		private IList<Titrimetry> _titrimetries = new List<Titrimetry>();
		public virtual IList<Titrimetry> Titrimetries
		{
			get
			{
				return this._titrimetries;
			}
		}
		
		private IList<TankUsagePeriod> _tankUsagePeriods = new List<TankUsagePeriod>();
		public virtual IList<TankUsagePeriod> TankUsagePeriods
		{
			get
			{
				return this._tankUsagePeriods;
			}
		}
		
		private IList<TankSetting> _tankSettings = new List<TankSetting>();
		public virtual IList<TankSetting> TankSettings
		{
			get
			{
				return this._tankSettings;
			}
		}
		
		private IList<TankSale> _tankSales = new List<TankSale>();
		public virtual IList<TankSale> TankSales
		{
			get
			{
				return this._tankSales;
			}
		}
		
		private IList<TankPrice> _tankPrices = new List<TankPrice>();
		public virtual IList<TankPrice> TankPrices
		{
			get
			{
				return this._tankPrices;
			}
		}
		
		private IList<TankFilling> _tankFillings = new List<TankFilling>();
		public virtual IList<TankFilling> TankFillings
		{
			get
			{
				return this._tankFillings;
			}
		}
		
		private IList<SystemEvent> _systemEvents = new List<SystemEvent>();
		public virtual IList<SystemEvent> SystemEvents
		{
			get
			{
				return this._systemEvents;
			}
		}
		
		private IList<NozzleFlow> _nozzleFlows = new List<NozzleFlow>();
		public virtual IList<NozzleFlow> NozzleFlows
		{
			get
			{
				return this._nozzleFlows;
			}
		}
		
		private IList<InvoiceLine> _invoiceLines = new List<InvoiceLine>();
		public virtual IList<InvoiceLine> InvoiceLines
		{
			get
			{
				return this._invoiceLines;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public Tank()
		{
		}
		
		protected Tank(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.TankId = (Guid)info.GetValue("TankId", typeof(Guid));
			this.FuelTypeId = (Guid)info.GetValue("FuelTypeId", typeof(Guid));
			this.TotalVolume = info.GetDecimal("TotalVolume");
			this.OffsetVolume = info.GetDecimal("OffsetVolume");
			this.PhysicalState = info.GetInt32("PhysicalState");
			this.Channel = info.GetInt32("Channel");
			this.Address = info.GetInt32("Address");
			this.AtgProbeTypeId = (Guid)info.GetValue("AtgProbeTypeId", typeof(Guid));
			this.CommunicationControllerId = (Guid)info.GetValue("CommunicationControllerId", typeof(Guid));
			this.MaxWaterHeight = info.GetDecimal("MaxWaterHeight");
			this.MinFuelHeight = info.GetDecimal("MinFuelHeight");
			this.MaxFuelHeight = info.GetDecimal("MaxFuelHeight");
			this.TankNumber = info.GetInt32("TankNumber");
			this.TankSerialNumber = info.GetString("TankSerialNumber");
			this.FuelLevelBase = info.GetDecimal("FuelLevelBase");
			this.WaterLevelBase = info.GetDecimal("WaterLevelBase");
			this.Temperatire = info.GetDecimal("Temperatire");
			this.OffestWater = info.GetDecimal("OffestWater");
			this.IsVirtual = (bool?)info.GetValue("IsVirtual", typeof(bool?));
			this.OrderLimit = (decimal?)info.GetValue("OrderLimit", typeof(decimal?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("TankId", this.TankId, typeof(Guid));
			info.AddValue("FuelTypeId", this.FuelTypeId, typeof(Guid));
			info.AddValue("TotalVolume", this.TotalVolume, typeof(decimal));
			info.AddValue("OffsetVolume", this.OffsetVolume, typeof(decimal));
			info.AddValue("PhysicalState", this.PhysicalState, typeof(int));
			info.AddValue("Channel", this.Channel, typeof(int));
			info.AddValue("Address", this.Address, typeof(int));
			info.AddValue("AtgProbeTypeId", this.AtgProbeTypeId, typeof(Guid));
			info.AddValue("CommunicationControllerId", this.CommunicationControllerId, typeof(Guid));
			info.AddValue("MaxWaterHeight", this.MaxWaterHeight, typeof(decimal));
			info.AddValue("MinFuelHeight", this.MinFuelHeight, typeof(decimal));
			info.AddValue("MaxFuelHeight", this.MaxFuelHeight, typeof(decimal));
			info.AddValue("TankNumber", this.TankNumber, typeof(int));
			info.AddValue("TankSerialNumber", this.TankSerialNumber, typeof(string));
			info.AddValue("FuelLevelBase", this.FuelLevelBase, typeof(decimal));
			info.AddValue("WaterLevelBase", this.WaterLevelBase, typeof(decimal));
			info.AddValue("Temperatire", this.Temperatire, typeof(decimal));
			info.AddValue("OffestWater", this.OffestWater, typeof(decimal));
			info.AddValue("IsVirtual", this.IsVirtual, typeof(bool?));
			info.AddValue("OrderLimit", this.OrderLimit, typeof(decimal?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class SystemEventDatum : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _systemEventDataId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid SystemEventDataId
		{
			get
			{
				return this._systemEventDataId;
			}
			set
			{
				if(this._systemEventDataId != value)
				{
					this._systemEventDataId = value;
					this.OnPropertyChanged("SystemEventDataId");
				}
			}
		}
		
		private Guid _systemEventId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid SystemEventId
		{
			get
			{
				return this._systemEventId;
			}
			set
			{
				if(this._systemEventId != value)
				{
					this._systemEventId = value;
					this.OnPropertyChanged("SystemEventId");
				}
			}
		}
		
		private string _propertyName;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string PropertyName
		{
			get
			{
				return this._propertyName;
			}
			set
			{
				if(this._propertyName != value)
				{
					this._propertyName = value;
					this.OnPropertyChanged("PropertyName");
				}
			}
		}
		
		private string _value;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Value
		{
			get
			{
				return this._value;
			}
			set
			{
				if(this._value != value)
				{
					this._value = value;
					this.OnPropertyChanged("Value");
				}
			}
		}
		
		private bool _isAlertTrigger;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsAlertTrigger
		{
			get
			{
				return this._isAlertTrigger;
			}
			set
			{
				if(this._isAlertTrigger != value)
				{
					this._isAlertTrigger = value;
					this.OnPropertyChanged("IsAlertTrigger");
				}
			}
		}
		
		private SystemEvent _systemEvent;
		public virtual SystemEvent SystemEvent
		{
			get
			{
				return this._systemEvent;
			}
			set
			{
				if(this._systemEvent != value)
				{
					this._systemEvent = value;
					this.OnPropertyChanged("SystemEvent");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public SystemEventDatum()
		{
		}
		
		protected SystemEventDatum(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.SystemEventDataId = (Guid)info.GetValue("SystemEventDataId", typeof(Guid));
			this.SystemEventId = (Guid)info.GetValue("SystemEventId", typeof(Guid));
			this.PropertyName = info.GetString("PropertyName");
			this.Value = info.GetString("Value");
			this.IsAlertTrigger = info.GetBoolean("IsAlertTrigger");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("SystemEventDataId", this.SystemEventDataId, typeof(Guid));
			info.AddValue("SystemEventId", this.SystemEventId, typeof(Guid));
			info.AddValue("PropertyName", this.PropertyName, typeof(string));
			info.AddValue("Value", this.Value, typeof(string));
			info.AddValue("IsAlertTrigger", this.IsAlertTrigger, typeof(bool));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class SystemEvent : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _eventId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid EventId
		{
			get
			{
				return this._eventId;
			}
			set
			{
				if(this._eventId != value)
				{
					this._eventId = value;
					this.OnPropertyChanged("EventId");
				}
			}
		}
		
		private int _eventType;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int EventType
		{
			get
			{
				return this._eventType;
			}
			set
			{
				if(this._eventType != value)
				{
					this._eventType = value;
					this.OnPropertyChanged("EventType");
				}
			}
		}
		
		private string _message;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Message
		{
			get
			{
				return this._message;
			}
			set
			{
				if(this._message != value)
				{
					this._message = value;
					this.OnPropertyChanged("Message");
				}
			}
		}
		
		private DateTime _eventDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime EventDate
		{
			get
			{
				return this._eventDate;
			}
			set
			{
				if(this._eventDate != value)
				{
					this._eventDate = value;
					this.OnPropertyChanged("EventDate");
				}
			}
		}
		
		private Guid? _nozzleId;
		public virtual Guid? NozzleId
		{
			get
			{
				return this._nozzleId;
			}
			set
			{
				if(this._nozzleId != value)
				{
					this._nozzleId = value;
					this.OnPropertyChanged("NozzleId");
				}
			}
		}
		
		private Guid? _tankId;
		public virtual Guid? TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private Guid? _dispenserId;
		public virtual Guid? DispenserId
		{
			get
			{
				return this._dispenserId;
			}
			set
			{
				if(this._dispenserId != value)
				{
					this._dispenserId = value;
					this.OnPropertyChanged("DispenserId");
				}
			}
		}
		
		private Guid? _alertDefinitionId;
		public virtual Guid? AlertDefinitionId
		{
			get
			{
				return this._alertDefinitionId;
			}
			set
			{
				if(this._alertDefinitionId != value)
				{
					this._alertDefinitionId = value;
					this.OnPropertyChanged("AlertDefinitionId");
				}
			}
		}
		
		private DateTime? _sentDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? SentDate
		{
			get
			{
				return this._sentDate;
			}
			set
			{
				if(this._sentDate != value)
				{
					this._sentDate = value;
					this.OnPropertyChanged("SentDate");
				}
			}
		}
		
		private DateTime? _resolvedDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? ResolvedDate
		{
			get
			{
				return this._resolvedDate;
			}
			set
			{
				if(this._resolvedDate != value)
				{
					this._resolvedDate = value;
					this.OnPropertyChanged("ResolvedDate");
				}
			}
		}
		
		private string _resolveMessage;
		public virtual string ResolveMessage
		{
			get
			{
				return this._resolveMessage;
			}
			set
			{
				if(this._resolveMessage != value)
				{
					this._resolveMessage = value;
					this.OnPropertyChanged("ResolveMessage");
				}
			}
		}
		
		private long _cRC;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual long CRC
		{
			get
			{
				return this._cRC;
			}
			set
			{
				if(this._cRC != value)
				{
					this._cRC = value;
					this.OnPropertyChanged("CRC");
				}
			}
		}
		
		private int? _alarmType;
		public virtual int? AlarmType
		{
			get
			{
				return this._alarmType;
			}
			set
			{
				if(this._alarmType != value)
				{
					this._alarmType = value;
					this.OnPropertyChanged("AlarmType");
				}
			}
		}
		
		private DateTime? _printedDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? PrintedDate
		{
			get
			{
				return this._printedDate;
			}
			set
			{
				if(this._printedDate != value)
				{
					this._printedDate = value;
					this.OnPropertyChanged("PrintedDate");
				}
			}
		}
		
		private string _documentSign;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string DocumentSign
		{
			get
			{
				return this._documentSign;
			}
			set
			{
				if(this._documentSign != value)
				{
					this._documentSign = value;
					this.OnPropertyChanged("DocumentSign");
				}
			}
		}
		
		private Dispenser _dispenser;
		public virtual Dispenser Dispenser
		{
			get
			{
				return this._dispenser;
			}
			set
			{
				if(this._dispenser != value)
				{
					this._dispenser = value;
					this.OnPropertyChanged("Dispenser");
				}
			}
		}
		
		private AlertDefinition _alertDefinition;
		public virtual AlertDefinition AlertDefinition
		{
			get
			{
				return this._alertDefinition;
			}
			set
			{
				if(this._alertDefinition != value)
				{
					this._alertDefinition = value;
					this.OnPropertyChanged("AlertDefinition");
				}
			}
		}
		
		private Nozzle _nozzle;
		public virtual Nozzle Nozzle
		{
			get
			{
				return this._nozzle;
			}
			set
			{
				if(this._nozzle != value)
				{
					this._nozzle = value;
					this.OnPropertyChanged("Nozzle");
				}
			}
		}
		
		private Tank _tank;
		public virtual Tank Tank
		{
			get
			{
				return this._tank;
			}
			set
			{
				if(this._tank != value)
				{
					this._tank = value;
					this.OnPropertyChanged("Tank");
				}
			}
		}
		
		private IList<SystemEventDatum> _systemEventData = new List<SystemEventDatum>();
		public virtual IList<SystemEventDatum> SystemEventData
		{
			get
			{
				return this._systemEventData;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public SystemEvent()
		{
		}
		
		protected SystemEvent(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.EventId = (Guid)info.GetValue("EventId", typeof(Guid));
			this.EventType = info.GetInt32("EventType");
			this.Message = info.GetString("Message");
			this.EventDate = (DateTime)info.GetValue("EventDate", typeof(DateTime));
			this.NozzleId = (Guid?)info.GetValue("NozzleId", typeof(Guid?));
			this.TankId = (Guid?)info.GetValue("TankId", typeof(Guid?));
			this.DispenserId = (Guid?)info.GetValue("DispenserId", typeof(Guid?));
			this.AlertDefinitionId = (Guid?)info.GetValue("AlertDefinitionId", typeof(Guid?));
			this.SentDate = (DateTime?)info.GetValue("SentDate", typeof(DateTime?));
			this.ResolvedDate = (DateTime?)info.GetValue("ResolvedDate", typeof(DateTime?));
			this.ResolveMessage = info.GetString("ResolveMessage");
			this.CRC = info.GetInt64("CRC");
			this.AlarmType = (int?)info.GetValue("AlarmType", typeof(int?));
			this.PrintedDate = (DateTime?)info.GetValue("PrintedDate", typeof(DateTime?));
			this.DocumentSign = info.GetString("DocumentSign");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("EventId", this.EventId, typeof(Guid));
			info.AddValue("EventType", this.EventType, typeof(int));
			info.AddValue("Message", this.Message, typeof(string));
			info.AddValue("EventDate", this.EventDate, typeof(DateTime));
			info.AddValue("NozzleId", this.NozzleId, typeof(Guid?));
			info.AddValue("TankId", this.TankId, typeof(Guid?));
			info.AddValue("DispenserId", this.DispenserId, typeof(Guid?));
			info.AddValue("AlertDefinitionId", this.AlertDefinitionId, typeof(Guid?));
			info.AddValue("SentDate", this.SentDate, typeof(DateTime?));
			info.AddValue("ResolvedDate", this.ResolvedDate, typeof(DateTime?));
			info.AddValue("ResolveMessage", this.ResolveMessage, typeof(string));
			info.AddValue("CRC", this.CRC, typeof(long));
			info.AddValue("AlarmType", this.AlarmType, typeof(int?));
			info.AddValue("PrintedDate", this.PrintedDate, typeof(DateTime?));
			info.AddValue("DocumentSign", this.DocumentSign, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class SendLog : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _sendLogId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid SendLogId
		{
			get
			{
				return this._sendLogId;
			}
			set
			{
				if(this._sendLogId != value)
				{
					this._sendLogId = value;
					this.OnPropertyChanged("SendLogId");
				}
			}
		}
		
		private DateTime _sendDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime SendDate
		{
			get
			{
				return this._sendDate;
			}
			set
			{
				if(this._sendDate != value)
				{
					this._sendDate = value;
					this.OnPropertyChanged("SendDate");
				}
			}
		}
		
		private string _action;
		[System.ComponentModel.DataAnnotations.StringLength(50)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Action
		{
			get
			{
				return this._action;
			}
			set
			{
				if(this._action != value)
				{
					this._action = value;
					this.OnPropertyChanged("Action");
				}
			}
		}
		
		private string _sendData;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string SendData
		{
			get
			{
				return this._sendData;
			}
			set
			{
				if(this._sendData != value)
				{
					this._sendData = value;
					this.OnPropertyChanged("SendData");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public SendLog()
		{
		}
		
		protected SendLog(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.SendLogId = (Guid)info.GetValue("SendLogId", typeof(Guid));
			this.SendDate = (DateTime)info.GetValue("SendDate", typeof(DateTime));
			this.Action = info.GetString("Action");
			this.SendData = info.GetString("SendData");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("SendLogId", this.SendLogId, typeof(Guid));
			info.AddValue("SendDate", this.SendDate, typeof(DateTime));
			info.AddValue("Action", this.Action, typeof(string));
			info.AddValue("SendData", this.SendData, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class SalesTransaction : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _salesTransactionId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid SalesTransactionId
		{
			get
			{
				return this._salesTransactionId;
			}
			set
			{
				if(this._salesTransactionId != value)
				{
					this._salesTransactionId = value;
					this.OnPropertyChanged("SalesTransactionId");
				}
			}
		}
		
		private Guid _usagePeriodId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid UsagePeriodId
		{
			get
			{
				return this._usagePeriodId;
			}
			set
			{
				if(this._usagePeriodId != value)
				{
					this._usagePeriodId = value;
					this.OnPropertyChanged("UsagePeriodId");
				}
			}
		}
		
		private bool _isLocked;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsLocked
		{
			get
			{
				return this._isLocked;
			}
			set
			{
				if(this._isLocked != value)
				{
					this._isLocked = value;
					this.OnPropertyChanged("IsLocked");
				}
			}
		}
		
		private long _cRC;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual long CRC
		{
			get
			{
				return this._cRC;
			}
			set
			{
				if(this._cRC != value)
				{
					this._cRC = value;
					this.OnPropertyChanged("CRC");
				}
			}
		}
		
		private Guid _nozzleId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid NozzleId
		{
			get
			{
				return this._nozzleId;
			}
			set
			{
				if(this._nozzleId != value)
				{
					this._nozzleId = value;
					this.OnPropertyChanged("NozzleId");
				}
			}
		}
		
		private decimal _totalizerStart;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalizerStart
		{
			get
			{
				return this._totalizerStart;
			}
			set
			{
				if(this._totalizerStart != value)
				{
					this._totalizerStart = value;
					this.OnPropertyChanged("TotalizerStart");
				}
			}
		}
		
		private decimal _totalizerEnd;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalizerEnd
		{
			get
			{
				return this._totalizerEnd;
			}
			set
			{
				if(this._totalizerEnd != value)
				{
					this._totalizerEnd = value;
					this.OnPropertyChanged("TotalizerEnd");
				}
			}
		}
		
		private DateTime _transactionTimeStamp;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime TransactionTimeStamp
		{
			get
			{
				return this._transactionTimeStamp;
			}
			set
			{
				if(this._transactionTimeStamp != value)
				{
					this._transactionTimeStamp = value;
					this.OnPropertyChanged("TransactionTimeStamp");
				}
			}
		}
		
		private decimal _volume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if(this._volume != value)
				{
					this._volume = value;
					this.OnPropertyChanged("Volume");
				}
			}
		}
		
		private decimal _volumeNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VolumeNormalized
		{
			get
			{
				return this._volumeNormalized;
			}
			set
			{
				if(this._volumeNormalized != value)
				{
					this._volumeNormalized = value;
					this.OnPropertyChanged("VolumeNormalized");
				}
			}
		}
		
		private decimal _temperatureStart;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TemperatureStart
		{
			get
			{
				return this._temperatureStart;
			}
			set
			{
				if(this._temperatureStart != value)
				{
					this._temperatureStart = value;
					this.OnPropertyChanged("TemperatureStart");
				}
			}
		}
		
		private decimal _temperatureEnd;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TemperatureEnd
		{
			get
			{
				return this._temperatureEnd;
			}
			set
			{
				if(this._temperatureEnd != value)
				{
					this._temperatureEnd = value;
					this.OnPropertyChanged("TemperatureEnd");
				}
			}
		}
		
		private decimal _unitPrice;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal UnitPrice
		{
			get
			{
				return this._unitPrice;
			}
			set
			{
				if(this._unitPrice != value)
				{
					this._unitPrice = value;
					this.OnPropertyChanged("UnitPrice");
				}
			}
		}
		
		private decimal _totalPrice;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if(this._totalPrice != value)
				{
					this._totalPrice = value;
					this.OnPropertyChanged("TotalPrice");
				}
			}
		}
		
		private Guid _applicationUserId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid ApplicationUserId
		{
			get
			{
				return this._applicationUserId;
			}
			set
			{
				if(this._applicationUserId != value)
				{
					this._applicationUserId = value;
					this.OnPropertyChanged("ApplicationUserId");
				}
			}
		}
		
		private DateTime? _sentDateTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? SentDateTime
		{
			get
			{
				return this._sentDateTime;
			}
			set
			{
				if(this._sentDateTime != value)
				{
					this._sentDateTime = value;
					this.OnPropertyChanged("SentDateTime");
				}
			}
		}
		
		private string _responseCode;
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public virtual string ResponseCode
		{
			get
			{
				return this._responseCode;
			}
			set
			{
				if(this._responseCode != value)
				{
					this._responseCode = value;
					this.OnPropertyChanged("ResponseCode");
				}
			}
		}
		
		private Guid? _shiftId;
		public virtual Guid? ShiftId
		{
			get
			{
				return this._shiftId;
			}
			set
			{
				if(this._shiftId != value)
				{
					this._shiftId = value;
					this.OnPropertyChanged("ShiftId");
				}
			}
		}
		
		private bool? _isErrorResolving;
		public virtual bool? IsErrorResolving
		{
			get
			{
				return this._isErrorResolving;
			}
			set
			{
				if(this._isErrorResolving != value)
				{
					this._isErrorResolving = value;
					this.OnPropertyChanged("IsErrorResolving");
				}
			}
		}
		
		private ApplicationUser _applicationUser;
		public virtual ApplicationUser ApplicationUser
		{
			get
			{
				return this._applicationUser;
			}
			set
			{
				if(this._applicationUser != value)
				{
					this._applicationUser = value;
					this.OnPropertyChanged("ApplicationUser");
				}
			}
		}
		
		private Nozzle _nozzle;
		public virtual Nozzle Nozzle
		{
			get
			{
				return this._nozzle;
			}
			set
			{
				if(this._nozzle != value)
				{
					this._nozzle = value;
					this.OnPropertyChanged("Nozzle");
				}
			}
		}
		
		private UsagePeriod _usagePeriod;
		public virtual UsagePeriod UsagePeriod
		{
			get
			{
				return this._usagePeriod;
			}
			set
			{
				if(this._usagePeriod != value)
				{
					this._usagePeriod = value;
					this.OnPropertyChanged("UsagePeriod");
				}
			}
		}
		
		private Shift _shift;
		public virtual Shift Shift
		{
			get
			{
				return this._shift;
			}
			set
			{
				if(this._shift != value)
				{
					this._shift = value;
					this.OnPropertyChanged("Shift");
				}
			}
		}
		
		private IList<TankSale> _tankSales = new List<TankSale>();
		public virtual IList<TankSale> TankSales
		{
			get
			{
				return this._tankSales;
			}
		}
		
		private IList<InvoiceLine> _invoiceLines = new List<InvoiceLine>();
		public virtual IList<InvoiceLine> InvoiceLines
		{
			get
			{
				return this._invoiceLines;
			}
		}
		
		private IList<Balance> _balances = new List<Balance>();
		public virtual IList<Balance> Balances
		{
			get
			{
				return this._balances;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public SalesTransaction()
		{
		}
		
		protected SalesTransaction(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.SalesTransactionId = (Guid)info.GetValue("SalesTransactionId", typeof(Guid));
			this.UsagePeriodId = (Guid)info.GetValue("UsagePeriodId", typeof(Guid));
			this.IsLocked = info.GetBoolean("IsLocked");
			this.CRC = info.GetInt64("CRC");
			this.NozzleId = (Guid)info.GetValue("NozzleId", typeof(Guid));
			this.TotalizerStart = info.GetDecimal("TotalizerStart");
			this.TotalizerEnd = info.GetDecimal("TotalizerEnd");
			this.TransactionTimeStamp = (DateTime)info.GetValue("TransactionTimeStamp", typeof(DateTime));
			this.Volume = info.GetDecimal("Volume");
			this.VolumeNormalized = info.GetDecimal("VolumeNormalized");
			this.TemperatureStart = info.GetDecimal("TemperatureStart");
			this.TemperatureEnd = info.GetDecimal("TemperatureEnd");
			this.UnitPrice = info.GetDecimal("UnitPrice");
			this.TotalPrice = info.GetDecimal("TotalPrice");
			this.ApplicationUserId = (Guid)info.GetValue("ApplicationUserId", typeof(Guid));
			this.SentDateTime = (DateTime?)info.GetValue("SentDateTime", typeof(DateTime?));
			this.ResponseCode = info.GetString("ResponseCode");
			this.ShiftId = (Guid?)info.GetValue("ShiftId", typeof(Guid?));
			this.IsErrorResolving = (bool?)info.GetValue("IsErrorResolving", typeof(bool?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("SalesTransactionId", this.SalesTransactionId, typeof(Guid));
			info.AddValue("UsagePeriodId", this.UsagePeriodId, typeof(Guid));
			info.AddValue("IsLocked", this.IsLocked, typeof(bool));
			info.AddValue("CRC", this.CRC, typeof(long));
			info.AddValue("NozzleId", this.NozzleId, typeof(Guid));
			info.AddValue("TotalizerStart", this.TotalizerStart, typeof(decimal));
			info.AddValue("TotalizerEnd", this.TotalizerEnd, typeof(decimal));
			info.AddValue("TransactionTimeStamp", this.TransactionTimeStamp, typeof(DateTime));
			info.AddValue("Volume", this.Volume, typeof(decimal));
			info.AddValue("VolumeNormalized", this.VolumeNormalized, typeof(decimal));
			info.AddValue("TemperatureStart", this.TemperatureStart, typeof(decimal));
			info.AddValue("TemperatureEnd", this.TemperatureEnd, typeof(decimal));
			info.AddValue("UnitPrice", this.UnitPrice, typeof(decimal));
			info.AddValue("TotalPrice", this.TotalPrice, typeof(decimal));
			info.AddValue("ApplicationUserId", this.ApplicationUserId, typeof(Guid));
			info.AddValue("SentDateTime", this.SentDateTime, typeof(DateTime?));
			info.AddValue("ResponseCode", this.ResponseCode, typeof(string));
			info.AddValue("ShiftId", this.ShiftId, typeof(Guid?));
			info.AddValue("IsErrorResolving", this.IsErrorResolving, typeof(bool?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class PriceListTimeSpan : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _priceListTimeSpanId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid PriceListTimeSpanId
		{
			get
			{
				return this._priceListTimeSpanId;
			}
			set
			{
				if(this._priceListTimeSpanId != value)
				{
					this._priceListTimeSpanId = value;
					this.OnPropertyChanged("PriceListTimeSpanId");
				}
			}
		}
		
		private int _fromTime;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int FromTime
		{
			get
			{
				return this._fromTime;
			}
			set
			{
				if(this._fromTime != value)
				{
					this._fromTime = value;
					this.OnPropertyChanged("FromTime");
				}
			}
		}
		
		private int _toTime;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int ToTime
		{
			get
			{
				return this._toTime;
			}
			set
			{
				if(this._toTime != value)
				{
					this._toTime = value;
					this.OnPropertyChanged("ToTime");
				}
			}
		}
		
		private Guid? _priceListId;
		public virtual Guid? PriceListId
		{
			get
			{
				return this._priceListId;
			}
			set
			{
				if(this._priceListId != value)
				{
					this._priceListId = value;
					this.OnPropertyChanged("PriceListId");
				}
			}
		}
		
		private PriceList _priceList;
		public virtual PriceList PriceList
		{
			get
			{
				return this._priceList;
			}
			set
			{
				if(this._priceList != value)
				{
					this._priceList = value;
					this.OnPropertyChanged("PriceList");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public PriceListTimeSpan()
		{
		}
		
		protected PriceListTimeSpan(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.PriceListTimeSpanId = (Guid)info.GetValue("PriceListTimeSpanId", typeof(Guid));
			this.FromTime = info.GetInt32("FromTime");
			this.ToTime = info.GetInt32("ToTime");
			this.PriceListId = (Guid?)info.GetValue("PriceListId", typeof(Guid?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("PriceListTimeSpanId", this.PriceListTimeSpanId, typeof(Guid));
			info.AddValue("FromTime", this.FromTime, typeof(int));
			info.AddValue("ToTime", this.ToTime, typeof(int));
			info.AddValue("PriceListId", this.PriceListId, typeof(Guid?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class PriceList : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _priceListId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid PriceListId
		{
			get
			{
				return this._priceListId;
			}
			set
			{
				if(this._priceListId != value)
				{
					this._priceListId = value;
					this.OnPropertyChanged("PriceListId");
				}
			}
		}
		
		private string _name;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if(this._name != value)
				{
					this._name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
		
		private DateTime _startDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.Date)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime StartDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if(this._startDate != value)
				{
					this._startDate = value;
					this.OnPropertyChanged("StartDate");
				}
			}
		}
		
		private DateTime? _endDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? EndDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if(this._endDate != value)
				{
					this._endDate = value;
					this.OnPropertyChanged("EndDate");
				}
			}
		}
		
		private bool _isTraderPriceList;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsTraderPriceList
		{
			get
			{
				return this._isTraderPriceList;
			}
			set
			{
				if(this._isTraderPriceList != value)
				{
					this._isTraderPriceList = value;
					this.OnPropertyChanged("IsTraderPriceList");
				}
			}
		}
		
		private IList<Trader> _traders = new List<Trader>();
		public virtual IList<Trader> Traders
		{
			get
			{
				return this._traders;
			}
		}
		
		private IList<PriceListTimeSpan> _priceListTimeSpans = new List<PriceListTimeSpan>();
		public virtual IList<PriceListTimeSpan> PriceListTimeSpans
		{
			get
			{
				return this._priceListTimeSpans;
			}
		}
		
		private IList<NozzlePriceList> _nozzlePriceLists = new List<NozzlePriceList>();
		public virtual IList<NozzlePriceList> NozzlePriceLists
		{
			get
			{
				return this._nozzlePriceLists;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public PriceList()
		{
		}
		
		protected PriceList(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.PriceListId = (Guid)info.GetValue("PriceListId", typeof(Guid));
			this.Name = info.GetString("Name");
			this.StartDate = (DateTime)info.GetValue("StartDate", typeof(DateTime));
			this.EndDate = (DateTime?)info.GetValue("EndDate", typeof(DateTime?));
			this.IsTraderPriceList = info.GetBoolean("IsTraderPriceList");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("PriceListId", this.PriceListId, typeof(Guid));
			info.AddValue("Name", this.Name, typeof(string));
			info.AddValue("StartDate", this.StartDate, typeof(DateTime));
			info.AddValue("EndDate", this.EndDate, typeof(DateTime?));
			info.AddValue("IsTraderPriceList", this.IsTraderPriceList, typeof(bool));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class PendingSend : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _pendingSendId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid PendingSendId
		{
			get
			{
				return this._pendingSendId;
			}
			set
			{
				if(this._pendingSendId != value)
				{
					this._pendingSendId = value;
					this.OnPropertyChanged("PendingSendId");
				}
			}
		}
		
		private string _pendingData;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string PendingData
		{
			get
			{
				return this._pendingData;
			}
			set
			{
				if(this._pendingData != value)
				{
					this._pendingData = value;
					this.OnPropertyChanged("PendingData");
				}
			}
		}
		
		private string _dataType;
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string DataType
		{
			get
			{
				return this._dataType;
			}
			set
			{
				if(this._dataType != value)
				{
					this._dataType = value;
					this.OnPropertyChanged("DataType");
				}
			}
		}
		
		private string _assemblyFile;
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public virtual string AssemblyFile
		{
			get
			{
				return this._assemblyFile;
			}
			set
			{
				if(this._assemblyFile != value)
				{
					this._assemblyFile = value;
					this.OnPropertyChanged("AssemblyFile");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public PendingSend()
		{
		}
		
		protected PendingSend(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.PendingSendId = (Guid)info.GetValue("PendingSendId", typeof(Guid));
			this.PendingData = info.GetString("PendingData");
			this.DataType = info.GetString("DataType");
			this.AssemblyFile = info.GetString("AssemblyFile");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("PendingSendId", this.PendingSendId, typeof(Guid));
			info.AddValue("PendingData", this.PendingData, typeof(string));
			info.AddValue("DataType", this.DataType, typeof(string));
			info.AddValue("AssemblyFile", this.AssemblyFile, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class Option : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _optionId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid OptionId
		{
			get
			{
				return this._optionId;
			}
			set
			{
				if(this._optionId != value)
				{
					this._optionId = value;
					this.OnPropertyChanged("OptionId");
				}
			}
		}
		
		private string _optionKey;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string OptionKey
		{
			get
			{
				return this._optionKey;
			}
			set
			{
				if(this._optionKey != value)
				{
					this._optionKey = value;
					this.OnPropertyChanged("OptionKey");
				}
			}
		}
		
		private string _optionValue;
		public virtual string OptionValue
		{
			get
			{
				return this._optionValue;
			}
			set
			{
				if(this._optionValue != value)
				{
					this._optionValue = value;
					this.OnPropertyChanged("OptionValue");
				}
			}
		}
		
		private string _description;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string Description
		{
			get
			{
				return this._description;
			}
			set
			{
				if(this._description != value)
				{
					this._description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public Option()
		{
		}
		
		protected Option(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.OptionId = (Guid)info.GetValue("OptionId", typeof(Guid));
			this.OptionKey = info.GetString("OptionKey");
			this.OptionValue = info.GetString("OptionValue");
			this.Description = info.GetString("Description");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("OptionId", this.OptionId, typeof(Guid));
			info.AddValue("OptionKey", this.OptionKey, typeof(string));
			info.AddValue("OptionValue", this.OptionValue, typeof(string));
			info.AddValue("Description", this.Description, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class NozzleUsagePeriod : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _nozzleUsagePeriodId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid NozzleUsagePeriodId
		{
			get
			{
				return this._nozzleUsagePeriodId;
			}
			set
			{
				if(this._nozzleUsagePeriodId != value)
				{
					this._nozzleUsagePeriodId = value;
					this.OnPropertyChanged("NozzleUsagePeriodId");
				}
			}
		}
		
		private Guid _nozzleId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid NozzleId
		{
			get
			{
				return this._nozzleId;
			}
			set
			{
				if(this._nozzleId != value)
				{
					this._nozzleId = value;
					this.OnPropertyChanged("NozzleId");
				}
			}
		}
		
		private Guid _usagePeriodId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid UsagePeriodId
		{
			get
			{
				return this._usagePeriodId;
			}
			set
			{
				if(this._usagePeriodId != value)
				{
					this._usagePeriodId = value;
					this.OnPropertyChanged("UsagePeriodId");
				}
			}
		}
		
		private DateTime _measurementDateTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime MeasurementDateTime
		{
			get
			{
				return this._measurementDateTime;
			}
			set
			{
				if(this._measurementDateTime != value)
				{
					this._measurementDateTime = value;
					this.OnPropertyChanged("MeasurementDateTime");
				}
			}
		}
		
		private DateTime _expirationDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime ExpirationDate
		{
			get
			{
				return this._expirationDate;
			}
			set
			{
				if(this._expirationDate != value)
				{
					this._expirationDate = value;
					this.OnPropertyChanged("ExpirationDate");
				}
			}
		}
		
		private decimal _totalVolume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalVolume
		{
			get
			{
				return this._totalVolume;
			}
			set
			{
				if(this._totalVolume != value)
				{
					this._totalVolume = value;
					this.OnPropertyChanged("TotalVolume");
				}
			}
		}
		
		private long _cRC;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual long CRC
		{
			get
			{
				return this._cRC;
			}
			set
			{
				if(this._cRC != value)
				{
					this._cRC = value;
					this.OnPropertyChanged("CRC");
				}
			}
		}
		
		private Nozzle _nozzle;
		public virtual Nozzle Nozzle
		{
			get
			{
				return this._nozzle;
			}
			set
			{
				if(this._nozzle != value)
				{
					this._nozzle = value;
					this.OnPropertyChanged("Nozzle");
				}
			}
		}
		
		private UsagePeriod _usagePeriod;
		public virtual UsagePeriod UsagePeriod
		{
			get
			{
				return this._usagePeriod;
			}
			set
			{
				if(this._usagePeriod != value)
				{
					this._usagePeriod = value;
					this.OnPropertyChanged("UsagePeriod");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public NozzleUsagePeriod()
		{
		}
		
		protected NozzleUsagePeriod(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.NozzleUsagePeriodId = (Guid)info.GetValue("NozzleUsagePeriodId", typeof(Guid));
			this.NozzleId = (Guid)info.GetValue("NozzleId", typeof(Guid));
			this.UsagePeriodId = (Guid)info.GetValue("UsagePeriodId", typeof(Guid));
			this.MeasurementDateTime = (DateTime)info.GetValue("MeasurementDateTime", typeof(DateTime));
			this.ExpirationDate = (DateTime)info.GetValue("ExpirationDate", typeof(DateTime));
			this.TotalVolume = info.GetDecimal("TotalVolume");
			this.CRC = info.GetInt64("CRC");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("NozzleUsagePeriodId", this.NozzleUsagePeriodId, typeof(Guid));
			info.AddValue("NozzleId", this.NozzleId, typeof(Guid));
			info.AddValue("UsagePeriodId", this.UsagePeriodId, typeof(Guid));
			info.AddValue("MeasurementDateTime", this.MeasurementDateTime, typeof(DateTime));
			info.AddValue("ExpirationDate", this.ExpirationDate, typeof(DateTime));
			info.AddValue("TotalVolume", this.TotalVolume, typeof(decimal));
			info.AddValue("CRC", this.CRC, typeof(long));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class NozzlePriceList : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _nozzlePriceListId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid NozzlePriceListId
		{
			get
			{
				return this._nozzlePriceListId;
			}
			set
			{
				if(this._nozzlePriceListId != value)
				{
					this._nozzlePriceListId = value;
					this.OnPropertyChanged("NozzlePriceListId");
				}
			}
		}
		
		private Guid? _priceListId;
		public virtual Guid? PriceListId
		{
			get
			{
				return this._priceListId;
			}
			set
			{
				if(this._priceListId != value)
				{
					this._priceListId = value;
					this.OnPropertyChanged("PriceListId");
				}
			}
		}
		
		private Guid? _nozzleId;
		public virtual Guid? NozzleId
		{
			get
			{
				return this._nozzleId;
			}
			set
			{
				if(this._nozzleId != value)
				{
					this._nozzleId = value;
					this.OnPropertyChanged("NozzleId");
				}
			}
		}
		
		private decimal? _discount;
		public virtual decimal? Discount
		{
			get
			{
				return this._discount;
			}
			set
			{
				if(this._discount != value)
				{
					this._discount = value;
					this.OnPropertyChanged("Discount");
				}
			}
		}
		
		private Nozzle _nozzle;
		public virtual Nozzle Nozzle
		{
			get
			{
				return this._nozzle;
			}
			set
			{
				if(this._nozzle != value)
				{
					this._nozzle = value;
					this.OnPropertyChanged("Nozzle");
				}
			}
		}
		
		private PriceList _priceList;
		public virtual PriceList PriceList
		{
			get
			{
				return this._priceList;
			}
			set
			{
				if(this._priceList != value)
				{
					this._priceList = value;
					this.OnPropertyChanged("PriceList");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public NozzlePriceList()
		{
		}
		
		protected NozzlePriceList(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.NozzlePriceListId = (Guid)info.GetValue("NozzlePriceListId", typeof(Guid));
			this.PriceListId = (Guid?)info.GetValue("PriceListId", typeof(Guid?));
			this.NozzleId = (Guid?)info.GetValue("NozzleId", typeof(Guid?));
			this.Discount = (decimal?)info.GetValue("Discount", typeof(decimal?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("NozzlePriceListId", this.NozzlePriceListId, typeof(Guid));
			info.AddValue("PriceListId", this.PriceListId, typeof(Guid?));
			info.AddValue("NozzleId", this.NozzleId, typeof(Guid?));
			info.AddValue("Discount", this.Discount, typeof(decimal?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class NozzleFlow : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _nozzleFlowId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid NozzleFlowId
		{
			get
			{
				return this._nozzleFlowId;
			}
			set
			{
				if(this._nozzleFlowId != value)
				{
					this._nozzleFlowId = value;
					this.OnPropertyChanged("NozzleFlowId");
				}
			}
		}
		
		private Guid _nozzleId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid NozzleId
		{
			get
			{
				return this._nozzleId;
			}
			set
			{
				if(this._nozzleId != value)
				{
					this._nozzleId = value;
					this.OnPropertyChanged("NozzleId");
				}
			}
		}
		
		private Guid _tankId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private short _flowState;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual short FlowState
		{
			get
			{
				return this._flowState;
			}
			set
			{
				if(this._flowState != value)
				{
					this._flowState = value;
					this.OnPropertyChanged("FlowState");
				}
			}
		}
		
		private Nozzle _nozzle;
		public virtual Nozzle Nozzle
		{
			get
			{
				return this._nozzle;
			}
			set
			{
				if(this._nozzle != value)
				{
					this._nozzle = value;
					this.OnPropertyChanged("Nozzle");
				}
			}
		}
		
		private Tank _tank;
		public virtual Tank Tank
		{
			get
			{
				return this._tank;
			}
			set
			{
				if(this._tank != value)
				{
					this._tank = value;
					this.OnPropertyChanged("Tank");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public NozzleFlow()
		{
		}
		
		protected NozzleFlow(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.NozzleFlowId = (Guid)info.GetValue("NozzleFlowId", typeof(Guid));
			this.NozzleId = (Guid)info.GetValue("NozzleId", typeof(Guid));
			this.TankId = (Guid)info.GetValue("TankId", typeof(Guid));
			this.FlowState = info.GetInt16("FlowState");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("NozzleFlowId", this.NozzleFlowId, typeof(Guid));
			info.AddValue("NozzleId", this.NozzleId, typeof(Guid));
			info.AddValue("TankId", this.TankId, typeof(Guid));
			info.AddValue("FlowState", this.FlowState, typeof(short));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class Nozzle : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _nozzleId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid NozzleId
		{
			get
			{
				return this._nozzleId;
			}
			set
			{
				if(this._nozzleId != value)
				{
					this._nozzleId = value;
					this.OnPropertyChanged("NozzleId");
				}
			}
		}
		
		private Guid _dispenserId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid DispenserId
		{
			get
			{
				return this._dispenserId;
			}
			set
			{
				if(this._dispenserId != value)
				{
					this._dispenserId = value;
					this.OnPropertyChanged("DispenserId");
				}
			}
		}
		
		private decimal _totalCounter;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalCounter
		{
			get
			{
				return this._totalCounter;
			}
			set
			{
				if(this._totalCounter != value)
				{
					this._totalCounter = value;
					this.OnPropertyChanged("TotalCounter");
				}
			}
		}
		
		private int _channel;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int Channel
		{
			get
			{
				return this._channel;
			}
			set
			{
				if(this._channel != value)
				{
					this._channel = value;
					this.OnPropertyChanged("Channel");
				}
			}
		}
		
		private int _address;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int Address
		{
			get
			{
				return this._address;
			}
			set
			{
				if(this._address != value)
				{
					this._address = value;
					this.OnPropertyChanged("Address");
				}
			}
		}
		
		private string _name;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if(this._name != value)
				{
					this._name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
		
		private Guid _fuelTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid FuelTypeId
		{
			get
			{
				return this._fuelTypeId;
			}
			set
			{
				if(this._fuelTypeId != value)
				{
					this._fuelTypeId = value;
					this.OnPropertyChanged("FuelTypeId");
				}
			}
		}
		
		private int _orderId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int OrderId
		{
			get
			{
				return this._orderId;
			}
			set
			{
				if(this._orderId != value)
				{
					this._orderId = value;
					this.OnPropertyChanged("OrderId");
				}
			}
		}
		
		private int _nozzleState;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int NozzleState
		{
			get
			{
				return this._nozzleState;
			}
			set
			{
				if(this._nozzleState != value)
				{
					this._nozzleState = value;
					this.OnPropertyChanged("NozzleState");
				}
			}
		}
		
		private string _serialNumber;
		[System.ComponentModel.DataAnnotations.StringLength(50)]
		public virtual string SerialNumber
		{
			get
			{
				return this._serialNumber;
			}
			set
			{
				if(this._serialNumber != value)
				{
					this._serialNumber = value;
					this.OnPropertyChanged("SerialNumber");
				}
			}
		}
		
		private int _officialNozzleNumber;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int OfficialNozzleNumber
		{
			get
			{
				return this._officialNozzleNumber;
			}
			set
			{
				if(this._officialNozzleNumber != value)
				{
					this._officialNozzleNumber = value;
					this.OnPropertyChanged("OfficialNozzleNumber");
				}
			}
		}
		
		private Dispenser _dispenser;
		public virtual Dispenser Dispenser
		{
			get
			{
				return this._dispenser;
			}
			set
			{
				if(this._dispenser != value)
				{
					this._dispenser = value;
					this.OnPropertyChanged("Dispenser");
				}
			}
		}
		
		private FuelType _fuelType;
		public virtual FuelType FuelType
		{
			get
			{
				return this._fuelType;
			}
			set
			{
				if(this._fuelType != value)
				{
					this._fuelType = value;
					this.OnPropertyChanged("FuelType");
				}
			}
		}
		
		private IList<SystemEvent> _systemEvents = new List<SystemEvent>();
		public virtual IList<SystemEvent> SystemEvents
		{
			get
			{
				return this._systemEvents;
			}
		}
		
		private IList<SalesTransaction> _salesTransactions = new List<SalesTransaction>();
		public virtual IList<SalesTransaction> SalesTransactions
		{
			get
			{
				return this._salesTransactions;
			}
		}
		
		private IList<NozzleUsagePeriod> _nozzleUsagePeriods = new List<NozzleUsagePeriod>();
		public virtual IList<NozzleUsagePeriod> NozzleUsagePeriods
		{
			get
			{
				return this._nozzleUsagePeriods;
			}
		}
		
		private IList<NozzlePriceList> _nozzlePriceLists = new List<NozzlePriceList>();
		public virtual IList<NozzlePriceList> NozzlePriceLists
		{
			get
			{
				return this._nozzlePriceLists;
			}
		}
		
		private IList<NozzleFlow> _nozzleFlows = new List<NozzleFlow>();
		public virtual IList<NozzleFlow> NozzleFlows
		{
			get
			{
				return this._nozzleFlows;
			}
		}
		
		private IList<DispenserSetting> _dispenserSettings = new List<DispenserSetting>();
		public virtual IList<DispenserSetting> DispenserSettings
		{
			get
			{
				return this._dispenserSettings;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public Nozzle()
		{
		}
		
		protected Nozzle(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.NozzleId = (Guid)info.GetValue("NozzleId", typeof(Guid));
			this.DispenserId = (Guid)info.GetValue("DispenserId", typeof(Guid));
			this.TotalCounter = info.GetDecimal("TotalCounter");
			this.Channel = info.GetInt32("Channel");
			this.Address = info.GetInt32("Address");
			this.Name = info.GetString("Name");
			this.FuelTypeId = (Guid)info.GetValue("FuelTypeId", typeof(Guid));
			this.OrderId = info.GetInt32("OrderId");
			this.NozzleState = info.GetInt32("NozzleState");
			this.SerialNumber = info.GetString("SerialNumber");
			this.OfficialNozzleNumber = info.GetInt32("OfficialNozzleNumber");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("NozzleId", this.NozzleId, typeof(Guid));
			info.AddValue("DispenserId", this.DispenserId, typeof(Guid));
			info.AddValue("TotalCounter", this.TotalCounter, typeof(decimal));
			info.AddValue("Channel", this.Channel, typeof(int));
			info.AddValue("Address", this.Address, typeof(int));
			info.AddValue("Name", this.Name, typeof(string));
			info.AddValue("FuelTypeId", this.FuelTypeId, typeof(Guid));
			info.AddValue("OrderId", this.OrderId, typeof(int));
			info.AddValue("NozzleState", this.NozzleState, typeof(int));
			info.AddValue("SerialNumber", this.SerialNumber, typeof(string));
			info.AddValue("OfficialNozzleNumber", this.OfficialNozzleNumber, typeof(int));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class Normalization : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _normalizationId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid NormalizationId
		{
			get
			{
				return this._normalizationId;
			}
			set
			{
				if(this._normalizationId != value)
				{
					this._normalizationId = value;
					this.OnPropertyChanged("NormalizationId");
				}
			}
		}
		
		private Guid _fuelTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid FuelTypeId
		{
			get
			{
				return this._fuelTypeId;
			}
			set
			{
				if(this._fuelTypeId != value)
				{
					this._fuelTypeId = value;
					this.OnPropertyChanged("FuelTypeId");
				}
			}
		}
		
		private long _density;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual long Density
		{
			get
			{
				return this._density;
			}
			set
			{
				if(this._density != value)
				{
					this._density = value;
					this.OnPropertyChanged("Density");
				}
			}
		}
		
		private long _temperature;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual long Temperature
		{
			get
			{
				return this._temperature;
			}
			set
			{
				if(this._temperature != value)
				{
					this._temperature = value;
					this.OnPropertyChanged("Temperature");
				}
			}
		}
		
		private long _thermalCoefficient;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual long ThermalCoefficient
		{
			get
			{
				return this._thermalCoefficient;
			}
			set
			{
				if(this._thermalCoefficient != value)
				{
					this._thermalCoefficient = value;
					this.OnPropertyChanged("ThermalCoefficient");
				}
			}
		}
		
		private FuelType _fuelType;
		public virtual FuelType FuelType
		{
			get
			{
				return this._fuelType;
			}
			set
			{
				if(this._fuelType != value)
				{
					this._fuelType = value;
					this.OnPropertyChanged("FuelType");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public Normalization()
		{
		}
		
		protected Normalization(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.NormalizationId = (Guid)info.GetValue("NormalizationId", typeof(Guid));
			this.FuelTypeId = (Guid)info.GetValue("FuelTypeId", typeof(Guid));
			this.Density = info.GetInt64("Density");
			this.Temperature = info.GetInt64("Temperature");
			this.ThermalCoefficient = info.GetInt64("ThermalCoefficient");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("NormalizationId", this.NormalizationId, typeof(Guid));
			info.AddValue("FuelTypeId", this.FuelTypeId, typeof(Guid));
			info.AddValue("Density", this.Density, typeof(long));
			info.AddValue("Temperature", this.Temperature, typeof(long));
			info.AddValue("ThermalCoefficient", this.ThermalCoefficient, typeof(long));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class InvoiceType : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _invoiceTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid InvoiceTypeId
		{
			get
			{
				return this._invoiceTypeId;
			}
			set
			{
				if(this._invoiceTypeId != value)
				{
					this._invoiceTypeId = value;
					this.OnPropertyChanged("InvoiceTypeId");
				}
			}
		}
		
		private string _description;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Description
		{
			get
			{
				return this._description;
			}
			set
			{
				if(this._description != value)
				{
					this._description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
		
		private string _abbreviation;
		[System.ComponentModel.DataAnnotations.StringLength(10)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Abbreviation
		{
			get
			{
				return this._abbreviation;
			}
			set
			{
				if(this._abbreviation != value)
				{
					this._abbreviation = value;
					this.OnPropertyChanged("Abbreviation");
				}
			}
		}
		
		private int _lastNumber;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int LastNumber
		{
			get
			{
				return this._lastNumber;
			}
			set
			{
				if(this._lastNumber != value)
				{
					this._lastNumber = value;
					this.OnPropertyChanged("LastNumber");
				}
			}
		}
		
		private int _transactionType;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int TransactionType
		{
			get
			{
				return this._transactionType;
			}
			set
			{
				if(this._transactionType != value)
				{
					this._transactionType = value;
					this.OnPropertyChanged("TransactionType");
				}
			}
		}
		
		private bool _printable;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool Printable
		{
			get
			{
				return this._printable;
			}
			set
			{
				if(this._printable != value)
				{
					this._printable = value;
					this.OnPropertyChanged("Printable");
				}
			}
		}
		
		private int _officialEnumerator;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int OfficialEnumerator
		{
			get
			{
				return this._officialEnumerator;
			}
			set
			{
				if(this._officialEnumerator != value)
				{
					this._officialEnumerator = value;
					this.OnPropertyChanged("OfficialEnumerator");
				}
			}
		}
		
		private string _printer;
		[System.ComponentModel.DataAnnotations.StringLength(150)]
		public virtual string Printer
		{
			get
			{
				return this._printer;
			}
			set
			{
				if(this._printer != value)
				{
					this._printer = value;
					this.OnPropertyChanged("Printer");
				}
			}
		}
		
		private Guid? _invoiceFormId;
		public virtual Guid? InvoiceFormId
		{
			get
			{
				return this._invoiceFormId;
			}
			set
			{
				if(this._invoiceFormId != value)
				{
					this._invoiceFormId = value;
					this.OnPropertyChanged("InvoiceFormId");
				}
			}
		}
		
		private bool? _isInternal;
		public virtual bool? IsInternal
		{
			get
			{
				return this._isInternal;
			}
			set
			{
				if(this._isInternal != value)
				{
					this._isInternal = value;
					this.OnPropertyChanged("IsInternal");
				}
			}
		}
		
		private string _internalDeliveryDescription;
		[System.ComponentModel.DataAnnotations.StringLength(200)]
		public virtual string InternalDeliveryDescription
		{
			get
			{
				return this._internalDeliveryDescription;
			}
			set
			{
				if(this._internalDeliveryDescription != value)
				{
					this._internalDeliveryDescription = value;
					this.OnPropertyChanged("InternalDeliveryDescription");
				}
			}
		}
		
		private InvoiceForm _invoiceForm;
		public virtual InvoiceForm InvoiceForm
		{
			get
			{
				return this._invoiceForm;
			}
			set
			{
				if(this._invoiceForm != value)
				{
					this._invoiceForm = value;
					this.OnPropertyChanged("InvoiceForm");
				}
			}
		}
		
		private IList<Trader> _traders = new List<Trader>();
		public virtual IList<Trader> Traders
		{
			get
			{
				return this._traders;
			}
		}
		
		private IList<InvoicePrint> _invoicePrints = new List<InvoicePrint>();
		public virtual IList<InvoicePrint> InvoicePrints
		{
			get
			{
				return this._invoicePrints;
			}
		}
		
		private IList<Invoice> _invoices = new List<Invoice>();
		public virtual IList<Invoice> Invoices
		{
			get
			{
				return this._invoices;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public InvoiceType()
		{
		}
		
		protected InvoiceType(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.InvoiceTypeId = (Guid)info.GetValue("InvoiceTypeId", typeof(Guid));
			this.Description = info.GetString("Description");
			this.Abbreviation = info.GetString("Abbreviation");
			this.LastNumber = info.GetInt32("LastNumber");
			this.TransactionType = info.GetInt32("TransactionType");
			this.Printable = info.GetBoolean("Printable");
			this.OfficialEnumerator = info.GetInt32("OfficialEnumerator");
			this.Printer = info.GetString("Printer");
			this.InvoiceFormId = (Guid?)info.GetValue("InvoiceFormId", typeof(Guid?));
			this.IsInternal = (bool?)info.GetValue("IsInternal", typeof(bool?));
			this.InternalDeliveryDescription = info.GetString("InternalDeliveryDescription");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("InvoiceTypeId", this.InvoiceTypeId, typeof(Guid));
			info.AddValue("Description", this.Description, typeof(string));
			info.AddValue("Abbreviation", this.Abbreviation, typeof(string));
			info.AddValue("LastNumber", this.LastNumber, typeof(int));
			info.AddValue("TransactionType", this.TransactionType, typeof(int));
			info.AddValue("Printable", this.Printable, typeof(bool));
			info.AddValue("OfficialEnumerator", this.OfficialEnumerator, typeof(int));
			info.AddValue("Printer", this.Printer, typeof(string));
			info.AddValue("InvoiceFormId", this.InvoiceFormId, typeof(Guid?));
			info.AddValue("IsInternal", this.IsInternal, typeof(bool?));
			info.AddValue("InternalDeliveryDescription", this.InternalDeliveryDescription, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class InvoiceRelation : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _invoiceRelationId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid InvoiceRelationId
		{
			get
			{
				return this._invoiceRelationId;
			}
			set
			{
				if(this._invoiceRelationId != value)
				{
					this._invoiceRelationId = value;
					this.OnPropertyChanged("InvoiceRelationId");
				}
			}
		}
		
		private Guid _parentInvoiceId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid ParentInvoiceId
		{
			get
			{
				return this._parentInvoiceId;
			}
			set
			{
				if(this._parentInvoiceId != value)
				{
					this._parentInvoiceId = value;
					this.OnPropertyChanged("ParentInvoiceId");
				}
			}
		}
		
		private Guid _childInvoiceId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid ChildInvoiceId
		{
			get
			{
				return this._childInvoiceId;
			}
			set
			{
				if(this._childInvoiceId != value)
				{
					this._childInvoiceId = value;
					this.OnPropertyChanged("ChildInvoiceId");
				}
			}
		}
		
		private int _relationType;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int RelationType
		{
			get
			{
				return this._relationType;
			}
			set
			{
				if(this._relationType != value)
				{
					this._relationType = value;
					this.OnPropertyChanged("RelationType");
				}
			}
		}
		
		private Invoice _invoice;
		public virtual Invoice Invoice
		{
			get
			{
				return this._invoice;
			}
			set
			{
				if(this._invoice != value)
				{
					this._invoice = value;
					this.OnPropertyChanged("Invoice");
				}
			}
		}
		
		private Invoice _invoice1;
		public virtual Invoice Invoice1
		{
			get
			{
				return this._invoice1;
			}
			set
			{
				if(this._invoice1 != value)
				{
					this._invoice1 = value;
					this.OnPropertyChanged("Invoice1");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public InvoiceRelation()
		{
		}
		
		protected InvoiceRelation(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.InvoiceRelationId = (Guid)info.GetValue("InvoiceRelationId", typeof(Guid));
			this.ParentInvoiceId = (Guid)info.GetValue("ParentInvoiceId", typeof(Guid));
			this.ChildInvoiceId = (Guid)info.GetValue("ChildInvoiceId", typeof(Guid));
			this.RelationType = info.GetInt32("RelationType");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("InvoiceRelationId", this.InvoiceRelationId, typeof(Guid));
			info.AddValue("ParentInvoiceId", this.ParentInvoiceId, typeof(Guid));
			info.AddValue("ChildInvoiceId", this.ChildInvoiceId, typeof(Guid));
			info.AddValue("RelationType", this.RelationType, typeof(int));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class InvoicePrint : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _invoicePrintId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid InvoicePrintId
		{
			get
			{
				return this._invoicePrintId;
			}
			set
			{
				if(this._invoicePrintId != value)
				{
					this._invoicePrintId = value;
					this.OnPropertyChanged("InvoicePrintId");
				}
			}
		}
		
		private Guid _dispenserId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid DispenserId
		{
			get
			{
				return this._dispenserId;
			}
			set
			{
				if(this._dispenserId != value)
				{
					this._dispenserId = value;
					this.OnPropertyChanged("DispenserId");
				}
			}
		}
		
		private string _printer;
		[System.ComponentModel.DataAnnotations.StringLength(150)]
		public virtual string Printer
		{
			get
			{
				return this._printer;
			}
			set
			{
				if(this._printer != value)
				{
					this._printer = value;
					this.OnPropertyChanged("Printer");
				}
			}
		}
		
		private Guid _defaultInvoiceType;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid DefaultInvoiceType
		{
			get
			{
				return this._defaultInvoiceType;
			}
			set
			{
				if(this._defaultInvoiceType != value)
				{
					this._defaultInvoiceType = value;
					this.OnPropertyChanged("DefaultInvoiceType");
				}
			}
		}
		
		private Dispenser _dispenser;
		public virtual Dispenser Dispenser
		{
			get
			{
				return this._dispenser;
			}
			set
			{
				if(this._dispenser != value)
				{
					this._dispenser = value;
					this.OnPropertyChanged("Dispenser");
				}
			}
		}
		
		private InvoiceType _invoiceType;
		public virtual InvoiceType InvoiceType
		{
			get
			{
				return this._invoiceType;
			}
			set
			{
				if(this._invoiceType != value)
				{
					this._invoiceType = value;
					this.OnPropertyChanged("InvoiceType");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public InvoicePrint()
		{
		}
		
		protected InvoicePrint(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.InvoicePrintId = (Guid)info.GetValue("InvoicePrintId", typeof(Guid));
			this.DispenserId = (Guid)info.GetValue("DispenserId", typeof(Guid));
			this.Printer = info.GetString("Printer");
			this.DefaultInvoiceType = (Guid)info.GetValue("DefaultInvoiceType", typeof(Guid));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("InvoicePrintId", this.InvoicePrintId, typeof(Guid));
			info.AddValue("DispenserId", this.DispenserId, typeof(Guid));
			info.AddValue("Printer", this.Printer, typeof(string));
			info.AddValue("DefaultInvoiceType", this.DefaultInvoiceType, typeof(Guid));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class InvoiceLine : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _invoiceLineId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid InvoiceLineId
		{
			get
			{
				return this._invoiceLineId;
			}
			set
			{
				if(this._invoiceLineId != value)
				{
					this._invoiceLineId = value;
					this.OnPropertyChanged("InvoiceLineId");
				}
			}
		}
		
		private Guid _invoiceId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid InvoiceId
		{
			get
			{
				return this._invoiceId;
			}
			set
			{
				if(this._invoiceId != value)
				{
					this._invoiceId = value;
					this.OnPropertyChanged("InvoiceId");
				}
			}
		}
		
		private decimal _volume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if(this._volume != value)
				{
					this._volume = value;
					this.OnPropertyChanged("Volume");
				}
			}
		}
		
		private decimal _volumeNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VolumeNormalized
		{
			get
			{
				return this._volumeNormalized;
			}
			set
			{
				if(this._volumeNormalized != value)
				{
					this._volumeNormalized = value;
					this.OnPropertyChanged("VolumeNormalized");
				}
			}
		}
		
		private decimal _temperature;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Temperature
		{
			get
			{
				return this._temperature;
			}
			set
			{
				if(this._temperature != value)
				{
					this._temperature = value;
					this.OnPropertyChanged("Temperature");
				}
			}
		}
		
		private decimal _fuelDensity;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal FuelDensity
		{
			get
			{
				return this._fuelDensity;
			}
			set
			{
				if(this._fuelDensity != value)
				{
					this._fuelDensity = value;
					this.OnPropertyChanged("FuelDensity");
				}
			}
		}
		
		private decimal _unitPrice;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal UnitPrice
		{
			get
			{
				return this._unitPrice;
			}
			set
			{
				if(this._unitPrice != value)
				{
					this._unitPrice = value;
					this.OnPropertyChanged("UnitPrice");
				}
			}
		}
		
		private decimal _totalPrice;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if(this._totalPrice != value)
				{
					this._totalPrice = value;
					this.OnPropertyChanged("TotalPrice");
				}
			}
		}
		
		private decimal _vatAmount;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VatAmount
		{
			get
			{
				return this._vatAmount;
			}
			set
			{
				if(this._vatAmount != value)
				{
					this._vatAmount = value;
					this.OnPropertyChanged("VatAmount");
				}
			}
		}
		
		private decimal _vatPercentage;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VatPercentage
		{
			get
			{
				return this._vatPercentage;
			}
			set
			{
				if(this._vatPercentage != value)
				{
					this._vatPercentage = value;
					this.OnPropertyChanged("VatPercentage");
				}
			}
		}
		
		private Guid? _saleTransactionId;
		public virtual Guid? SaleTransactionId
		{
			get
			{
				return this._saleTransactionId;
			}
			set
			{
				if(this._saleTransactionId != value)
				{
					this._saleTransactionId = value;
					this.OnPropertyChanged("SaleTransactionId");
				}
			}
		}
		
		private Guid? _tankFillingId;
		public virtual Guid? TankFillingId
		{
			get
			{
				return this._tankFillingId;
			}
			set
			{
				if(this._tankFillingId != value)
				{
					this._tankFillingId = value;
					this.OnPropertyChanged("TankFillingId");
				}
			}
		}
		
		private Guid _fuelTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid FuelTypeId
		{
			get
			{
				return this._fuelTypeId;
			}
			set
			{
				if(this._fuelTypeId != value)
				{
					this._fuelTypeId = value;
					this.OnPropertyChanged("FuelTypeId");
				}
			}
		}
		
		private decimal _discountAmount;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal DiscountAmount
		{
			get
			{
				return this._discountAmount;
			}
			set
			{
				if(this._discountAmount != value)
				{
					this._discountAmount = value;
					this.OnPropertyChanged("DiscountAmount");
				}
			}
		}
		
		private Guid? _tankId;
		public virtual Guid? TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private FuelType _fuelType;
		public virtual FuelType FuelType
		{
			get
			{
				return this._fuelType;
			}
			set
			{
				if(this._fuelType != value)
				{
					this._fuelType = value;
					this.OnPropertyChanged("FuelType");
				}
			}
		}
		
		private Invoice _invoice;
		public virtual Invoice Invoice
		{
			get
			{
				return this._invoice;
			}
			set
			{
				if(this._invoice != value)
				{
					this._invoice = value;
					this.OnPropertyChanged("Invoice");
				}
			}
		}
		
		private SalesTransaction _salesTransaction;
		public virtual SalesTransaction SalesTransaction
		{
			get
			{
				return this._salesTransaction;
			}
			set
			{
				if(this._salesTransaction != value)
				{
					this._salesTransaction = value;
					this.OnPropertyChanged("SalesTransaction");
				}
			}
		}
		
		private Tank _tank;
		public virtual Tank Tank
		{
			get
			{
				return this._tank;
			}
			set
			{
				if(this._tank != value)
				{
					this._tank = value;
					this.OnPropertyChanged("Tank");
				}
			}
		}
		
		private TankFilling _tankFilling;
		public virtual TankFilling TankFilling
		{
			get
			{
				return this._tankFilling;
			}
			set
			{
				if(this._tankFilling != value)
				{
					this._tankFilling = value;
					this.OnPropertyChanged("TankFilling");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public InvoiceLine()
		{
		}
		
		protected InvoiceLine(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.InvoiceLineId = (Guid)info.GetValue("InvoiceLineId", typeof(Guid));
			this.InvoiceId = (Guid)info.GetValue("InvoiceId", typeof(Guid));
			this.Volume = info.GetDecimal("Volume");
			this.VolumeNormalized = info.GetDecimal("VolumeNormalized");
			this.Temperature = info.GetDecimal("Temperature");
			this.FuelDensity = info.GetDecimal("FuelDensity");
			this.UnitPrice = info.GetDecimal("UnitPrice");
			this.TotalPrice = info.GetDecimal("TotalPrice");
			this.VatAmount = info.GetDecimal("VatAmount");
			this.VatPercentage = info.GetDecimal("VatPercentage");
			this.SaleTransactionId = (Guid?)info.GetValue("SaleTransactionId", typeof(Guid?));
			this.TankFillingId = (Guid?)info.GetValue("TankFillingId", typeof(Guid?));
			this.FuelTypeId = (Guid)info.GetValue("FuelTypeId", typeof(Guid));
			this.DiscountAmount = info.GetDecimal("DiscountAmount");
			this.TankId = (Guid?)info.GetValue("TankId", typeof(Guid?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("InvoiceLineId", this.InvoiceLineId, typeof(Guid));
			info.AddValue("InvoiceId", this.InvoiceId, typeof(Guid));
			info.AddValue("Volume", this.Volume, typeof(decimal));
			info.AddValue("VolumeNormalized", this.VolumeNormalized, typeof(decimal));
			info.AddValue("Temperature", this.Temperature, typeof(decimal));
			info.AddValue("FuelDensity", this.FuelDensity, typeof(decimal));
			info.AddValue("UnitPrice", this.UnitPrice, typeof(decimal));
			info.AddValue("TotalPrice", this.TotalPrice, typeof(decimal));
			info.AddValue("VatAmount", this.VatAmount, typeof(decimal));
			info.AddValue("VatPercentage", this.VatPercentage, typeof(decimal));
			info.AddValue("SaleTransactionId", this.SaleTransactionId, typeof(Guid?));
			info.AddValue("TankFillingId", this.TankFillingId, typeof(Guid?));
			info.AddValue("FuelTypeId", this.FuelTypeId, typeof(Guid));
			info.AddValue("DiscountAmount", this.DiscountAmount, typeof(decimal));
			info.AddValue("TankId", this.TankId, typeof(Guid?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class InvoiceForm : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _invoiceFormId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid InvoiceFormId
		{
			get
			{
				return this._invoiceFormId;
			}
			set
			{
				if(this._invoiceFormId != value)
				{
					this._invoiceFormId = value;
					this.OnPropertyChanged("InvoiceFormId");
				}
			}
		}
		
		private bool _isTextForm;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsTextForm
		{
			get
			{
				return this._isTextForm;
			}
			set
			{
				if(this._isTextForm != value)
				{
					this._isTextForm = value;
					this.OnPropertyChanged("IsTextForm");
				}
			}
		}
		
		private string _data;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Data
		{
			get
			{
				return this._data;
			}
			set
			{
				if(this._data != value)
				{
					this._data = value;
					this.OnPropertyChanged("Data");
				}
			}
		}
		
		private IList<InvoiceType> _invoiceTypes = new List<InvoiceType>();
		public virtual IList<InvoiceType> InvoiceTypes
		{
			get
			{
				return this._invoiceTypes;
			}
		}
		
		private IList<Invoice> _invoices = new List<Invoice>();
		public virtual IList<Invoice> Invoices
		{
			get
			{
				return this._invoices;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public InvoiceForm()
		{
		}
		
		protected InvoiceForm(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.InvoiceFormId = (Guid)info.GetValue("InvoiceFormId", typeof(Guid));
			this.IsTextForm = info.GetBoolean("IsTextForm");
			this.Data = info.GetString("Data");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("InvoiceFormId", this.InvoiceFormId, typeof(Guid));
			info.AddValue("IsTextForm", this.IsTextForm, typeof(bool));
			info.AddValue("Data", this.Data, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class Invoice : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _invoiceId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid InvoiceId
		{
			get
			{
				return this._invoiceId;
			}
			set
			{
				if(this._invoiceId != value)
				{
					this._invoiceId = value;
					this.OnPropertyChanged("InvoiceId");
				}
			}
		}
		
		private Guid? _traderId;
		public virtual Guid? TraderId
		{
			get
			{
				return this._traderId;
			}
			set
			{
				if(this._traderId != value)
				{
					this._traderId = value;
					this.OnPropertyChanged("TraderId");
				}
			}
		}
		
		private int _number;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int Number
		{
			get
			{
				return this._number;
			}
			set
			{
				if(this._number != value)
				{
					this._number = value;
					this.OnPropertyChanged("Number");
				}
			}
		}
		
		private string _vehiclePlateNumber;
		[System.ComponentModel.DataAnnotations.StringLength(50)]
		public virtual string VehiclePlateNumber
		{
			get
			{
				return this._vehiclePlateNumber;
			}
			set
			{
				if(this._vehiclePlateNumber != value)
				{
					this._vehiclePlateNumber = value;
					this.OnPropertyChanged("VehiclePlateNumber");
				}
			}
		}
		
		private string _invoiceSignature;
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public virtual string InvoiceSignature
		{
			get
			{
				return this._invoiceSignature;
			}
			set
			{
				if(this._invoiceSignature != value)
				{
					this._invoiceSignature = value;
					this.OnPropertyChanged("InvoiceSignature");
				}
			}
		}
		
		private Guid _invoiceTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid InvoiceTypeId
		{
			get
			{
				return this._invoiceTypeId;
			}
			set
			{
				if(this._invoiceTypeId != value)
				{
					this._invoiceTypeId = value;
					this.OnPropertyChanged("InvoiceTypeId");
				}
			}
		}
		
		private Guid? _vehicleId;
		public virtual Guid? VehicleId
		{
			get
			{
				return this._vehicleId;
			}
			set
			{
				if(this._vehicleId != value)
				{
					this._vehicleId = value;
					this.OnPropertyChanged("VehicleId");
				}
			}
		}
		
		private DateTime _transactionDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime TransactionDate
		{
			get
			{
				return this._transactionDate;
			}
			set
			{
				if(this._transactionDate != value)
				{
					this._transactionDate = value;
					this.OnPropertyChanged("TransactionDate");
				}
			}
		}
		
		private decimal? _nettoAmount;
		public virtual decimal? NettoAmount
		{
			get
			{
				return this._nettoAmount;
			}
			set
			{
				if(this._nettoAmount != value)
				{
					this._nettoAmount = value;
					this.OnPropertyChanged("NettoAmount");
				}
			}
		}
		
		private decimal? _vatAmount;
		public virtual decimal? VatAmount
		{
			get
			{
				return this._vatAmount;
			}
			set
			{
				if(this._vatAmount != value)
				{
					this._vatAmount = value;
					this.OnPropertyChanged("VatAmount");
				}
			}
		}
		
		private decimal? _totalAmount;
		public virtual decimal? TotalAmount
		{
			get
			{
				return this._totalAmount;
			}
			set
			{
				if(this._totalAmount != value)
				{
					this._totalAmount = value;
					this.OnPropertyChanged("TotalAmount");
				}
			}
		}
		
		private string _printer;
		[System.ComponentModel.DataAnnotations.StringLength(150)]
		public virtual string Printer
		{
			get
			{
				return this._printer;
			}
			set
			{
				if(this._printer != value)
				{
					this._printer = value;
					this.OnPropertyChanged("Printer");
				}
			}
		}
		
		private Guid? _invoiceFormId;
		public virtual Guid? InvoiceFormId
		{
			get
			{
				return this._invoiceFormId;
			}
			set
			{
				if(this._invoiceFormId != value)
				{
					this._invoiceFormId = value;
					this.OnPropertyChanged("InvoiceFormId");
				}
			}
		}
		
		private Guid _applicationUserId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid ApplicationUserId
		{
			get
			{
				return this._applicationUserId;
			}
			set
			{
				if(this._applicationUserId != value)
				{
					this._applicationUserId = value;
					this.OnPropertyChanged("ApplicationUserId");
				}
			}
		}
		
		private string _series;
		[System.ComponentModel.DataAnnotations.StringLength(10)]
		public virtual string Series
		{
			get
			{
				return this._series;
			}
			set
			{
				if(this._series != value)
				{
					this._series = value;
					this.OnPropertyChanged("Series");
				}
			}
		}
		
		private bool? _isPrinted;
		public virtual bool? IsPrinted
		{
			get
			{
				return this._isPrinted;
			}
			set
			{
				if(this._isPrinted != value)
				{
					this._isPrinted = value;
					this.OnPropertyChanged("IsPrinted");
				}
			}
		}
		
		private ApplicationUser _applicationUser;
		public virtual ApplicationUser ApplicationUser
		{
			get
			{
				return this._applicationUser;
			}
			set
			{
				if(this._applicationUser != value)
				{
					this._applicationUser = value;
					this.OnPropertyChanged("ApplicationUser");
				}
			}
		}
		
		private InvoiceForm _invoiceForm;
		public virtual InvoiceForm InvoiceForm
		{
			get
			{
				return this._invoiceForm;
			}
			set
			{
				if(this._invoiceForm != value)
				{
					this._invoiceForm = value;
					this.OnPropertyChanged("InvoiceForm");
				}
			}
		}
		
		private InvoiceType _invoiceType;
		public virtual InvoiceType InvoiceType
		{
			get
			{
				return this._invoiceType;
			}
			set
			{
				if(this._invoiceType != value)
				{
					this._invoiceType = value;
					this.OnPropertyChanged("InvoiceType");
				}
			}
		}
		
		private Vehicle _vehicle;
		public virtual Vehicle Vehicle
		{
			get
			{
				return this._vehicle;
			}
			set
			{
				if(this._vehicle != value)
				{
					this._vehicle = value;
					this.OnPropertyChanged("Vehicle");
				}
			}
		}
		
		private Trader _trader;
		public virtual Trader Trader
		{
			get
			{
				return this._trader;
			}
			set
			{
				if(this._trader != value)
				{
					this._trader = value;
					this.OnPropertyChanged("Trader");
				}
			}
		}
		
		private IList<InvoiceRelation> _invoiceRelations = new List<InvoiceRelation>();
		public virtual IList<InvoiceRelation> InvoiceRelations
		{
			get
			{
				return this._invoiceRelations;
			}
		}
		
		private IList<InvoiceRelation> _invoiceRelations1 = new List<InvoiceRelation>();
		public virtual IList<InvoiceRelation> InvoiceRelations1
		{
			get
			{
				return this._invoiceRelations1;
			}
		}
		
		private IList<InvoiceLine> _invoiceLines = new List<InvoiceLine>();
		public virtual IList<InvoiceLine> InvoiceLines
		{
			get
			{
				return this._invoiceLines;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public Invoice()
		{
		}
		
		protected Invoice(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.InvoiceId = (Guid)info.GetValue("InvoiceId", typeof(Guid));
			this.TraderId = (Guid?)info.GetValue("TraderId", typeof(Guid?));
			this.Number = info.GetInt32("Number");
			this.VehiclePlateNumber = info.GetString("VehiclePlateNumber");
			this.InvoiceSignature = info.GetString("InvoiceSignature");
			this.InvoiceTypeId = (Guid)info.GetValue("InvoiceTypeId", typeof(Guid));
			this.VehicleId = (Guid?)info.GetValue("VehicleId", typeof(Guid?));
			this.TransactionDate = (DateTime)info.GetValue("TransactionDate", typeof(DateTime));
			this.NettoAmount = (decimal?)info.GetValue("NettoAmount", typeof(decimal?));
			this.VatAmount = (decimal?)info.GetValue("VatAmount", typeof(decimal?));
			this.TotalAmount = (decimal?)info.GetValue("TotalAmount", typeof(decimal?));
			this.Printer = info.GetString("Printer");
			this.InvoiceFormId = (Guid?)info.GetValue("InvoiceFormId", typeof(Guid?));
			this.ApplicationUserId = (Guid)info.GetValue("ApplicationUserId", typeof(Guid));
			this.Series = info.GetString("Series");
			this.IsPrinted = (bool?)info.GetValue("IsPrinted", typeof(bool?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("InvoiceId", this.InvoiceId, typeof(Guid));
			info.AddValue("TraderId", this.TraderId, typeof(Guid?));
			info.AddValue("Number", this.Number, typeof(int));
			info.AddValue("VehiclePlateNumber", this.VehiclePlateNumber, typeof(string));
			info.AddValue("InvoiceSignature", this.InvoiceSignature, typeof(string));
			info.AddValue("InvoiceTypeId", this.InvoiceTypeId, typeof(Guid));
			info.AddValue("VehicleId", this.VehicleId, typeof(Guid?));
			info.AddValue("TransactionDate", this.TransactionDate, typeof(DateTime));
			info.AddValue("NettoAmount", this.NettoAmount, typeof(decimal?));
			info.AddValue("VatAmount", this.VatAmount, typeof(decimal?));
			info.AddValue("TotalAmount", this.TotalAmount, typeof(decimal?));
			info.AddValue("Printer", this.Printer, typeof(string));
			info.AddValue("InvoiceFormId", this.InvoiceFormId, typeof(Guid?));
			info.AddValue("ApplicationUserId", this.ApplicationUserId, typeof(Guid));
			info.AddValue("Series", this.Series, typeof(string));
			info.AddValue("IsPrinted", this.IsPrinted, typeof(bool?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class FuelTypePrice : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _fuelTypePriceId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid FuelTypePriceId
		{
			get
			{
				return this._fuelTypePriceId;
			}
			set
			{
				if(this._fuelTypePriceId != value)
				{
					this._fuelTypePriceId = value;
					this.OnPropertyChanged("FuelTypePriceId");
				}
			}
		}
		
		private Guid _fuelTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid FuelTypeId
		{
			get
			{
				return this._fuelTypeId;
			}
			set
			{
				if(this._fuelTypeId != value)
				{
					this._fuelTypeId = value;
					this.OnPropertyChanged("FuelTypeId");
				}
			}
		}
		
		private decimal _price;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Price
		{
			get
			{
				return this._price;
			}
			set
			{
				if(this._price != value)
				{
					this._price = value;
					this.OnPropertyChanged("Price");
				}
			}
		}
		
		private DateTime _changeDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime ChangeDate
		{
			get
			{
				return this._changeDate;
			}
			set
			{
				if(this._changeDate != value)
				{
					this._changeDate = value;
					this.OnPropertyChanged("ChangeDate");
				}
			}
		}
		
		private DateTime? _sentDateTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? SentDateTime
		{
			get
			{
				return this._sentDateTime;
			}
			set
			{
				if(this._sentDateTime != value)
				{
					this._sentDateTime = value;
					this.OnPropertyChanged("SentDateTime");
				}
			}
		}
		
		private string _responseCode;
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public virtual string ResponseCode
		{
			get
			{
				return this._responseCode;
			}
			set
			{
				if(this._responseCode != value)
				{
					this._responseCode = value;
					this.OnPropertyChanged("ResponseCode");
				}
			}
		}
		
		private FuelType _fuelType;
		public virtual FuelType FuelType
		{
			get
			{
				return this._fuelType;
			}
			set
			{
				if(this._fuelType != value)
				{
					this._fuelType = value;
					this.OnPropertyChanged("FuelType");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public FuelTypePrice()
		{
		}
		
		protected FuelTypePrice(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.FuelTypePriceId = (Guid)info.GetValue("FuelTypePriceId", typeof(Guid));
			this.FuelTypeId = (Guid)info.GetValue("FuelTypeId", typeof(Guid));
			this.Price = info.GetDecimal("Price");
			this.ChangeDate = (DateTime)info.GetValue("ChangeDate", typeof(DateTime));
			this.SentDateTime = (DateTime?)info.GetValue("SentDateTime", typeof(DateTime?));
			this.ResponseCode = info.GetString("ResponseCode");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("FuelTypePriceId", this.FuelTypePriceId, typeof(Guid));
			info.AddValue("FuelTypeId", this.FuelTypeId, typeof(Guid));
			info.AddValue("Price", this.Price, typeof(decimal));
			info.AddValue("ChangeDate", this.ChangeDate, typeof(DateTime));
			info.AddValue("SentDateTime", this.SentDateTime, typeof(DateTime?));
			info.AddValue("ResponseCode", this.ResponseCode, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class FuelType : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _fuelTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid FuelTypeId
		{
			get
			{
				return this._fuelTypeId;
			}
			set
			{
				if(this._fuelTypeId != value)
				{
					this._fuelTypeId = value;
					this.OnPropertyChanged("FuelTypeId");
				}
			}
		}
		
		private string _name;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if(this._name != value)
				{
					this._name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
		
		private string _code;
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Code
		{
			get
			{
				return this._code;
			}
			set
			{
				if(this._code != value)
				{
					this._code = value;
					this.OnPropertyChanged("Code");
				}
			}
		}
		
		private int? _color;
		public virtual int? Color
		{
			get
			{
				return this._color;
			}
			set
			{
				if(this._color != value)
				{
					this._color = value;
					this.OnPropertyChanged("Color");
				}
			}
		}
		
		private decimal _thermalCoeficient;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal ThermalCoeficient
		{
			get
			{
				return this._thermalCoeficient;
			}
			set
			{
				if(this._thermalCoeficient != value)
				{
					this._thermalCoeficient = value;
					this.OnPropertyChanged("ThermalCoeficient");
				}
			}
		}
		
		private int _enumeratorValue;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int EnumeratorValue
		{
			get
			{
				return this._enumeratorValue;
			}
			set
			{
				if(this._enumeratorValue != value)
				{
					this._enumeratorValue = value;
					this.OnPropertyChanged("EnumeratorValue");
				}
			}
		}
		
		private decimal _baseDensity;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal BaseDensity
		{
			get
			{
				return this._baseDensity;
			}
			set
			{
				if(this._baseDensity != value)
				{
					this._baseDensity = value;
					this.OnPropertyChanged("BaseDensity");
				}
			}
		}
		
		private IList<Tank> _tanks = new List<Tank>();
		public virtual IList<Tank> Tanks
		{
			get
			{
				return this._tanks;
			}
		}
		
		private IList<Nozzle> _nozzles = new List<Nozzle>();
		public virtual IList<Nozzle> Nozzles
		{
			get
			{
				return this._nozzles;
			}
		}
		
		private IList<Normalization> _normalizations = new List<Normalization>();
		public virtual IList<Normalization> Normalizations
		{
			get
			{
				return this._normalizations;
			}
		}
		
		private IList<InvoiceLine> _invoiceLines = new List<InvoiceLine>();
		public virtual IList<InvoiceLine> InvoiceLines
		{
			get
			{
				return this._invoiceLines;
			}
		}
		
		private IList<FuelTypePrice> _fuelTypePrices = new List<FuelTypePrice>();
		public virtual IList<FuelTypePrice> FuelTypePrices
		{
			get
			{
				return this._fuelTypePrices;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public FuelType()
		{
		}
		
		protected FuelType(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.FuelTypeId = (Guid)info.GetValue("FuelTypeId", typeof(Guid));
			this.Name = info.GetString("Name");
			this.Code = info.GetString("Code");
			this.Color = (int?)info.GetValue("Color", typeof(int?));
			this.ThermalCoeficient = info.GetDecimal("ThermalCoeficient");
			this.EnumeratorValue = info.GetInt32("EnumeratorValue");
			this.BaseDensity = info.GetDecimal("BaseDensity");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("FuelTypeId", this.FuelTypeId, typeof(Guid));
			info.AddValue("Name", this.Name, typeof(string));
			info.AddValue("Code", this.Code, typeof(string));
			info.AddValue("Color", this.Color, typeof(int?));
			info.AddValue("ThermalCoeficient", this.ThermalCoeficient, typeof(decimal));
			info.AddValue("EnumeratorValue", this.EnumeratorValue, typeof(int));
			info.AddValue("BaseDensity", this.BaseDensity, typeof(decimal));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class DispenserType : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _dispenserTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid DispenserTypeId
		{
			get
			{
				return this._dispenserTypeId;
			}
			set
			{
				if(this._dispenserTypeId != value)
				{
					this._dispenserTypeId = value;
					this.OnPropertyChanged("DispenserTypeId");
				}
			}
		}
		
		private Guid _dispenserProtocolId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid DispenserProtocolId
		{
			get
			{
				return this._dispenserProtocolId;
			}
			set
			{
				if(this._dispenserProtocolId != value)
				{
					this._dispenserProtocolId = value;
					this.OnPropertyChanged("DispenserProtocolId");
				}
			}
		}
		
		private string _brandName;
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string BrandName
		{
			get
			{
				return this._brandName;
			}
			set
			{
				if(this._brandName != value)
				{
					this._brandName = value;
					this.OnPropertyChanged("BrandName");
				}
			}
		}
		
		private DispenserProtocol _dispenserProtocol;
		public virtual DispenserProtocol DispenserProtocol
		{
			get
			{
				return this._dispenserProtocol;
			}
			set
			{
				if(this._dispenserProtocol != value)
				{
					this._dispenserProtocol = value;
					this.OnPropertyChanged("DispenserProtocol");
				}
			}
		}
		
		private IList<Dispenser> _dispensers = new List<Dispenser>();
		public virtual IList<Dispenser> Dispensers
		{
			get
			{
				return this._dispensers;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public DispenserType()
		{
		}
		
		protected DispenserType(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.DispenserTypeId = (Guid)info.GetValue("DispenserTypeId", typeof(Guid));
			this.DispenserProtocolId = (Guid)info.GetValue("DispenserProtocolId", typeof(Guid));
			this.BrandName = info.GetString("BrandName");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("DispenserTypeId", this.DispenserTypeId, typeof(Guid));
			info.AddValue("DispenserProtocolId", this.DispenserProtocolId, typeof(Guid));
			info.AddValue("BrandName", this.BrandName, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class DispenserSetting : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _dispenserSettingId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid DispenserSettingId
		{
			get
			{
				return this._dispenserSettingId;
			}
			set
			{
				if(this._dispenserSettingId != value)
				{
					this._dispenserSettingId = value;
					this.OnPropertyChanged("DispenserSettingId");
				}
			}
		}
		
		private Guid _dispenserId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid DispenserId
		{
			get
			{
				return this._dispenserId;
			}
			set
			{
				if(this._dispenserId != value)
				{
					this._dispenserId = value;
					this.OnPropertyChanged("DispenserId");
				}
			}
		}
		
		private string _settingKey;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string SettingKey
		{
			get
			{
				return this._settingKey;
			}
			set
			{
				if(this._settingKey != value)
				{
					this._settingKey = value;
					this.OnPropertyChanged("SettingKey");
				}
			}
		}
		
		private string _settingValue;
		public virtual string SettingValue
		{
			get
			{
				return this._settingValue;
			}
			set
			{
				if(this._settingValue != value)
				{
					this._settingValue = value;
					this.OnPropertyChanged("SettingValue");
				}
			}
		}
		
		private string _description;
		public virtual string Description
		{
			get
			{
				return this._description;
			}
			set
			{
				if(this._description != value)
				{
					this._description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
		
		private Guid? _nozzleId;
		public virtual Guid? NozzleId
		{
			get
			{
				return this._nozzleId;
			}
			set
			{
				if(this._nozzleId != value)
				{
					this._nozzleId = value;
					this.OnPropertyChanged("NozzleId");
				}
			}
		}
		
		private Dispenser _dispenser;
		public virtual Dispenser Dispenser
		{
			get
			{
				return this._dispenser;
			}
			set
			{
				if(this._dispenser != value)
				{
					this._dispenser = value;
					this.OnPropertyChanged("Dispenser");
				}
			}
		}
		
		private Nozzle _nozzle;
		public virtual Nozzle Nozzle
		{
			get
			{
				return this._nozzle;
			}
			set
			{
				if(this._nozzle != value)
				{
					this._nozzle = value;
					this.OnPropertyChanged("Nozzle");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public DispenserSetting()
		{
		}
		
		protected DispenserSetting(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.DispenserSettingId = (Guid)info.GetValue("DispenserSettingId", typeof(Guid));
			this.DispenserId = (Guid)info.GetValue("DispenserId", typeof(Guid));
			this.SettingKey = info.GetString("SettingKey");
			this.SettingValue = info.GetString("SettingValue");
			this.Description = info.GetString("Description");
			this.NozzleId = (Guid?)info.GetValue("NozzleId", typeof(Guid?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("DispenserSettingId", this.DispenserSettingId, typeof(Guid));
			info.AddValue("DispenserId", this.DispenserId, typeof(Guid));
			info.AddValue("SettingKey", this.SettingKey, typeof(string));
			info.AddValue("SettingValue", this.SettingValue, typeof(string));
			info.AddValue("Description", this.Description, typeof(string));
			info.AddValue("NozzleId", this.NozzleId, typeof(Guid?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class DispenserProtocol : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _dispenserProtocolId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid DispenserProtocolId
		{
			get
			{
				return this._dispenserProtocolId;
			}
			set
			{
				if(this._dispenserProtocolId != value)
				{
					this._dispenserProtocolId = value;
					this.OnPropertyChanged("DispenserProtocolId");
				}
			}
		}
		
		private string _protocolName;
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string ProtocolName
		{
			get
			{
				return this._protocolName;
			}
			set
			{
				if(this._protocolName != value)
				{
					this._protocolName = value;
					this.OnPropertyChanged("ProtocolName");
				}
			}
		}
		
		private int _enumeratorValue;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int EnumeratorValue
		{
			get
			{
				return this._enumeratorValue;
			}
			set
			{
				if(this._enumeratorValue != value)
				{
					this._enumeratorValue = value;
					this.OnPropertyChanged("EnumeratorValue");
				}
			}
		}
		
		private IList<DispenserType> _dispenserTypes = new List<DispenserType>();
		public virtual IList<DispenserType> DispenserTypes
		{
			get
			{
				return this._dispenserTypes;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public DispenserProtocol()
		{
		}
		
		protected DispenserProtocol(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.DispenserProtocolId = (Guid)info.GetValue("DispenserProtocolId", typeof(Guid));
			this.ProtocolName = info.GetString("ProtocolName");
			this.EnumeratorValue = info.GetInt32("EnumeratorValue");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("DispenserProtocolId", this.DispenserProtocolId, typeof(Guid));
			info.AddValue("ProtocolName", this.ProtocolName, typeof(string));
			info.AddValue("EnumeratorValue", this.EnumeratorValue, typeof(int));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class Dispenser : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _dispenserId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid DispenserId
		{
			get
			{
				return this._dispenserId;
			}
			set
			{
				if(this._dispenserId != value)
				{
					this._dispenserId = value;
					this.OnPropertyChanged("DispenserId");
				}
			}
		}
		
		private int _physicalState;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int PhysicalState
		{
			get
			{
				return this._physicalState;
			}
			set
			{
				if(this._physicalState != value)
				{
					this._physicalState = value;
					this.OnPropertyChanged("PhysicalState");
				}
			}
		}
		
		private bool _isValid;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsValid
		{
			get
			{
				return this._isValid;
			}
			set
			{
				if(this._isValid != value)
				{
					this._isValid = value;
					this.OnPropertyChanged("IsValid");
				}
			}
		}
		
		private DateTime? _inValidationDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? InValidationDate
		{
			get
			{
				return this._inValidationDate;
			}
			set
			{
				if(this._inValidationDate != value)
				{
					this._inValidationDate = value;
					this.OnPropertyChanged("InValidationDate");
				}
			}
		}
		
		private Guid _dispenserTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid DispenserTypeId
		{
			get
			{
				return this._dispenserTypeId;
			}
			set
			{
				if(this._dispenserTypeId != value)
				{
					this._dispenserTypeId = value;
					this.OnPropertyChanged("DispenserTypeId");
				}
			}
		}
		
		private Guid _communicationControllerId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid CommunicationControllerId
		{
			get
			{
				return this._communicationControllerId;
			}
			set
			{
				if(this._communicationControllerId != value)
				{
					this._communicationControllerId = value;
					this.OnPropertyChanged("CommunicationControllerId");
				}
			}
		}
		
		private int _channel;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int Channel
		{
			get
			{
				return this._channel;
			}
			set
			{
				if(this._channel != value)
				{
					this._channel = value;
					this.OnPropertyChanged("Channel");
				}
			}
		}
		
		private int _physicalAddress;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int PhysicalAddress
		{
			get
			{
				return this._physicalAddress;
			}
			set
			{
				if(this._physicalAddress != value)
				{
					this._physicalAddress = value;
					this.OnPropertyChanged("PhysicalAddress");
				}
			}
		}
		
		private int _dispenserNumber;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int DispenserNumber
		{
			get
			{
				return this._dispenserNumber;
			}
			set
			{
				if(this._dispenserNumber != value)
				{
					this._dispenserNumber = value;
					this.OnPropertyChanged("DispenserNumber");
				}
			}
		}
		
		private string _pumpSerialNumber;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string PumpSerialNumber
		{
			get
			{
				return this._pumpSerialNumber;
			}
			set
			{
				if(this._pumpSerialNumber != value)
				{
					this._pumpSerialNumber = value;
					this.OnPropertyChanged("PumpSerialNumber");
				}
			}
		}
		
		private int _officialPumpNumber;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int OfficialPumpNumber
		{
			get
			{
				return this._officialPumpNumber;
			}
			set
			{
				if(this._officialPumpNumber != value)
				{
					this._officialPumpNumber = value;
					this.OnPropertyChanged("OfficialPumpNumber");
				}
			}
		}
		
		private int? _unitPriceDecimalPlaces;
		public virtual int? UnitPriceDecimalPlaces
		{
			get
			{
				return this._unitPriceDecimalPlaces;
			}
			set
			{
				if(this._unitPriceDecimalPlaces != value)
				{
					this._unitPriceDecimalPlaces = value;
					this.OnPropertyChanged("UnitPriceDecimalPlaces");
				}
			}
		}
		
		private int? _decimalPlaces;
		public virtual int? DecimalPlaces
		{
			get
			{
				return this._decimalPlaces;
			}
			set
			{
				if(this._decimalPlaces != value)
				{
					this._decimalPlaces = value;
					this.OnPropertyChanged("DecimalPlaces");
				}
			}
		}
		
		private DispenserType _dispenserType;
		public virtual DispenserType DispenserType
		{
			get
			{
				return this._dispenserType;
			}
			set
			{
				if(this._dispenserType != value)
				{
					this._dispenserType = value;
					this.OnPropertyChanged("DispenserType");
				}
			}
		}
		
		private CommunicationController _communicationController;
		public virtual CommunicationController CommunicationController
		{
			get
			{
				return this._communicationController;
			}
			set
			{
				if(this._communicationController != value)
				{
					this._communicationController = value;
					this.OnPropertyChanged("CommunicationController");
				}
			}
		}
		
		private IList<SystemEvent> _systemEvents = new List<SystemEvent>();
		public virtual IList<SystemEvent> SystemEvents
		{
			get
			{
				return this._systemEvents;
			}
		}
		
		private IList<Nozzle> _nozzles = new List<Nozzle>();
		public virtual IList<Nozzle> Nozzles
		{
			get
			{
				return this._nozzles;
			}
		}
		
		private IList<InvoicePrint> _invoicePrints = new List<InvoicePrint>();
		public virtual IList<InvoicePrint> InvoicePrints
		{
			get
			{
				return this._invoicePrints;
			}
		}
		
		private IList<DispenserSetting> _dispenserSettings = new List<DispenserSetting>();
		public virtual IList<DispenserSetting> DispenserSettings
		{
			get
			{
				return this._dispenserSettings;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public Dispenser()
		{
		}
		
		protected Dispenser(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.DispenserId = (Guid)info.GetValue("DispenserId", typeof(Guid));
			this.PhysicalState = info.GetInt32("PhysicalState");
			this.IsValid = info.GetBoolean("IsValid");
			this.InValidationDate = (DateTime?)info.GetValue("InValidationDate", typeof(DateTime?));
			this.DispenserTypeId = (Guid)info.GetValue("DispenserTypeId", typeof(Guid));
			this.CommunicationControllerId = (Guid)info.GetValue("CommunicationControllerId", typeof(Guid));
			this.Channel = info.GetInt32("Channel");
			this.PhysicalAddress = info.GetInt32("PhysicalAddress");
			this.DispenserNumber = info.GetInt32("DispenserNumber");
			this.PumpSerialNumber = info.GetString("PumpSerialNumber");
			this.OfficialPumpNumber = info.GetInt32("OfficialPumpNumber");
			this.UnitPriceDecimalPlaces = (int?)info.GetValue("UnitPriceDecimalPlaces", typeof(int?));
			this.DecimalPlaces = (int?)info.GetValue("DecimalPlaces", typeof(int?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("DispenserId", this.DispenserId, typeof(Guid));
			info.AddValue("PhysicalState", this.PhysicalState, typeof(int));
			info.AddValue("IsValid", this.IsValid, typeof(bool));
			info.AddValue("InValidationDate", this.InValidationDate, typeof(DateTime?));
			info.AddValue("DispenserTypeId", this.DispenserTypeId, typeof(Guid));
			info.AddValue("CommunicationControllerId", this.CommunicationControllerId, typeof(Guid));
			info.AddValue("Channel", this.Channel, typeof(int));
			info.AddValue("PhysicalAddress", this.PhysicalAddress, typeof(int));
			info.AddValue("DispenserNumber", this.DispenserNumber, typeof(int));
			info.AddValue("PumpSerialNumber", this.PumpSerialNumber, typeof(string));
			info.AddValue("OfficialPumpNumber", this.OfficialPumpNumber, typeof(int));
			info.AddValue("UnitPriceDecimalPlaces", this.UnitPriceDecimalPlaces, typeof(int?));
			info.AddValue("DecimalPlaces", this.DecimalPlaces, typeof(int?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class CommunicationController : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _communicationControllerId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid CommunicationControllerId
		{
			get
			{
				return this._communicationControllerId;
			}
			set
			{
				if(this._communicationControllerId != value)
				{
					this._communicationControllerId = value;
					this.OnPropertyChanged("CommunicationControllerId");
				}
			}
		}
		
		private string _name;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if(this._name != value)
				{
					this._name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
		
		private string _communicationPort;
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		public virtual string CommunicationPort
		{
			get
			{
				return this._communicationPort;
			}
			set
			{
				if(this._communicationPort != value)
				{
					this._communicationPort = value;
					this.OnPropertyChanged("CommunicationPort");
				}
			}
		}
		
		private int? _communicationProtocol;
		public virtual int? CommunicationProtocol
		{
			get
			{
				return this._communicationProtocol;
			}
			set
			{
				if(this._communicationProtocol != value)
				{
					this._communicationProtocol = value;
					this.OnPropertyChanged("CommunicationProtocol");
				}
			}
		}
		
		private string _controllerAssembly;
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public virtual string ControllerAssembly
		{
			get
			{
				return this._controllerAssembly;
			}
			set
			{
				if(this._controllerAssembly != value)
				{
					this._controllerAssembly = value;
					this.OnPropertyChanged("ControllerAssembly");
				}
			}
		}
		
		private IList<Tank> _tanks = new List<Tank>();
		public virtual IList<Tank> Tanks
		{
			get
			{
				return this._tanks;
			}
		}
		
		private IList<Dispenser> _dispensers = new List<Dispenser>();
		public virtual IList<Dispenser> Dispensers
		{
			get
			{
				return this._dispensers;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public CommunicationController()
		{
		}
		
		protected CommunicationController(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.CommunicationControllerId = (Guid)info.GetValue("CommunicationControllerId", typeof(Guid));
			this.Name = info.GetString("Name");
			this.CommunicationPort = info.GetString("CommunicationPort");
			this.CommunicationProtocol = (int?)info.GetValue("CommunicationProtocol", typeof(int?));
			this.ControllerAssembly = info.GetString("ControllerAssembly");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("CommunicationControllerId", this.CommunicationControllerId, typeof(Guid));
			info.AddValue("Name", this.Name, typeof(string));
			info.AddValue("CommunicationPort", this.CommunicationPort, typeof(string));
			info.AddValue("CommunicationProtocol", this.CommunicationProtocol, typeof(int?));
			info.AddValue("ControllerAssembly", this.ControllerAssembly, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class Balance : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _balanceId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid BalanceId
		{
			get
			{
				return this._balanceId;
			}
			set
			{
				if(this._balanceId != value)
				{
					this._balanceId = value;
					this.OnPropertyChanged("BalanceId");
				}
			}
		}
		
		private DateTime _startDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime StartDate
		{
			get
			{
				return this._startDate;
			}
			set
			{
				if(this._startDate != value)
				{
					this._startDate = value;
					this.OnPropertyChanged("StartDate");
				}
			}
		}
		
		private DateTime _endDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime EndDate
		{
			get
			{
				return this._endDate;
			}
			set
			{
				if(this._endDate != value)
				{
					this._endDate = value;
					this.OnPropertyChanged("EndDate");
				}
			}
		}
		
		private Guid? _lastSale;
		public virtual Guid? LastSale
		{
			get
			{
				return this._lastSale;
			}
			set
			{
				if(this._lastSale != value)
				{
					this._lastSale = value;
					this.OnPropertyChanged("LastSale");
				}
			}
		}
		
		private Guid? _lastFilling;
		public virtual Guid? LastFilling
		{
			get
			{
				return this._lastFilling;
			}
			set
			{
				if(this._lastFilling != value)
				{
					this._lastFilling = value;
					this.OnPropertyChanged("LastFilling");
				}
			}
		}
		
		private string _balanceText;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string BalanceText
		{
			get
			{
				return this._balanceText;
			}
			set
			{
				if(this._balanceText != value)
				{
					this._balanceText = value;
					this.OnPropertyChanged("BalanceText");
				}
			}
		}
		
		private Guid _applicationUserId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid ApplicationUserId
		{
			get
			{
				return this._applicationUserId;
			}
			set
			{
				if(this._applicationUserId != value)
				{
					this._applicationUserId = value;
					this.OnPropertyChanged("ApplicationUserId");
				}
			}
		}
		
		private DateTime? _sentDateTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? SentDateTime
		{
			get
			{
				return this._sentDateTime;
			}
			set
			{
				if(this._sentDateTime != value)
				{
					this._sentDateTime = value;
					this.OnPropertyChanged("SentDateTime");
				}
			}
		}
		
		private string _responseCode;
		[System.ComponentModel.DataAnnotations.StringLength(500)]
		public virtual string ResponseCode
		{
			get
			{
				return this._responseCode;
			}
			set
			{
				if(this._responseCode != value)
				{
					this._responseCode = value;
					this.OnPropertyChanged("ResponseCode");
				}
			}
		}
		
		private DateTime? _printDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? PrintDate
		{
			get
			{
				return this._printDate;
			}
			set
			{
				if(this._printDate != value)
				{
					this._printDate = value;
					this.OnPropertyChanged("PrintDate");
				}
			}
		}
		
		private string _documentSign;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string DocumentSign
		{
			get
			{
				return this._documentSign;
			}
			set
			{
				if(this._documentSign != value)
				{
					this._documentSign = value;
					this.OnPropertyChanged("DocumentSign");
				}
			}
		}
		
		private ApplicationUser _applicationUser;
		public virtual ApplicationUser ApplicationUser
		{
			get
			{
				return this._applicationUser;
			}
			set
			{
				if(this._applicationUser != value)
				{
					this._applicationUser = value;
					this.OnPropertyChanged("ApplicationUser");
				}
			}
		}
		
		private SalesTransaction _salesTransaction;
		public virtual SalesTransaction SalesTransaction
		{
			get
			{
				return this._salesTransaction;
			}
			set
			{
				if(this._salesTransaction != value)
				{
					this._salesTransaction = value;
					this.OnPropertyChanged("SalesTransaction");
				}
			}
		}
		
		private TankFilling _tankFilling;
		public virtual TankFilling TankFilling
		{
			get
			{
				return this._tankFilling;
			}
			set
			{
				if(this._tankFilling != value)
				{
					this._tankFilling = value;
					this.OnPropertyChanged("TankFilling");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public Balance()
		{
		}
		
		protected Balance(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.BalanceId = (Guid)info.GetValue("BalanceId", typeof(Guid));
			this.StartDate = (DateTime)info.GetValue("StartDate", typeof(DateTime));
			this.EndDate = (DateTime)info.GetValue("EndDate", typeof(DateTime));
			this.LastSale = (Guid?)info.GetValue("LastSale", typeof(Guid?));
			this.LastFilling = (Guid?)info.GetValue("LastFilling", typeof(Guid?));
			this.BalanceText = info.GetString("BalanceText");
			this.ApplicationUserId = (Guid)info.GetValue("ApplicationUserId", typeof(Guid));
			this.SentDateTime = (DateTime?)info.GetValue("SentDateTime", typeof(DateTime?));
			this.ResponseCode = info.GetString("ResponseCode");
			this.PrintDate = (DateTime?)info.GetValue("PrintDate", typeof(DateTime?));
			this.DocumentSign = info.GetString("DocumentSign");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("BalanceId", this.BalanceId, typeof(Guid));
			info.AddValue("StartDate", this.StartDate, typeof(DateTime));
			info.AddValue("EndDate", this.EndDate, typeof(DateTime));
			info.AddValue("LastSale", this.LastSale, typeof(Guid?));
			info.AddValue("LastFilling", this.LastFilling, typeof(Guid?));
			info.AddValue("BalanceText", this.BalanceText, typeof(string));
			info.AddValue("ApplicationUserId", this.ApplicationUserId, typeof(Guid));
			info.AddValue("SentDateTime", this.SentDateTime, typeof(DateTime?));
			info.AddValue("ResponseCode", this.ResponseCode, typeof(string));
			info.AddValue("PrintDate", this.PrintDate, typeof(DateTime?));
			info.AddValue("DocumentSign", this.DocumentSign, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class AtgProbeType : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _atgProbeTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid AtgProbeTypeId
		{
			get
			{
				return this._atgProbeTypeId;
			}
			set
			{
				if(this._atgProbeTypeId != value)
				{
					this._atgProbeTypeId = value;
					this.OnPropertyChanged("AtgProbeTypeId");
				}
			}
		}
		
		private Guid _atgProbeProtocolId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid AtgProbeProtocolId
		{
			get
			{
				return this._atgProbeProtocolId;
			}
			set
			{
				if(this._atgProbeProtocolId != value)
				{
					this._atgProbeProtocolId = value;
					this.OnPropertyChanged("AtgProbeProtocolId");
				}
			}
		}
		
		private string _brandName;
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string BrandName
		{
			get
			{
				return this._brandName;
			}
			set
			{
				if(this._brandName != value)
				{
					this._brandName = value;
					this.OnPropertyChanged("BrandName");
				}
			}
		}
		
		private AtgProbeProtocol _atgProbeProtocol;
		public virtual AtgProbeProtocol AtgProbeProtocol
		{
			get
			{
				return this._atgProbeProtocol;
			}
			set
			{
				if(this._atgProbeProtocol != value)
				{
					this._atgProbeProtocol = value;
					this.OnPropertyChanged("AtgProbeProtocol");
				}
			}
		}
		
		private IList<Tank> _tanks = new List<Tank>();
		public virtual IList<Tank> Tanks
		{
			get
			{
				return this._tanks;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public AtgProbeType()
		{
		}
		
		protected AtgProbeType(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.AtgProbeTypeId = (Guid)info.GetValue("AtgProbeTypeId", typeof(Guid));
			this.AtgProbeProtocolId = (Guid)info.GetValue("AtgProbeProtocolId", typeof(Guid));
			this.BrandName = info.GetString("BrandName");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("AtgProbeTypeId", this.AtgProbeTypeId, typeof(Guid));
			info.AddValue("AtgProbeProtocolId", this.AtgProbeProtocolId, typeof(Guid));
			info.AddValue("BrandName", this.BrandName, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class AtgProbeProtocol : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _atgProbeProtocolId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid AtgProbeProtocolId
		{
			get
			{
				return this._atgProbeProtocolId;
			}
			set
			{
				if(this._atgProbeProtocolId != value)
				{
					this._atgProbeProtocolId = value;
					this.OnPropertyChanged("AtgProbeProtocolId");
				}
			}
		}
		
		private string _protocolName;
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string ProtocolName
		{
			get
			{
				return this._protocolName;
			}
			set
			{
				if(this._protocolName != value)
				{
					this._protocolName = value;
					this.OnPropertyChanged("ProtocolName");
				}
			}
		}
		
		private int _enumeratorValue;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int EnumeratorValue
		{
			get
			{
				return this._enumeratorValue;
			}
			set
			{
				if(this._enumeratorValue != value)
				{
					this._enumeratorValue = value;
					this.OnPropertyChanged("EnumeratorValue");
				}
			}
		}
		
		private IList<AtgProbeType> _atgProbeTypes = new List<AtgProbeType>();
		public virtual IList<AtgProbeType> AtgProbeTypes
		{
			get
			{
				return this._atgProbeTypes;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public AtgProbeProtocol()
		{
		}
		
		protected AtgProbeProtocol(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.AtgProbeProtocolId = (Guid)info.GetValue("AtgProbeProtocolId", typeof(Guid));
			this.ProtocolName = info.GetString("ProtocolName");
			this.EnumeratorValue = info.GetInt32("EnumeratorValue");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("AtgProbeProtocolId", this.AtgProbeProtocolId, typeof(Guid));
			info.AddValue("ProtocolName", this.ProtocolName, typeof(string));
			info.AddValue("EnumeratorValue", this.EnumeratorValue, typeof(int));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class ApplicationUserLoggon : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _applicationUserLoggonId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid ApplicationUserLoggonId
		{
			get
			{
				return this._applicationUserLoggonId;
			}
			set
			{
				if(this._applicationUserLoggonId != value)
				{
					this._applicationUserLoggonId = value;
					this.OnPropertyChanged("ApplicationUserLoggonId");
				}
			}
		}
		
		private Guid _applicationUserId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid ApplicationUserId
		{
			get
			{
				return this._applicationUserId;
			}
			set
			{
				if(this._applicationUserId != value)
				{
					this._applicationUserId = value;
					this.OnPropertyChanged("ApplicationUserId");
				}
			}
		}
		
		private DateTime _loggonTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime LoggonTime
		{
			get
			{
				return this._loggonTime;
			}
			set
			{
				if(this._loggonTime != value)
				{
					this._loggonTime = value;
					this.OnPropertyChanged("LoggonTime");
				}
			}
		}
		
		private DateTime? _logoffTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? LogoffTime
		{
			get
			{
				return this._logoffTime;
			}
			set
			{
				if(this._logoffTime != value)
				{
					this._logoffTime = value;
					this.OnPropertyChanged("LogoffTime");
				}
			}
		}
		
		private ApplicationUser _applicationUser;
		public virtual ApplicationUser ApplicationUser
		{
			get
			{
				return this._applicationUser;
			}
			set
			{
				if(this._applicationUser != value)
				{
					this._applicationUser = value;
					this.OnPropertyChanged("ApplicationUser");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public ApplicationUserLoggon()
		{
		}
		
		protected ApplicationUserLoggon(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.ApplicationUserLoggonId = (Guid)info.GetValue("ApplicationUserLoggonId", typeof(Guid));
			this.ApplicationUserId = (Guid)info.GetValue("ApplicationUserId", typeof(Guid));
			this.LoggonTime = (DateTime)info.GetValue("LoggonTime", typeof(DateTime));
			this.LogoffTime = (DateTime?)info.GetValue("LogoffTime", typeof(DateTime?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("ApplicationUserLoggonId", this.ApplicationUserLoggonId, typeof(Guid));
			info.AddValue("ApplicationUserId", this.ApplicationUserId, typeof(Guid));
			info.AddValue("LoggonTime", this.LoggonTime, typeof(DateTime));
			info.AddValue("LogoffTime", this.LogoffTime, typeof(DateTime?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class ApplicationUser : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _applicationUserId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid ApplicationUserId
		{
			get
			{
				return this._applicationUserId;
			}
			set
			{
				if(this._applicationUserId != value)
				{
					this._applicationUserId = value;
					this.OnPropertyChanged("ApplicationUserId");
				}
			}
		}
		
		private string _userName;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string UserName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if(this._userName != value)
				{
					this._userName = value;
					this.OnPropertyChanged("UserName");
				}
			}
		}
		
		private string _password;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Password
		{
			get
			{
				return this._password;
			}
			set
			{
				if(this._password != value)
				{
					this._password = value;
					this.OnPropertyChanged("Password");
				}
			}
		}
		
		private int _userLevel;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int UserLevel
		{
			get
			{
				return this._userLevel;
			}
			set
			{
				if(this._userLevel != value)
				{
					this._userLevel = value;
					this.OnPropertyChanged("UserLevel");
				}
			}
		}
		
		private string _passwordEncrypted;
		public virtual string PasswordEncrypted
		{
			get
			{
				return this._passwordEncrypted;
			}
			set
			{
				if(this._passwordEncrypted != value)
				{
					this._passwordEncrypted = value;
					this.OnPropertyChanged("PasswordEncrypted");
				}
			}
		}
		
		private IList<TankFilling> _tankFillings = new List<TankFilling>();
		public virtual IList<TankFilling> TankFillings
		{
			get
			{
				return this._tankFillings;
			}
		}
		
		private IList<SalesTransaction> _salesTransactions = new List<SalesTransaction>();
		public virtual IList<SalesTransaction> SalesTransactions
		{
			get
			{
				return this._salesTransactions;
			}
		}
		
		private IList<Invoice> _invoices = new List<Invoice>();
		public virtual IList<Invoice> Invoices
		{
			get
			{
				return this._invoices;
			}
		}
		
		private IList<Balance> _balances = new List<Balance>();
		public virtual IList<Balance> Balances
		{
			get
			{
				return this._balances;
			}
		}
		
		private IList<ApplicationUserLoggon> _applicationUserLoggons = new List<ApplicationUserLoggon>();
		public virtual IList<ApplicationUserLoggon> ApplicationUserLoggons
		{
			get
			{
				return this._applicationUserLoggons;
			}
		}
		
		private IList<Shift> _shifts = new List<Shift>();
		public virtual IList<Shift> Shifts
		{
			get
			{
				return this._shifts;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public ApplicationUser()
		{
		}
		
		protected ApplicationUser(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.ApplicationUserId = (Guid)info.GetValue("ApplicationUserId", typeof(Guid));
			this.UserName = info.GetString("UserName");
			this.Password = info.GetString("Password");
			this.UserLevel = info.GetInt32("UserLevel");
			this.PasswordEncrypted = info.GetString("PasswordEncrypted");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("ApplicationUserId", this.ApplicationUserId, typeof(Guid));
			info.AddValue("UserName", this.UserName, typeof(string));
			info.AddValue("Password", this.Password, typeof(string));
			info.AddValue("UserLevel", this.UserLevel, typeof(int));
			info.AddValue("PasswordEncrypted", this.PasswordEncrypted, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class AlertDefinition : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _alertDefinitionId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid AlertDefinitionId
		{
			get
			{
				return this._alertDefinitionId;
			}
			set
			{
				if(this._alertDefinitionId != value)
				{
					this._alertDefinitionId = value;
					this.OnPropertyChanged("AlertDefinitionId");
				}
			}
		}
		
		private string _name;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if(this._name != value)
				{
					this._name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
		
		private int? _alertEnumValue;
		public virtual int? AlertEnumValue
		{
			get
			{
				return this._alertEnumValue;
			}
			set
			{
				if(this._alertEnumValue != value)
				{
					this._alertEnumValue = value;
					this.OnPropertyChanged("AlertEnumValue");
				}
			}
		}
		
		private bool _isNozzleAlert;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsNozzleAlert
		{
			get
			{
				return this._isNozzleAlert;
			}
			set
			{
				if(this._isNozzleAlert != value)
				{
					this._isNozzleAlert = value;
					this.OnPropertyChanged("IsNozzleAlert");
				}
			}
		}
		
		private bool _isDispenserAlert;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsDispenserAlert
		{
			get
			{
				return this._isDispenserAlert;
			}
			set
			{
				if(this._isDispenserAlert != value)
				{
					this._isDispenserAlert = value;
					this.OnPropertyChanged("IsDispenserAlert");
				}
			}
		}
		
		private bool _isTankAlert;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsTankAlert
		{
			get
			{
				return this._isTankAlert;
			}
			set
			{
				if(this._isTankAlert != value)
				{
					this._isTankAlert = value;
					this.OnPropertyChanged("IsTankAlert");
				}
			}
		}
		
		private bool _isStationAlert;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsStationAlert
		{
			get
			{
				return this._isStationAlert;
			}
			set
			{
				if(this._isStationAlert != value)
				{
					this._isStationAlert = value;
					this.OnPropertyChanged("IsStationAlert");
				}
			}
		}
		
		private bool _lockDevices;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool LockDevices
		{
			get
			{
				return this._lockDevices;
			}
			set
			{
				if(this._lockDevices != value)
				{
					this._lockDevices = value;
					this.OnPropertyChanged("LockDevices");
				}
			}
		}
		
		private string _expression;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Expression
		{
			get
			{
				return this._expression;
			}
			set
			{
				if(this._expression != value)
				{
					this._expression = value;
					this.OnPropertyChanged("Expression");
				}
			}
		}
		
		private bool _alertIsDisabled;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool AlertIsDisabled
		{
			get
			{
				return this._alertIsDisabled;
			}
			set
			{
				if(this._alertIsDisabled != value)
				{
					this._alertIsDisabled = value;
					this.OnPropertyChanged("AlertIsDisabled");
				}
			}
		}
		
		private decimal _errorThreshold;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal ErrorThreshold
		{
			get
			{
				return this._errorThreshold;
			}
			set
			{
				if(this._errorThreshold != value)
				{
					this._errorThreshold = value;
					this.OnPropertyChanged("ErrorThreshold");
				}
			}
		}
		
		private bool _resendAlerts;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool ResendAlerts
		{
			get
			{
				return this._resendAlerts;
			}
			set
			{
				if(this._resendAlerts != value)
				{
					this._resendAlerts = value;
					this.OnPropertyChanged("ResendAlerts");
				}
			}
		}
		
		private string _alerttMessage;
		public virtual string AlerttMessage
		{
			get
			{
				return this._alerttMessage;
			}
			set
			{
				if(this._alerttMessage != value)
				{
					this._alerttMessage = value;
					this.OnPropertyChanged("AlerttMessage");
				}
			}
		}
		
		private bool _isGeneric;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool IsGeneric
		{
			get
			{
				return this._isGeneric;
			}
			set
			{
				if(this._isGeneric != value)
				{
					this._isGeneric = value;
					this.OnPropertyChanged("IsGeneric");
				}
			}
		}
		
		private int _resendAlertsInterval;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int ResendAlertsInterval
		{
			get
			{
				return this._resendAlertsInterval;
			}
			set
			{
				if(this._resendAlertsInterval != value)
				{
					this._resendAlertsInterval = value;
					this.OnPropertyChanged("ResendAlertsInterval");
				}
			}
		}
		
		private bool _autoResolve;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual bool AutoResolve
		{
			get
			{
				return this._autoResolve;
			}
			set
			{
				if(this._autoResolve != value)
				{
					this._autoResolve = value;
					this.OnPropertyChanged("AutoResolve");
				}
			}
		}
		
		private string _methodForResolve;
		[System.ComponentModel.DataAnnotations.StringLength(150)]
		public virtual string MethodForResolve
		{
			get
			{
				return this._methodForResolve;
			}
			set
			{
				if(this._methodForResolve != value)
				{
					this._methodForResolve = value;
					this.OnPropertyChanged("MethodForResolve");
				}
			}
		}
		
		private IList<SystemEvent> _systemEvents = new List<SystemEvent>();
		public virtual IList<SystemEvent> SystemEvents
		{
			get
			{
				return this._systemEvents;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public AlertDefinition()
		{
		}
		
		protected AlertDefinition(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.AlertDefinitionId = (Guid)info.GetValue("AlertDefinitionId", typeof(Guid));
			this.Name = info.GetString("Name");
			this.AlertEnumValue = (int?)info.GetValue("AlertEnumValue", typeof(int?));
			this.IsNozzleAlert = info.GetBoolean("IsNozzleAlert");
			this.IsDispenserAlert = info.GetBoolean("IsDispenserAlert");
			this.IsTankAlert = info.GetBoolean("IsTankAlert");
			this.IsStationAlert = info.GetBoolean("IsStationAlert");
			this.LockDevices = info.GetBoolean("LockDevices");
			this.Expression = info.GetString("Expression");
			this.AlertIsDisabled = info.GetBoolean("AlertIsDisabled");
			this.ErrorThreshold = info.GetDecimal("ErrorThreshold");
			this.ResendAlerts = info.GetBoolean("ResendAlerts");
			this.AlerttMessage = info.GetString("AlerttMessage");
			this.IsGeneric = info.GetBoolean("IsGeneric");
			this.ResendAlertsInterval = info.GetInt32("ResendAlertsInterval");
			this.AutoResolve = info.GetBoolean("AutoResolve");
			this.MethodForResolve = info.GetString("MethodForResolve");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("AlertDefinitionId", this.AlertDefinitionId, typeof(Guid));
			info.AddValue("Name", this.Name, typeof(string));
			info.AddValue("AlertEnumValue", this.AlertEnumValue, typeof(int?));
			info.AddValue("IsNozzleAlert", this.IsNozzleAlert, typeof(bool));
			info.AddValue("IsDispenserAlert", this.IsDispenserAlert, typeof(bool));
			info.AddValue("IsTankAlert", this.IsTankAlert, typeof(bool));
			info.AddValue("IsStationAlert", this.IsStationAlert, typeof(bool));
			info.AddValue("LockDevices", this.LockDevices, typeof(bool));
			info.AddValue("Expression", this.Expression, typeof(string));
			info.AddValue("AlertIsDisabled", this.AlertIsDisabled, typeof(bool));
			info.AddValue("ErrorThreshold", this.ErrorThreshold, typeof(decimal));
			info.AddValue("ResendAlerts", this.ResendAlerts, typeof(bool));
			info.AddValue("AlerttMessage", this.AlerttMessage, typeof(string));
			info.AddValue("IsGeneric", this.IsGeneric, typeof(bool));
			info.AddValue("ResendAlertsInterval", this.ResendAlertsInterval, typeof(int));
			info.AddValue("AutoResolve", this.AutoResolve, typeof(bool));
			info.AddValue("MethodForResolve", this.MethodForResolve, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class TankFillingView : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _viewId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid ViewId
		{
			get
			{
				return this._viewId;
			}
			set
			{
				if(this._viewId != value)
				{
					this._viewId = value;
					this.OnPropertyChanged("ViewId");
				}
			}
		}
		
		private DateTime? _startTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? StartTime
		{
			get
			{
				return this._startTime;
			}
			set
			{
				if(this._startTime != value)
				{
					this._startTime = value;
					this.OnPropertyChanged("StartTime");
				}
			}
		}
		
		private DateTime? _endTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? EndTime
		{
			get
			{
				return this._endTime;
			}
			set
			{
				if(this._endTime != value)
				{
					this._endTime = value;
					this.OnPropertyChanged("EndTime");
				}
			}
		}
		
		private decimal? _levelStart;
		public virtual decimal? LevelStart
		{
			get
			{
				return this._levelStart;
			}
			set
			{
				if(this._levelStart != value)
				{
					this._levelStart = value;
					this.OnPropertyChanged("LevelStart");
				}
			}
		}
		
		private decimal? _levelEnd;
		public virtual decimal? LevelEnd
		{
			get
			{
				return this._levelEnd;
			}
			set
			{
				if(this._levelEnd != value)
				{
					this._levelEnd = value;
					this.OnPropertyChanged("LevelEnd");
				}
			}
		}
		
		private decimal? _tempStart;
		public virtual decimal? TempStart
		{
			get
			{
				return this._tempStart;
			}
			set
			{
				if(this._tempStart != value)
				{
					this._tempStart = value;
					this.OnPropertyChanged("TempStart");
				}
			}
		}
		
		private decimal? _tempEnd;
		public virtual decimal? TempEnd
		{
			get
			{
				return this._tempEnd;
			}
			set
			{
				if(this._tempEnd != value)
				{
					this._tempEnd = value;
					this.OnPropertyChanged("TempEnd");
				}
			}
		}
		
		private decimal? _tFVolume;
		public virtual decimal? TFVolume
		{
			get
			{
				return this._tFVolume;
			}
			set
			{
				if(this._tFVolume != value)
				{
					this._tFVolume = value;
					this.OnPropertyChanged("TFVolume");
				}
			}
		}
		
		private decimal? _tFVolumeNormalized;
		public virtual decimal? TFVolumeNormalized
		{
			get
			{
				return this._tFVolumeNormalized;
			}
			set
			{
				if(this._tFVolumeNormalized != value)
				{
					this._tFVolumeNormalized = value;
					this.OnPropertyChanged("TFVolumeNormalized");
				}
			}
		}
		
		private decimal? _iNVVolume;
		public virtual decimal? INVVolume
		{
			get
			{
				return this._iNVVolume;
			}
			set
			{
				if(this._iNVVolume != value)
				{
					this._iNVVolume = value;
					this.OnPropertyChanged("INVVolume");
				}
			}
		}
		
		private decimal? _iNVVolumeNormalized;
		public virtual decimal? INVVolumeNormalized
		{
			get
			{
				return this._iNVVolumeNormalized;
			}
			set
			{
				if(this._iNVVolumeNormalized != value)
				{
					this._iNVVolumeNormalized = value;
					this.OnPropertyChanged("INVVolumeNormalized");
				}
			}
		}
		
		private decimal? _iNVTemp;
		public virtual decimal? INVTemp
		{
			get
			{
				return this._iNVTemp;
			}
			set
			{
				if(this._iNVTemp != value)
				{
					this._iNVTemp = value;
					this.OnPropertyChanged("INVTemp");
				}
			}
		}
		
		private decimal? _fuelDensity;
		public virtual decimal? FuelDensity
		{
			get
			{
				return this._fuelDensity;
			}
			set
			{
				if(this._fuelDensity != value)
				{
					this._fuelDensity = value;
					this.OnPropertyChanged("FuelDensity");
				}
			}
		}
		
		private decimal? _unitPrice;
		public virtual decimal? UnitPrice
		{
			get
			{
				return this._unitPrice;
			}
			set
			{
				if(this._unitPrice != value)
				{
					this._unitPrice = value;
					this.OnPropertyChanged("UnitPrice");
				}
			}
		}
		
		private int? _number;
		public virtual int? Number
		{
			get
			{
				return this._number;
			}
			set
			{
				if(this._number != value)
				{
					this._number = value;
					this.OnPropertyChanged("Number");
				}
			}
		}
		
		private string _vehiclePlateNumber;
		[System.ComponentModel.DataAnnotations.StringLength(50)]
		public virtual string VehiclePlateNumber
		{
			get
			{
				return this._vehiclePlateNumber;
			}
			set
			{
				if(this._vehiclePlateNumber != value)
				{
					this._vehiclePlateNumber = value;
					this.OnPropertyChanged("VehiclePlateNumber");
				}
			}
		}
		
		private string _description;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string Description
		{
			get
			{
				return this._description;
			}
			set
			{
				if(this._description != value)
				{
					this._description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
		
		private string _name;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if(this._name != value)
				{
					this._name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
		
		private int? _tankNumber;
		public virtual int? TankNumber
		{
			get
			{
				return this._tankNumber;
			}
			set
			{
				if(this._tankNumber != value)
				{
					this._tankNumber = value;
					this.OnPropertyChanged("TankNumber");
				}
			}
		}
		
		private string _userName;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string UserName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if(this._userName != value)
				{
					this._userName = value;
					this.OnPropertyChanged("UserName");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public TankFillingView()
		{
		}
		
		protected TankFillingView(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.ViewId = (Guid)info.GetValue("ViewId", typeof(Guid));
			this.StartTime = (DateTime?)info.GetValue("StartTime", typeof(DateTime?));
			this.EndTime = (DateTime?)info.GetValue("EndTime", typeof(DateTime?));
			this.LevelStart = (decimal?)info.GetValue("LevelStart", typeof(decimal?));
			this.LevelEnd = (decimal?)info.GetValue("LevelEnd", typeof(decimal?));
			this.TempStart = (decimal?)info.GetValue("TempStart", typeof(decimal?));
			this.TempEnd = (decimal?)info.GetValue("TempEnd", typeof(decimal?));
			this.TFVolume = (decimal?)info.GetValue("TFVolume", typeof(decimal?));
			this.TFVolumeNormalized = (decimal?)info.GetValue("TFVolumeNormalized", typeof(decimal?));
			this.INVVolume = (decimal?)info.GetValue("INVVolume", typeof(decimal?));
			this.INVVolumeNormalized = (decimal?)info.GetValue("INVVolumeNormalized", typeof(decimal?));
			this.INVTemp = (decimal?)info.GetValue("INVTemp", typeof(decimal?));
			this.FuelDensity = (decimal?)info.GetValue("FuelDensity", typeof(decimal?));
			this.UnitPrice = (decimal?)info.GetValue("UnitPrice", typeof(decimal?));
			this.Number = (int?)info.GetValue("Number", typeof(int?));
			this.VehiclePlateNumber = info.GetString("VehiclePlateNumber");
			this.Description = info.GetString("Description");
			this.Name = info.GetString("Name");
			this.TankNumber = (int?)info.GetValue("TankNumber", typeof(int?));
			this.UserName = info.GetString("UserName");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("ViewId", this.ViewId, typeof(Guid));
			info.AddValue("StartTime", this.StartTime, typeof(DateTime?));
			info.AddValue("EndTime", this.EndTime, typeof(DateTime?));
			info.AddValue("LevelStart", this.LevelStart, typeof(decimal?));
			info.AddValue("LevelEnd", this.LevelEnd, typeof(decimal?));
			info.AddValue("TempStart", this.TempStart, typeof(decimal?));
			info.AddValue("TempEnd", this.TempEnd, typeof(decimal?));
			info.AddValue("TFVolume", this.TFVolume, typeof(decimal?));
			info.AddValue("TFVolumeNormalized", this.TFVolumeNormalized, typeof(decimal?));
			info.AddValue("INVVolume", this.INVVolume, typeof(decimal?));
			info.AddValue("INVVolumeNormalized", this.INVVolumeNormalized, typeof(decimal?));
			info.AddValue("INVTemp", this.INVTemp, typeof(decimal?));
			info.AddValue("FuelDensity", this.FuelDensity, typeof(decimal?));
			info.AddValue("UnitPrice", this.UnitPrice, typeof(decimal?));
			info.AddValue("Number", this.Number, typeof(int?));
			info.AddValue("VehiclePlateNumber", this.VehiclePlateNumber, typeof(string));
			info.AddValue("Description", this.Description, typeof(string));
			info.AddValue("Name", this.Name, typeof(string));
			info.AddValue("TankNumber", this.TankNumber, typeof(int?));
			info.AddValue("UserName", this.UserName, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class SalesView : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _viewId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid ViewId
		{
			get
			{
				return this._viewId;
			}
			set
			{
				if(this._viewId != value)
				{
					this._viewId = value;
					this.OnPropertyChanged("ViewId");
				}
			}
		}
		
		private decimal _volume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if(this._volume != value)
				{
					this._volume = value;
					this.OnPropertyChanged("Volume");
				}
			}
		}
		
		private decimal _volumeNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VolumeNormalized
		{
			get
			{
				return this._volumeNormalized;
			}
			set
			{
				if(this._volumeNormalized != value)
				{
					this._volumeNormalized = value;
					this.OnPropertyChanged("VolumeNormalized");
				}
			}
		}
		
		private decimal _unitPrice;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal UnitPrice
		{
			get
			{
				return this._unitPrice;
			}
			set
			{
				if(this._unitPrice != value)
				{
					this._unitPrice = value;
					this.OnPropertyChanged("UnitPrice");
				}
			}
		}
		
		private decimal _totalPrice;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if(this._totalPrice != value)
				{
					this._totalPrice = value;
					this.OnPropertyChanged("TotalPrice");
				}
			}
		}
		
		private decimal _totalizerStart;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalizerStart
		{
			get
			{
				return this._totalizerStart;
			}
			set
			{
				if(this._totalizerStart != value)
				{
					this._totalizerStart = value;
					this.OnPropertyChanged("TotalizerStart");
				}
			}
		}
		
		private decimal _totalizerEnd;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalizerEnd
		{
			get
			{
				return this._totalizerEnd;
			}
			set
			{
				if(this._totalizerEnd != value)
				{
					this._totalizerEnd = value;
					this.OnPropertyChanged("TotalizerEnd");
				}
			}
		}
		
		private string _name;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if(this._name != value)
				{
					this._name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
		
		private int _officialNozzleNumber;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int OfficialNozzleNumber
		{
			get
			{
				return this._officialNozzleNumber;
			}
			set
			{
				if(this._officialNozzleNumber != value)
				{
					this._officialNozzleNumber = value;
					this.OnPropertyChanged("OfficialNozzleNumber");
				}
			}
		}
		
		private int _officialPumpNumber;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int OfficialPumpNumber
		{
			get
			{
				return this._officialPumpNumber;
			}
			set
			{
				if(this._officialPumpNumber != value)
				{
					this._officialPumpNumber = value;
					this.OnPropertyChanged("OfficialPumpNumber");
				}
			}
		}
		
		private DateTime _transactionTimeStamp;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime TransactionTimeStamp
		{
			get
			{
				return this._transactionTimeStamp;
			}
			set
			{
				if(this._transactionTimeStamp != value)
				{
					this._transactionTimeStamp = value;
					this.OnPropertyChanged("TransactionTimeStamp");
				}
			}
		}
		
		private string _userName;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		public virtual string UserName
		{
			get
			{
				return this._userName;
			}
			set
			{
				if(this._userName != value)
				{
					this._userName = value;
					this.OnPropertyChanged("UserName");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public SalesView()
		{
		}
		
		protected SalesView(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.ViewId = (Guid)info.GetValue("ViewId", typeof(Guid));
			this.Volume = info.GetDecimal("Volume");
			this.VolumeNormalized = info.GetDecimal("VolumeNormalized");
			this.UnitPrice = info.GetDecimal("UnitPrice");
			this.TotalPrice = info.GetDecimal("TotalPrice");
			this.TotalizerStart = info.GetDecimal("TotalizerStart");
			this.TotalizerEnd = info.GetDecimal("TotalizerEnd");
			this.Name = info.GetString("Name");
			this.OfficialNozzleNumber = info.GetInt32("OfficialNozzleNumber");
			this.OfficialPumpNumber = info.GetInt32("OfficialPumpNumber");
			this.TransactionTimeStamp = (DateTime)info.GetValue("TransactionTimeStamp", typeof(DateTime));
			this.UserName = info.GetString("UserName");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("ViewId", this.ViewId, typeof(Guid));
			info.AddValue("Volume", this.Volume, typeof(decimal));
			info.AddValue("VolumeNormalized", this.VolumeNormalized, typeof(decimal));
			info.AddValue("UnitPrice", this.UnitPrice, typeof(decimal));
			info.AddValue("TotalPrice", this.TotalPrice, typeof(decimal));
			info.AddValue("TotalizerStart", this.TotalizerStart, typeof(decimal));
			info.AddValue("TotalizerEnd", this.TotalizerEnd, typeof(decimal));
			info.AddValue("Name", this.Name, typeof(string));
			info.AddValue("OfficialNozzleNumber", this.OfficialNozzleNumber, typeof(int));
			info.AddValue("OfficialPumpNumber", this.OfficialPumpNumber, typeof(int));
			info.AddValue("TransactionTimeStamp", this.TransactionTimeStamp, typeof(DateTime));
			info.AddValue("UserName", this.UserName, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class Shift : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _shiftId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid ShiftId
		{
			get
			{
				return this._shiftId;
			}
			set
			{
				if(this._shiftId != value)
				{
					this._shiftId = value;
					this.OnPropertyChanged("ShiftId");
				}
			}
		}
		
		private Guid _applicationUserId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid ApplicationUserId
		{
			get
			{
				return this._applicationUserId;
			}
			set
			{
				if(this._applicationUserId != value)
				{
					this._applicationUserId = value;
					this.OnPropertyChanged("ApplicationUserId");
				}
			}
		}
		
		private DateTime _shiftBegin;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime ShiftBegin
		{
			get
			{
				return this._shiftBegin;
			}
			set
			{
				if(this._shiftBegin != value)
				{
					this._shiftBegin = value;
					this.OnPropertyChanged("ShiftBegin");
				}
			}
		}
		
		private DateTime? _shiftEnd;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? ShiftEnd
		{
			get
			{
				return this._shiftEnd;
			}
			set
			{
				if(this._shiftEnd != value)
				{
					this._shiftEnd = value;
					this.OnPropertyChanged("ShiftEnd");
				}
			}
		}
		
		private ApplicationUser _applicationUser;
		public virtual ApplicationUser ApplicationUser
		{
			get
			{
				return this._applicationUser;
			}
			set
			{
				if(this._applicationUser != value)
				{
					this._applicationUser = value;
					this.OnPropertyChanged("ApplicationUser");
				}
			}
		}
		
		private IList<SalesTransaction> _salesTransactions = new List<SalesTransaction>();
		public virtual IList<SalesTransaction> SalesTransactions
		{
			get
			{
				return this._salesTransactions;
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public Shift()
		{
		}
		
		protected Shift(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.ShiftId = (Guid)info.GetValue("ShiftId", typeof(Guid));
			this.ApplicationUserId = (Guid)info.GetValue("ApplicationUserId", typeof(Guid));
			this.ShiftBegin = (DateTime)info.GetValue("ShiftBegin", typeof(DateTime));
			this.ShiftEnd = (DateTime?)info.GetValue("ShiftEnd", typeof(DateTime?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("ShiftId", this.ShiftId, typeof(Guid));
			info.AddValue("ApplicationUserId", this.ApplicationUserId, typeof(Guid));
			info.AddValue("ShiftBegin", this.ShiftBegin, typeof(DateTime));
			info.AddValue("ShiftEnd", this.ShiftEnd, typeof(DateTime?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class InvoiceGroupView : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private Guid _viewId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid ViewId
		{
			get
			{
				return this._viewId;
			}
			set
			{
				if(this._viewId != value)
				{
					this._viewId = value;
					this.OnPropertyChanged("ViewId");
				}
			}
		}
		
		private decimal? _vatAmount;
		public virtual decimal? VatAmount
		{
			get
			{
				return this._vatAmount;
			}
			set
			{
				if(this._vatAmount != value)
				{
					this._vatAmount = value;
					this.OnPropertyChanged("VatAmount");
				}
			}
		}
		
		private int _transactionType;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int TransactionType
		{
			get
			{
				return this._transactionType;
			}
			set
			{
				if(this._transactionType != value)
				{
					this._transactionType = value;
					this.OnPropertyChanged("TransactionType");
				}
			}
		}
		
		private DateTime? _transactionDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		public virtual DateTime? TransactionDate
		{
			get
			{
				return this._transactionDate;
			}
			set
			{
				if(this._transactionDate != value)
				{
					this._transactionDate = value;
					this.OnPropertyChanged("TransactionDate");
				}
			}
		}
		
		private decimal? _totalAmount;
		public virtual decimal? TotalAmount
		{
			get
			{
				return this._totalAmount;
			}
			set
			{
				if(this._totalAmount != value)
				{
					this._totalAmount = value;
					this.OnPropertyChanged("TotalAmount");
				}
			}
		}
		
		private decimal? _nettoAmount;
		public virtual decimal? NettoAmount
		{
			get
			{
				return this._nettoAmount;
			}
			set
			{
				if(this._nettoAmount != value)
				{
					this._nettoAmount = value;
					this.OnPropertyChanged("NettoAmount");
				}
			}
		}
		
		private int? _minNumber;
		public virtual int? MinNumber
		{
			get
			{
				return this._minNumber;
			}
			set
			{
				if(this._minNumber != value)
				{
					this._minNumber = value;
					this.OnPropertyChanged("MinNumber");
				}
			}
		}
		
		private int? _maxNumber;
		public virtual int? MaxNumber
		{
			get
			{
				return this._maxNumber;
			}
			set
			{
				if(this._maxNumber != value)
				{
					this._maxNumber = value;
					this.OnPropertyChanged("MaxNumber");
				}
			}
		}
		
		private string _description;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Description
		{
			get
			{
				return this._description;
			}
			set
			{
				if(this._description != value)
				{
					this._description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
		
		private string _dateString2;
		[System.ComponentModel.DataAnnotations.StringLength(10)]
		public virtual string DateString2
		{
			get
			{
				return this._dateString2;
			}
			set
			{
				if(this._dateString2 != value)
				{
					this._dateString2 = value;
					this.OnPropertyChanged("DateString2");
				}
			}
		}
		
		private string _dateString;
		[System.ComponentModel.DataAnnotations.StringLength(10)]
		public virtual string DateString
		{
			get
			{
				return this._dateString;
			}
			set
			{
				if(this._dateString != value)
				{
					this._dateString = value;
					this.OnPropertyChanged("DateString");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public InvoiceGroupView()
		{
		}
		
		protected InvoiceGroupView(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.ViewId = (Guid)info.GetValue("ViewId", typeof(Guid));
			this.VatAmount = (decimal?)info.GetValue("VatAmount", typeof(decimal?));
			this.TransactionType = info.GetInt32("TransactionType");
			this.TransactionDate = (DateTime?)info.GetValue("TransactionDate", typeof(DateTime?));
			this.TotalAmount = (decimal?)info.GetValue("TotalAmount", typeof(decimal?));
			this.NettoAmount = (decimal?)info.GetValue("NettoAmount", typeof(decimal?));
			this.MinNumber = (int?)info.GetValue("MinNumber", typeof(int?));
			this.MaxNumber = (int?)info.GetValue("MaxNumber", typeof(int?));
			this.Description = info.GetString("Description");
			this.DateString2 = info.GetString("DateString2");
			this.DateString = info.GetString("DateString");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("ViewId", this.ViewId, typeof(Guid));
			info.AddValue("VatAmount", this.VatAmount, typeof(decimal?));
			info.AddValue("TransactionType", this.TransactionType, typeof(int));
			info.AddValue("TransactionDate", this.TransactionDate, typeof(DateTime?));
			info.AddValue("TotalAmount", this.TotalAmount, typeof(decimal?));
			info.AddValue("NettoAmount", this.NettoAmount, typeof(decimal?));
			info.AddValue("MinNumber", this.MinNumber, typeof(int?));
			info.AddValue("MaxNumber", this.MaxNumber, typeof(int?));
			info.AddValue("Description", this.Description, typeof(string));
			info.AddValue("DateString2", this.DateString2, typeof(string));
			info.AddValue("DateString", this.DateString, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class TankLevelStartView : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private DateTime _tansDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime TansDate
		{
			get
			{
				return this._tansDate;
			}
			set
			{
				if(this._tansDate != value)
				{
					this._tansDate = value;
					this.OnPropertyChanged("TansDate");
				}
			}
		}
		
		private Guid _tankId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private decimal? _level;
		public virtual decimal? Level
		{
			get
			{
				return this._level;
			}
			set
			{
				if(this._level != value)
				{
					this._level = value;
					this.OnPropertyChanged("Level");
				}
			}
		}
		
		private Guid? _viewId;
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid? ViewId
		{
			get
			{
				return this._viewId;
			}
			set
			{
				if(this._viewId != value)
				{
					this._viewId = value;
					this.OnPropertyChanged("ViewId");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public TankLevelStartView()
		{
		}
		
		protected TankLevelStartView(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.TansDate = (DateTime)info.GetValue("TansDate", typeof(DateTime));
			this.TankId = (Guid)info.GetValue("TankId", typeof(Guid));
			this.Level = (decimal?)info.GetValue("Level", typeof(decimal?));
			this.ViewId = (Guid?)info.GetValue("ViewId", typeof(Guid?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("TansDate", this.TansDate, typeof(DateTime));
			info.AddValue("TankId", this.TankId, typeof(Guid));
			info.AddValue("Level", this.Level, typeof(decimal?));
			info.AddValue("ViewId", this.ViewId, typeof(Guid?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class TankLevelEndView : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private DateTime _tansDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime TansDate
		{
			get
			{
				return this._tansDate;
			}
			set
			{
				if(this._tansDate != value)
				{
					this._tansDate = value;
					this.OnPropertyChanged("TansDate");
				}
			}
		}
		
		private Guid _tankId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private decimal? _level;
		public virtual decimal? Level
		{
			get
			{
				return this._level;
			}
			set
			{
				if(this._level != value)
				{
					this._level = value;
					this.OnPropertyChanged("Level");
				}
			}
		}
		
		private Guid? _viewId;
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid? ViewId
		{
			get
			{
				return this._viewId;
			}
			set
			{
				if(this._viewId != value)
				{
					this._viewId = value;
					this.OnPropertyChanged("ViewId");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public TankLevelEndView()
		{
		}
		
		protected TankLevelEndView(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.TansDate = (DateTime)info.GetValue("TansDate", typeof(DateTime));
			this.TankId = (Guid)info.GetValue("TankId", typeof(Guid));
			this.Level = (decimal?)info.GetValue("Level", typeof(decimal?));
			this.ViewId = (Guid?)info.GetValue("ViewId", typeof(Guid?));
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("TansDate", this.TansDate, typeof(DateTime));
			info.AddValue("TankId", this.TankId, typeof(Guid));
			info.AddValue("Level", this.Level, typeof(decimal?));
			info.AddValue("ViewId", this.ViewId, typeof(Guid?));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class TankFillingInvoiceView : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private decimal _volumeRealNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VolumeRealNormalized
		{
			get
			{
				return this._volumeRealNormalized;
			}
			set
			{
				if(this._volumeRealNormalized != value)
				{
					this._volumeRealNormalized = value;
					this.OnPropertyChanged("VolumeRealNormalized");
				}
			}
		}
		
		private decimal _volumeReal;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VolumeReal
		{
			get
			{
				return this._volumeReal;
			}
			set
			{
				if(this._volumeReal != value)
				{
					this._volumeReal = value;
					this.OnPropertyChanged("VolumeReal");
				}
			}
		}
		
		private decimal _volumeNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VolumeNormalized
		{
			get
			{
				return this._volumeNormalized;
			}
			set
			{
				if(this._volumeNormalized != value)
				{
					this._volumeNormalized = value;
					this.OnPropertyChanged("VolumeNormalized");
				}
			}
		}
		
		private decimal _volume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if(this._volume != value)
				{
					this._volume = value;
					this.OnPropertyChanged("Volume");
				}
			}
		}
		
		private Guid? _viewId;
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid? ViewId
		{
			get
			{
				return this._viewId;
			}
			set
			{
				if(this._viewId != value)
				{
					this._viewId = value;
					this.OnPropertyChanged("ViewId");
				}
			}
		}
		
		private int _transactionType;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int TransactionType
		{
			get
			{
				return this._transactionType;
			}
			set
			{
				if(this._transactionType != value)
				{
					this._transactionType = value;
					this.OnPropertyChanged("TransactionType");
				}
			}
		}
		
		private DateTime _transactionTimeEnd;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime TransactionTimeEnd
		{
			get
			{
				return this._transactionTimeEnd;
			}
			set
			{
				if(this._transactionTimeEnd != value)
				{
					this._transactionTimeEnd = value;
					this.OnPropertyChanged("TransactionTimeEnd");
				}
			}
		}
		
		private DateTime _transactionTime;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime TransactionTime
		{
			get
			{
				return this._transactionTime;
			}
			set
			{
				if(this._transactionTime != value)
				{
					this._transactionTime = value;
					this.OnPropertyChanged("TransactionTime");
				}
			}
		}
		
		private decimal _tankTemperatureStart;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TankTemperatureStart
		{
			get
			{
				return this._tankTemperatureStart;
			}
			set
			{
				if(this._tankTemperatureStart != value)
				{
					this._tankTemperatureStart = value;
					this.OnPropertyChanged("TankTemperatureStart");
				}
			}
		}
		
		private decimal _tankTemperatureEnd;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TankTemperatureEnd
		{
			get
			{
				return this._tankTemperatureEnd;
			}
			set
			{
				if(this._tankTemperatureEnd != value)
				{
					this._tankTemperatureEnd = value;
					this.OnPropertyChanged("TankTemperatureEnd");
				}
			}
		}
		
		private Guid _tankId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private decimal _levelStart;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal LevelStart
		{
			get
			{
				return this._levelStart;
			}
			set
			{
				if(this._levelStart != value)
				{
					this._levelStart = value;
					this.OnPropertyChanged("LevelStart");
				}
			}
		}
		
		private decimal _levelEnd;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal LevelEnd
		{
			get
			{
				return this._levelEnd;
			}
			set
			{
				if(this._levelEnd != value)
				{
					this._levelEnd = value;
					this.OnPropertyChanged("LevelEnd");
				}
			}
		}
		
		private Guid _invoiceTypeId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid InvoiceTypeId
		{
			get
			{
				return this._invoiceTypeId;
			}
			set
			{
				if(this._invoiceTypeId != value)
				{
					this._invoiceTypeId = value;
					this.OnPropertyChanged("InvoiceTypeId");
				}
			}
		}
		
		private decimal _invoiceVolumeNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal InvoiceVolumeNormalized
		{
			get
			{
				return this._invoiceVolumeNormalized;
			}
			set
			{
				if(this._invoiceVolumeNormalized != value)
				{
					this._invoiceVolumeNormalized = value;
					this.OnPropertyChanged("InvoiceVolumeNormalized");
				}
			}
		}
		
		private decimal _invoiceVolume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal InvoiceVolume
		{
			get
			{
				return this._invoiceVolume;
			}
			set
			{
				if(this._invoiceVolume != value)
				{
					this._invoiceVolume = value;
					this.OnPropertyChanged("InvoiceVolume");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public TankFillingInvoiceView()
		{
		}
		
		protected TankFillingInvoiceView(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.VolumeRealNormalized = info.GetDecimal("VolumeRealNormalized");
			this.VolumeReal = info.GetDecimal("VolumeReal");
			this.VolumeNormalized = info.GetDecimal("VolumeNormalized");
			this.Volume = info.GetDecimal("Volume");
			this.ViewId = (Guid?)info.GetValue("ViewId", typeof(Guid?));
			this.TransactionType = info.GetInt32("TransactionType");
			this.TransactionTimeEnd = (DateTime)info.GetValue("TransactionTimeEnd", typeof(DateTime));
			this.TransactionTime = (DateTime)info.GetValue("TransactionTime", typeof(DateTime));
			this.TankTemperatureStart = info.GetDecimal("TankTemperatureStart");
			this.TankTemperatureEnd = info.GetDecimal("TankTemperatureEnd");
			this.TankId = (Guid)info.GetValue("TankId", typeof(Guid));
			this.LevelStart = info.GetDecimal("LevelStart");
			this.LevelEnd = info.GetDecimal("LevelEnd");
			this.InvoiceTypeId = (Guid)info.GetValue("InvoiceTypeId", typeof(Guid));
			this.InvoiceVolumeNormalized = info.GetDecimal("InvoiceVolumeNormalized");
			this.InvoiceVolume = info.GetDecimal("InvoiceVolume");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("VolumeRealNormalized", this.VolumeRealNormalized, typeof(decimal));
			info.AddValue("VolumeReal", this.VolumeReal, typeof(decimal));
			info.AddValue("VolumeNormalized", this.VolumeNormalized, typeof(decimal));
			info.AddValue("Volume", this.Volume, typeof(decimal));
			info.AddValue("ViewId", this.ViewId, typeof(Guid?));
			info.AddValue("TransactionType", this.TransactionType, typeof(int));
			info.AddValue("TransactionTimeEnd", this.TransactionTimeEnd, typeof(DateTime));
			info.AddValue("TransactionTime", this.TransactionTime, typeof(DateTime));
			info.AddValue("TankTemperatureStart", this.TankTemperatureStart, typeof(decimal));
			info.AddValue("TankTemperatureEnd", this.TankTemperatureEnd, typeof(decimal));
			info.AddValue("TankId", this.TankId, typeof(Guid));
			info.AddValue("LevelStart", this.LevelStart, typeof(decimal));
			info.AddValue("LevelEnd", this.LevelEnd, typeof(decimal));
			info.AddValue("InvoiceTypeId", this.InvoiceTypeId, typeof(Guid));
			info.AddValue("InvoiceVolumeNormalized", this.InvoiceVolumeNormalized, typeof(decimal));
			info.AddValue("InvoiceVolume", this.InvoiceVolume, typeof(decimal));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class InvoicePrintView : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private decimal _volumeNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VolumeNormalized
		{
			get
			{
				return this._volumeNormalized;
			}
			set
			{
				if(this._volumeNormalized != value)
				{
					this._volumeNormalized = value;
					this.OnPropertyChanged("VolumeNormalized");
				}
			}
		}
		
		private decimal _volume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if(this._volume != value)
				{
					this._volume = value;
					this.OnPropertyChanged("Volume");
				}
			}
		}
		
		private string _vehicleNumber;
		[System.ComponentModel.DataAnnotations.StringLength(20)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string VehicleNumber
		{
			get
			{
				return this._vehicleNumber;
			}
			set
			{
				if(this._vehicleNumber != value)
				{
					this._vehicleNumber = value;
					this.OnPropertyChanged("VehicleNumber");
				}
			}
		}
		
		private decimal? _vatAmount;
		public virtual decimal? VatAmount
		{
			get
			{
				return this._vatAmount;
			}
			set
			{
				if(this._vatAmount != value)
				{
					this._vatAmount = value;
					this.OnPropertyChanged("VatAmount");
				}
			}
		}
		
		private decimal _unitPrice;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal UnitPrice
		{
			get
			{
				return this._unitPrice;
			}
			set
			{
				if(this._unitPrice != value)
				{
					this._unitPrice = value;
					this.OnPropertyChanged("UnitPrice");
				}
			}
		}
		
		private DateTime _transactionDate;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime TransactionDate
		{
			get
			{
				return this._transactionDate;
			}
			set
			{
				if(this._transactionDate != value)
				{
					this._transactionDate = value;
					this.OnPropertyChanged("TransactionDate");
				}
			}
		}
		
		private string _traderTin;
		[System.ComponentModel.DataAnnotations.StringLength(40)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string TraderTin
		{
			get
			{
				return this._traderTin;
			}
			set
			{
				if(this._traderTin != value)
				{
					this._traderTin = value;
					this.OnPropertyChanged("TraderTin");
				}
			}
		}
		
		private string _traderName;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string TraderName
		{
			get
			{
				return this._traderName;
			}
			set
			{
				if(this._traderName != value)
				{
					this._traderName = value;
					this.OnPropertyChanged("TraderName");
				}
			}
		}
		
		private decimal? _totalAmount;
		public virtual decimal? TotalAmount
		{
			get
			{
				return this._totalAmount;
			}
			set
			{
				if(this._totalAmount != value)
				{
					this._totalAmount = value;
					this.OnPropertyChanged("TotalAmount");
				}
			}
		}
		
		private decimal _temperature;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Temperature
		{
			get
			{
				return this._temperature;
			}
			set
			{
				if(this._temperature != value)
				{
					this._temperature = value;
					this.OnPropertyChanged("Temperature");
				}
			}
		}
		
		private string _series;
		[System.ComponentModel.DataAnnotations.StringLength(10)]
		public virtual string Series
		{
			get
			{
				return this._series;
			}
			set
			{
				if(this._series != value)
				{
					this._series = value;
					this.OnPropertyChanged("Series");
				}
			}
		}
		
		private int _number;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int Number
		{
			get
			{
				return this._number;
			}
			set
			{
				if(this._number != value)
				{
					this._number = value;
					this.OnPropertyChanged("Number");
				}
			}
		}
		
		private decimal? _nettoAmount;
		public virtual decimal? NettoAmount
		{
			get
			{
				return this._nettoAmount;
			}
			set
			{
				if(this._nettoAmount != value)
				{
					this._nettoAmount = value;
					this.OnPropertyChanged("NettoAmount");
				}
			}
		}
		
		private string _name;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Name
		{
			get
			{
				return this._name;
			}
			set
			{
				if(this._name != value)
				{
					this._name = value;
					this.OnPropertyChanged("Name");
				}
			}
		}
		
		private Guid _invoiceLineId;
		[System.ComponentModel.DataAnnotations.Required()]
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid InvoiceLineId
		{
			get
			{
				return this._invoiceLineId;
			}
			set
			{
				if(this._invoiceLineId != value)
				{
					this._invoiceLineId = value;
					this.OnPropertyChanged("InvoiceLineId");
				}
			}
		}
		
		private Guid _invoiceId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid InvoiceId
		{
			get
			{
				return this._invoiceId;
			}
			set
			{
				if(this._invoiceId != value)
				{
					this._invoiceId = value;
					this.OnPropertyChanged("InvoiceId");
				}
			}
		}
		
		private string _description;
		[System.ComponentModel.DataAnnotations.StringLength(100)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Description
		{
			get
			{
				return this._description;
			}
			set
			{
				if(this._description != value)
				{
					this._description = value;
					this.OnPropertyChanged("Description");
				}
			}
		}
		
		private string _companyTIN;
		public virtual string CompanyTIN
		{
			get
			{
				return this._companyTIN;
			}
			set
			{
				if(this._companyTIN != value)
				{
					this._companyTIN = value;
					this.OnPropertyChanged("CompanyTIN");
				}
			}
		}
		
		private string _companyTaxOffice;
		public virtual string CompanyTaxOffice
		{
			get
			{
				return this._companyTaxOffice;
			}
			set
			{
				if(this._companyTaxOffice != value)
				{
					this._companyTaxOffice = value;
					this.OnPropertyChanged("CompanyTaxOffice");
				}
			}
		}
		
		private string _companyPhone;
		public virtual string CompanyPhone
		{
			get
			{
				return this._companyPhone;
			}
			set
			{
				if(this._companyPhone != value)
				{
					this._companyPhone = value;
					this.OnPropertyChanged("CompanyPhone");
				}
			}
		}
		
		private string _companyOccupation;
		public virtual string CompanyOccupation
		{
			get
			{
				return this._companyOccupation;
			}
			set
			{
				if(this._companyOccupation != value)
				{
					this._companyOccupation = value;
					this.OnPropertyChanged("CompanyOccupation");
				}
			}
		}
		
		private string _companyName;
		public virtual string CompanyName
		{
			get
			{
				return this._companyName;
			}
			set
			{
				if(this._companyName != value)
				{
					this._companyName = value;
					this.OnPropertyChanged("CompanyName");
				}
			}
		}
		
		private string _companyFax;
		public virtual string CompanyFax
		{
			get
			{
				return this._companyFax;
			}
			set
			{
				if(this._companyFax != value)
				{
					this._companyFax = value;
					this.OnPropertyChanged("CompanyFax");
				}
			}
		}
		
		private string _companyCity;
		public virtual string CompanyCity
		{
			get
			{
				return this._companyCity;
			}
			set
			{
				if(this._companyCity != value)
				{
					this._companyCity = value;
					this.OnPropertyChanged("CompanyCity");
				}
			}
		}
		
		private string _companyAddress;
		public virtual string CompanyAddress
		{
			get
			{
				return this._companyAddress;
			}
			set
			{
				if(this._companyAddress != value)
				{
					this._companyAddress = value;
					this.OnPropertyChanged("CompanyAddress");
				}
			}
		}
		
		private string _code;
		[System.ComponentModel.DataAnnotations.StringLength(30)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual string Code
		{
			get
			{
				return this._code;
			}
			set
			{
				if(this._code != value)
				{
					this._code = value;
					this.OnPropertyChanged("Code");
				}
			}
		}
		
		private int _officialPumpNumber;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int OfficialPumpNumber
		{
			get
			{
				return this._officialPumpNumber;
			}
			set
			{
				if(this._officialPumpNumber != value)
				{
					this._officialPumpNumber = value;
					this.OnPropertyChanged("OfficialPumpNumber");
				}
			}
		}
		
		private int _officialNozzleNumber;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual int OfficialNozzleNumber
		{
			get
			{
				return this._officialNozzleNumber;
			}
			set
			{
				if(this._officialNozzleNumber != value)
				{
					this._officialNozzleNumber = value;
					this.OnPropertyChanged("OfficialNozzleNumber");
				}
			}
		}
		
		private string _invoiceSignature;
		[System.ComponentModel.DataAnnotations.StringLength(255)]
		public virtual string InvoiceSignature
		{
			get
			{
				return this._invoiceSignature;
			}
			set
			{
				if(this._invoiceSignature != value)
				{
					this._invoiceSignature = value;
					this.OnPropertyChanged("InvoiceSignature");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public InvoicePrintView()
		{
		}
		
		protected InvoicePrintView(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.VolumeNormalized = info.GetDecimal("VolumeNormalized");
			this.Volume = info.GetDecimal("Volume");
			this.VehicleNumber = info.GetString("VehicleNumber");
			this.VatAmount = (decimal?)info.GetValue("VatAmount", typeof(decimal?));
			this.UnitPrice = info.GetDecimal("UnitPrice");
			this.TransactionDate = (DateTime)info.GetValue("TransactionDate", typeof(DateTime));
			this.TraderTin = info.GetString("TraderTin");
			this.TraderName = info.GetString("TraderName");
			this.TotalAmount = (decimal?)info.GetValue("TotalAmount", typeof(decimal?));
			this.Temperature = info.GetDecimal("Temperature");
			this.Series = info.GetString("Series");
			this.Number = info.GetInt32("Number");
			this.NettoAmount = (decimal?)info.GetValue("NettoAmount", typeof(decimal?));
			this.Name = info.GetString("Name");
			this.InvoiceLineId = (Guid)info.GetValue("InvoiceLineId", typeof(Guid));
			this.InvoiceId = (Guid)info.GetValue("InvoiceId", typeof(Guid));
			this.Description = info.GetString("Description");
			this.CompanyTIN = info.GetString("CompanyTIN");
			this.CompanyTaxOffice = info.GetString("CompanyTaxOffice");
			this.CompanyPhone = info.GetString("CompanyPhone");
			this.CompanyOccupation = info.GetString("CompanyOccupation");
			this.CompanyName = info.GetString("CompanyName");
			this.CompanyFax = info.GetString("CompanyFax");
			this.CompanyCity = info.GetString("CompanyCity");
			this.CompanyAddress = info.GetString("CompanyAddress");
			this.Code = info.GetString("Code");
			this.OfficialPumpNumber = info.GetInt32("OfficialPumpNumber");
			this.OfficialNozzleNumber = info.GetInt32("OfficialNozzleNumber");
			this.InvoiceSignature = info.GetString("InvoiceSignature");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("VolumeNormalized", this.VolumeNormalized, typeof(decimal));
			info.AddValue("Volume", this.Volume, typeof(decimal));
			info.AddValue("VehicleNumber", this.VehicleNumber, typeof(string));
			info.AddValue("VatAmount", this.VatAmount, typeof(decimal?));
			info.AddValue("UnitPrice", this.UnitPrice, typeof(decimal));
			info.AddValue("TransactionDate", this.TransactionDate, typeof(DateTime));
			info.AddValue("TraderTin", this.TraderTin, typeof(string));
			info.AddValue("TraderName", this.TraderName, typeof(string));
			info.AddValue("TotalAmount", this.TotalAmount, typeof(decimal?));
			info.AddValue("Temperature", this.Temperature, typeof(decimal));
			info.AddValue("Series", this.Series, typeof(string));
			info.AddValue("Number", this.Number, typeof(int));
			info.AddValue("NettoAmount", this.NettoAmount, typeof(decimal?));
			info.AddValue("Name", this.Name, typeof(string));
			info.AddValue("InvoiceLineId", this.InvoiceLineId, typeof(Guid));
			info.AddValue("InvoiceId", this.InvoiceId, typeof(Guid));
			info.AddValue("Description", this.Description, typeof(string));
			info.AddValue("CompanyTIN", this.CompanyTIN, typeof(string));
			info.AddValue("CompanyTaxOffice", this.CompanyTaxOffice, typeof(string));
			info.AddValue("CompanyPhone", this.CompanyPhone, typeof(string));
			info.AddValue("CompanyOccupation", this.CompanyOccupation, typeof(string));
			info.AddValue("CompanyName", this.CompanyName, typeof(string));
			info.AddValue("CompanyFax", this.CompanyFax, typeof(string));
			info.AddValue("CompanyCity", this.CompanyCity, typeof(string));
			info.AddValue("CompanyAddress", this.CompanyAddress, typeof(string));
			info.AddValue("Code", this.Code, typeof(string));
			info.AddValue("OfficialPumpNumber", this.OfficialPumpNumber, typeof(int));
			info.AddValue("OfficialNozzleNumber", this.OfficialNozzleNumber, typeof(int));
			info.AddValue("InvoiceSignature", this.InvoiceSignature, typeof(string));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
namespace ASFuelControl.Data	
{
	[System.Serializable()]
	public partial class TankSaleView : IDataErrorInfo, INotifyPropertyChanged, System.Runtime.Serialization.ISerializable
	{
		private decimal _volumeNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal VolumeNormalized
		{
			get
			{
				return this._volumeNormalized;
			}
			set
			{
				if(this._volumeNormalized != value)
				{
					this._volumeNormalized = value;
					this.OnPropertyChanged("VolumeNormalized");
				}
			}
		}
		
		private decimal _volume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal Volume
		{
			get
			{
				return this._volume;
			}
			set
			{
				if(this._volume != value)
				{
					this._volume = value;
					this.OnPropertyChanged("Volume");
				}
			}
		}
		
		private Guid? _viewId;
		[System.ComponentModel.DataAnnotations.Key()]
		public virtual Guid? ViewId
		{
			get
			{
				return this._viewId;
			}
			set
			{
				if(this._viewId != value)
				{
					this._viewId = value;
					this.OnPropertyChanged("ViewId");
				}
			}
		}
		
		private decimal _unitPrice;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal UnitPrice
		{
			get
			{
				return this._unitPrice;
			}
			set
			{
				if(this._unitPrice != value)
				{
					this._unitPrice = value;
					this.OnPropertyChanged("UnitPrice");
				}
			}
		}
		
		private DateTime _transactionTimeStamp;
		[System.ComponentModel.DataAnnotations.DataType(System.ComponentModel.DataAnnotations.DataType.DateTime)]
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual DateTime TransactionTimeStamp
		{
			get
			{
				return this._transactionTimeStamp;
			}
			set
			{
				if(this._transactionTimeStamp != value)
				{
					this._transactionTimeStamp = value;
					this.OnPropertyChanged("TransactionTimeStamp");
				}
			}
		}
		
		private decimal _totalPrice;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal TotalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if(this._totalPrice != value)
				{
					this._totalPrice = value;
					this.OnPropertyChanged("TotalPrice");
				}
			}
		}
		
		private Guid _tankSaleId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankSaleId
		{
			get
			{
				return this._tankSaleId;
			}
			set
			{
				if(this._tankSaleId != value)
				{
					this._tankSaleId = value;
					this.OnPropertyChanged("TankSaleId");
				}
			}
		}
		
		private Guid _tankId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid TankId
		{
			get
			{
				return this._tankId;
			}
			set
			{
				if(this._tankId != value)
				{
					this._tankId = value;
					this.OnPropertyChanged("TankId");
				}
			}
		}
		
		private decimal _startVolumeNormalized;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal StartVolumeNormalized
		{
			get
			{
				return this._startVolumeNormalized;
			}
			set
			{
				if(this._startVolumeNormalized != value)
				{
					this._startVolumeNormalized = value;
					this.OnPropertyChanged("StartVolumeNormalized");
				}
			}
		}
		
		private decimal _startVolume;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal StartVolume
		{
			get
			{
				return this._startVolume;
			}
			set
			{
				if(this._startVolume != value)
				{
					this._startVolume = value;
					this.OnPropertyChanged("StartVolume");
				}
			}
		}
		
		private decimal? _startTemperature;
		public virtual decimal? StartTemperature
		{
			get
			{
				return this._startTemperature;
			}
			set
			{
				if(this._startTemperature != value)
				{
					this._startTemperature = value;
					this.OnPropertyChanged("StartTemperature");
				}
			}
		}
		
		private decimal _startLevel;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal StartLevel
		{
			get
			{
				return this._startLevel;
			}
			set
			{
				if(this._startLevel != value)
				{
					this._startLevel = value;
					this.OnPropertyChanged("StartLevel");
				}
			}
		}
		
		private Guid _salesTransactionId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid SalesTransactionId
		{
			get
			{
				return this._salesTransactionId;
			}
			set
			{
				if(this._salesTransactionId != value)
				{
					this._salesTransactionId = value;
					this.OnPropertyChanged("SalesTransactionId");
				}
			}
		}
		
		private Guid _nozzleId;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual Guid NozzleId
		{
			get
			{
				return this._nozzleId;
			}
			set
			{
				if(this._nozzleId != value)
				{
					this._nozzleId = value;
					this.OnPropertyChanged("NozzleId");
				}
			}
		}
		
		private decimal _fuelDensity;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal FuelDensity
		{
			get
			{
				return this._fuelDensity;
			}
			set
			{
				if(this._fuelDensity != value)
				{
					this._fuelDensity = value;
					this.OnPropertyChanged("FuelDensity");
				}
			}
		}
		
		private decimal? _endVolumeNormalized;
		public virtual decimal? EndVolumeNormalized
		{
			get
			{
				return this._endVolumeNormalized;
			}
			set
			{
				if(this._endVolumeNormalized != value)
				{
					this._endVolumeNormalized = value;
					this.OnPropertyChanged("EndVolumeNormalized");
				}
			}
		}
		
		private decimal? _endVolume;
		public virtual decimal? EndVolume
		{
			get
			{
				return this._endVolume;
			}
			set
			{
				if(this._endVolume != value)
				{
					this._endVolume = value;
					this.OnPropertyChanged("EndVolume");
				}
			}
		}
		
		private decimal _endTemperature;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual decimal EndTemperature
		{
			get
			{
				return this._endTemperature;
			}
			set
			{
				if(this._endTemperature != value)
				{
					this._endTemperature = value;
					this.OnPropertyChanged("EndTemperature");
				}
			}
		}
		
		private decimal? _endLevel;
		public virtual decimal? EndLevel
		{
			get
			{
				return this._endLevel;
			}
			set
			{
				if(this._endLevel != value)
				{
					this._endLevel = value;
					this.OnPropertyChanged("EndLevel");
				}
			}
		}
		
		private long _cRC;
		[System.ComponentModel.DataAnnotations.Required()]
		public virtual long CRC
		{
			get
			{
				return this._cRC;
			}
			set
			{
				if(this._cRC != value)
				{
					this._cRC = value;
					this.OnPropertyChanged("CRC");
				}
			}
		}
		
		#region IDataErrorInfo members
		
		private string error = string.Empty;
		public string Error
		{
			get
			{
				return this.error;
			}
		}
		
		public string this[string propertyName]
		{
			get
			{
				this.ValidatePropertyInternal(propertyName, ref this.error);
		
				return this.error;
			}
		}
		
		protected virtual void ValidatePropertyInternal(string propertyName, ref string error)
		{
		    this.ValidateProperty(propertyName, ref error);
		}
		
		// Please implement this method in a partial class in order to provide the error message depending on each of the properties.
		partial void ValidateProperty(string propertyName, ref string error);
		
		#endregion
		
		#region INotifyPropertyChanged members
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void OnPropertyChanged(string propertyName)
		{
			if(this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		#endregion
		
		#region ISerializable Implementation
		
		public TankSaleView()
		{
		}
		
		protected TankSaleView(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			this.VolumeNormalized = info.GetDecimal("VolumeNormalized");
			this.Volume = info.GetDecimal("Volume");
			this.ViewId = (Guid?)info.GetValue("ViewId", typeof(Guid?));
			this.UnitPrice = info.GetDecimal("UnitPrice");
			this.TransactionTimeStamp = (DateTime)info.GetValue("TransactionTimeStamp", typeof(DateTime));
			this.TotalPrice = info.GetDecimal("TotalPrice");
			this.TankSaleId = (Guid)info.GetValue("TankSaleId", typeof(Guid));
			this.TankId = (Guid)info.GetValue("TankId", typeof(Guid));
			this.StartVolumeNormalized = info.GetDecimal("StartVolumeNormalized");
			this.StartVolume = info.GetDecimal("StartVolume");
			this.StartTemperature = (decimal?)info.GetValue("StartTemperature", typeof(decimal?));
			this.StartLevel = info.GetDecimal("StartLevel");
			this.SalesTransactionId = (Guid)info.GetValue("SalesTransactionId", typeof(Guid));
			this.NozzleId = (Guid)info.GetValue("NozzleId", typeof(Guid));
			this.FuelDensity = info.GetDecimal("FuelDensity");
			this.EndVolumeNormalized = (decimal?)info.GetValue("EndVolumeNormalized", typeof(decimal?));
			this.EndVolume = (decimal?)info.GetValue("EndVolume", typeof(decimal?));
			this.EndTemperature = info.GetDecimal("EndTemperature");
			this.EndLevel = (decimal?)info.GetValue("EndLevel", typeof(decimal?));
			this.CRC = info.GetInt64("CRC");
			CustomizeDeserializationProcess(info, context);
		}
		
		public virtual void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
		{
			info.AddValue("VolumeNormalized", this.VolumeNormalized, typeof(decimal));
			info.AddValue("Volume", this.Volume, typeof(decimal));
			info.AddValue("ViewId", this.ViewId, typeof(Guid?));
			info.AddValue("UnitPrice", this.UnitPrice, typeof(decimal));
			info.AddValue("TransactionTimeStamp", this.TransactionTimeStamp, typeof(DateTime));
			info.AddValue("TotalPrice", this.TotalPrice, typeof(decimal));
			info.AddValue("TankSaleId", this.TankSaleId, typeof(Guid));
			info.AddValue("TankId", this.TankId, typeof(Guid));
			info.AddValue("StartVolumeNormalized", this.StartVolumeNormalized, typeof(decimal));
			info.AddValue("StartVolume", this.StartVolume, typeof(decimal));
			info.AddValue("StartTemperature", this.StartTemperature, typeof(decimal?));
			info.AddValue("StartLevel", this.StartLevel, typeof(decimal));
			info.AddValue("SalesTransactionId", this.SalesTransactionId, typeof(Guid));
			info.AddValue("NozzleId", this.NozzleId, typeof(Guid));
			info.AddValue("FuelDensity", this.FuelDensity, typeof(decimal));
			info.AddValue("EndVolumeNormalized", this.EndVolumeNormalized, typeof(decimal?));
			info.AddValue("EndVolume", this.EndVolume, typeof(decimal?));
			info.AddValue("EndTemperature", this.EndTemperature, typeof(decimal));
			info.AddValue("EndLevel", this.EndLevel, typeof(decimal?));
			info.AddValue("CRC", this.CRC, typeof(long));
			CustomizeSerializationProcess(info, context);
		}
		
		partial void CustomizeSerializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		partial void CustomizeDeserializationProcess(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
		#endregion
	}
}
#pragma warning restore 1591
