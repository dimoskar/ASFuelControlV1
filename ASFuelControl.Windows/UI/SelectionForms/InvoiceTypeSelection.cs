using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ASFuelControl.Windows.UI.SelectionForms
{
    public partial class InvoiceTypeSelection : SelectionBaseForm
    {
        public bool ReplacementTypes { set; get; }
        public Guid ToBeReplacedTypeId { set; get; }
        public bool CancelationTypes { set; get; }
        public bool FilterAdminView { set; get; }
        public bool HideCancelationTypes { set; get; }
        public bool DispenserTypes { set; get; }
        public Guid SelectedInvoiceTypeId { set; get; }
        public Guid[] AllowedInvoiceTypes { set; get; }

        public InvoiceTypeSelection()
        {
            InitializeComponent();

            Telerik.WinControls.UI.GridViewTextBoxColumn nameColumn = new Telerik.WinControls.UI.GridViewTextBoxColumn();
            nameColumn.FieldName = "Description";
            nameColumn.HeaderText = "Τύπος Παραστατικού";
            nameColumn.IsAutoGenerated = false;
            nameColumn.Name = "Description";
            nameColumn.Width = 350;

            this.dataRadGridView.Columns.Add(nameColumn);
            this.dataRadGridView.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;
        }

        protected override void DataLoaded()
        {
            if (this.SelectedInvoiceTypeId == Guid.Empty)
                return;

            var it = this.TheSource.List.OfType<ViewModels.InvoiceTypeViewModel>().FirstOrDefault(i => i.InvoiceTypeId == this.SelectedInvoiceTypeId);
            if (it == null)
                return;
            var pos = this.TheSource.List.IndexOf(it);
            if (pos >= 0)
                this.TheSource.Position = pos;
        }

        protected override object SearchData(string filter)
        {
            Data.DatabaseModel db = new Data.DatabaseModel(Properties.Settings.Default.DBConnection);

            bool isAdmin = false;
            var user = db.ApplicationUsers.SingleOrDefault(a => a.ApplicationUserId == Data.DatabaseModel.UserLoggedIn);
            if (user != null && user.UserLevel == 0)
                isAdmin = true;

            Data.InvoiceType toBeReplacedType = null;
            if(ToBeReplacedTypeId != Guid.Empty)
            {
                toBeReplacedType = db.InvoiceTypes.SingleOrDefault(i => i.InvoiceTypeId == this.ToBeReplacedTypeId);
            }
            var q = db.InvoiceTypes.Where(i=>!i.Invalidated.HasValue || !i.Invalidated.Value);
            if (filter != null && filter != "")
            {
                q = q.Where(t =>
                    t.Description.Contains(filter) ||
                    t.Abbreviation.Contains(filter) 
                );
            }
            if (this.ReplacementTypes && toBeReplacedType != null)
            {
                q = q.Where(i => 
                        (!i.IsInternal.HasValue || !i.IsInternal.Value) && 
                        i.TransactionType == toBeReplacedType.TransactionType && 
                        i.InvoiceTypeId != this.ToBeReplacedTypeId && 
                        (!i.IsCancelation.HasValue || !i.IsCancelation.Value)
                    );
            }
            if(this.AllowedInvoiceTypes != null)
            {
                q = q.Where(i => this.AllowedInvoiceTypes.Contains(i.InvoiceTypeId));
            }
            if (this.CancelationTypes)
                q = q.Where(i => i.IsCancelation.HasValue && i.IsCancelation.Value);
            else if(this.HideCancelationTypes)
                q = q.Where(i => !i.IsCancelation.HasValue || !i.IsCancelation.Value);
            if (!isAdmin && this.FilterAdminView)
                q = q.Where(i => !i.AdminView.HasValue || !i.AdminView.Value);
            if (this.DispenserTypes)
            {
                q = q.Where(i => i.DispenserType.HasValue && i.DispenserType.Value);
                q = q.Where(i => (!i.Invalidated.HasValue || !i.Invalidated.Value));
            }
            var qa = q.OrderBy(i=>i.Description).ToArray();
            List<ViewModels.InvoiceTypeViewModel> list = new List<ViewModels.InvoiceTypeViewModel>();
            foreach (var entity in qa)
            {
                ViewModels.InvoiceTypeViewModel tvm = new ViewModels.InvoiceTypeViewModel();
                tvm.Load(db, entity.InvoiceTypeId);
                list.Add(tvm);
            }
            db.Dispose();

            return list.ToArray();
        }
    }
}
