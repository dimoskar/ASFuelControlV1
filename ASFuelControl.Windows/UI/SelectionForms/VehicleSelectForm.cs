using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ASFuelControl.Windows.UI.SelectionForms
{
    public partial class VehicleSelectForm : SelectionBaseForm
    {
        public VehicleSelectForm()
        {
            InitializeComponent();
            Telerik.WinControls.UI.GridViewTextBoxColumn nameColumn = new Telerik.WinControls.UI.GridViewTextBoxColumn();
            nameColumn.FieldName = "TraderName";
            nameColumn.HeaderText = "Συναλλασσόμενος";
            nameColumn.IsAutoGenerated = false;
            nameColumn.Name = "TraderName";
            nameColumn.Width = 250;
            nameColumn.ReadOnly = true;

            Telerik.WinControls.UI.GridViewTextBoxColumn afmColumn = new Telerik.WinControls.UI.GridViewTextBoxColumn();
            afmColumn.FieldName = "TraderTaxRegistration";
            afmColumn.HeaderText = "Α.Φ.Μ.";
            afmColumn.IsAutoGenerated = false;
            afmColumn.Name = "TraderTaxRegistration";
            afmColumn.Width = 80;
            afmColumn.ReadOnly = true;

            Telerik.WinControls.UI.GridViewTextBoxColumn plateColumn = new Telerik.WinControls.UI.GridViewTextBoxColumn();
            plateColumn.FieldName = "PlateNumber";
            plateColumn.HeaderText = "Πινακίδες";
            plateColumn.IsAutoGenerated = false;
            plateColumn.Name = "PlateNumber";
            plateColumn.Width = 80;
            plateColumn.ReadOnly = true;

            Telerik.WinControls.UI.GridViewTextBoxColumn delColumn = new Telerik.WinControls.UI.GridViewTextBoxColumn();
            delColumn.FieldName = "TraderDeliveryAddress";
            delColumn.HeaderText = "Παράδοση";
            delColumn.IsAutoGenerated = false;
            delColumn.Name = "TraderDeliveryAddress";
            delColumn.Width = 100;

            Telerik.WinControls.UI.GridViewDecimalColumn odometerColumn = new Telerik.WinControls.UI.GridViewDecimalColumn();
            odometerColumn.FieldName = "Odometer";
            odometerColumn.HeaderText = "Χιλιόμετρα";
            odometerColumn.IsAutoGenerated = false;
            odometerColumn.Name = "Odometer";
            odometerColumn.DecimalPlaces = 0;
            odometerColumn.Maximum = 999999999;
            odometerColumn.Minimum = 0;
            odometerColumn.Width = 100;

            Telerik.WinControls.UI.GridViewCommandColumn editColumn = new Telerik.WinControls.UI.GridViewCommandColumn();
            editColumn.HeaderText = "";
            editColumn.IsAutoGenerated = false;
            editColumn.Name = "EditColumn";
            editColumn.Width = 30;
            editColumn.DefaultText = "...";
            editColumn.UseDefaultText = true;

            this.dataRadGridView.AllowEditRow = true;
            this.dataRadGridView.ReadOnly = false;
            this.dataRadGridView.Columns.Add(nameColumn);
            this.dataRadGridView.Columns.Add(afmColumn);
            this.dataRadGridView.Columns.Add(plateColumn);
            this.dataRadGridView.Columns.Add(delColumn);
            this.dataRadGridView.Columns.Add(odometerColumn);
            this.dataRadGridView.Columns.Add(editColumn);
            this.dataRadGridView.AutoSizeColumnsMode = Telerik.WinControls.UI.GridViewAutoSizeColumnsMode.Fill;
            this.dataRadGridView.CellClick += DataRadGridView_CellClick;
        }

        private void DataRadGridView_CellClick(object sender, Telerik.WinControls.UI.GridViewCellEventArgs e)
        {
            if (e.Column.Name != "EditColumn")
                return;
            ViewModels.VehicleViewModel tvm = e.Row.DataBoundItem as ViewModels.VehicleViewModel;
            if (tvm == null)
                return;
            using (Forms.TraderForm tf = new Forms.TraderForm())
            {
                tf.LoadTrader(tvm.TraderId);
                tf.ShowDialog(this);
                if (tf.SelectedCustomerId != Guid.Empty)
                    this.LoadDataById(tf.SelectedCustomerId);
            }
        }

        protected override object SearchData(string filter)
        {
            Data.DatabaseModel db = new Data.DatabaseModel(Properties.Settings.Default.DBConnection);

            var q = db.Vehicles;
            if (filter != null && filter != "")
            {
                q = q.Where(t =>
                    t.Trader.Name.Contains(filter) ||
                    t.Trader.TaxRegistrationNumber.Contains(filter) ||
                    t.Trader.DeliveryAddress.Contains(filter) ||
                    t.PlateNumber.Contains(filter)
                );
            }
            var qa = q.OrderBy(t => t.Trader.Name).ThenBy(v=>v.PlateNumber).ToArray();
            List<ViewModels.VehicleViewModel> list = new List<ViewModels.VehicleViewModel>();
            foreach (var entity in qa)
            {
                ViewModels.VehicleViewModel tvm = new ViewModels.VehicleViewModel();
                tvm.Load(db, entity.VehicleId);
                tvm.TraderName = entity.Trader.Name;
                tvm.TraderTaxRegistration = entity.Trader.TaxRegistrationNumber;
                tvm.TraderDeliveryAddress = entity.Trader.DeliveryAddress;
                tvm.DefaultInvoiceTypeId = entity.Trader.InvoiceTypeId.HasValue ? entity.Trader.InvoiceTypeId.Value : Guid.Empty;
                list.Add(tvm);
            }
            db.Dispose();

            return list.ToArray();
        }

        protected override object SearchData(Guid traderId)
        {
            Data.DatabaseModel db = new Data.DatabaseModel(Properties.Settings.Default.DBConnection);

            var q = db.Vehicles.Where(t => t.TraderId == traderId);
            var qa = q.ToArray();
            List<ViewModels.VehicleViewModel> list = new List<ViewModels.VehicleViewModel>();
            foreach (var entity in qa)
            {
                ViewModels.VehicleViewModel tvm = new ViewModels.VehicleViewModel();
                tvm.Load(db, entity.VehicleId);
                tvm.TraderName = entity.Trader.Name;
                tvm.TraderTaxRegistration = entity.Trader.TaxRegistrationNumber;
                tvm.DefaultInvoiceTypeId = entity.Trader.InvoiceTypeId.HasValue ? entity.Trader.InvoiceTypeId.Value : Guid.Empty;
                list.Add(tvm);
            }
            db.Dispose();

            return list.ToArray();
        }

        private void radButton2_Click(object sender, EventArgs e)
        {
            using (Forms.TraderForm tf = new Forms.TraderForm())
            {
                tf.CreateCustomer();
                tf.ShowDialog(this);
                if (tf.SelectedCustomerId != Guid.Empty)
                    this.LoadDataById(tf.SelectedCustomerId);
            }
        }

        private void radButton3_Click(object sender, EventArgs e)
        {
            using (Forms.TraderForm tf = new Forms.TraderForm())
            {
                tf.CreateSuplier();
                tf.ShowDialog(this);
                if (tf.SelectedCustomerId != Guid.Empty)
                    this.LoadDataById(tf.SelectedCustomerId);
            }
        }
    }
}
