//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using Telerik Data Access template.
// Code is generated on: 14/1/2022 2:30:09 πμ
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using Telerik.OpenAccess;
using Telerik.OpenAccess.Metadata;
using Telerik.OpenAccess.Data.Common;
using Telerik.OpenAccess.Metadata.Fluent;
using Telerik.OpenAccess.Metadata.Fluent.Advanced;

namespace ASFuelControl.Data
{
    public partial class DatabaseModel : OpenAccessContext
    {

        private static BackendConfiguration backend = GetBackendConfiguration();
        private static MetadataSource metadataSource = new DatabaseModelMetadataSource();
        private static readonly MetadataContainer metadataContainer = metadataSource.GetModel();
        private static string connectionString = @"ASFuelControlDB_Connection";

        public DatabaseModel() :
            base(connectionString, backend, metadataContainer)
        {
            OnCreated();
        }

        public DatabaseModel(BackendConfiguration backendConfiguration) :
            base(connectionString, backendConfiguration, metadataContainer)
        {
          OnCreated();
        }

        public DatabaseModel(string connection) :
            base(connection, backend, metadataContainer)
        {
          OnCreated();
        }

        public DatabaseModel(string connection, string cacheKey) :
            base(connection, cacheKey, backend, metadataContainer)
        {
            OnCreated();
        }

        public DatabaseModel(string connection, MetadataSource metadataSource) :
            base(connection, backend, metadataSource)
        {
          OnCreated();
        }

        public DatabaseModel(string connection, BackendConfiguration backendConfiguration, MetadataSource metadataSource) :
            base(connection, backendConfiguration, metadataSource)
        {
          OnCreated();
        }
        public DatabaseModel(string connection, string cacheKey, BackendConfiguration backendConfiguration, MetadataSource metadataSource) :
            base(connection, cacheKey, backendConfiguration, metadataSource)
        {
          OnCreated();
        }

        public IQueryable<Vehicle> Vehicles
        {
            get
            {
                return this.GetAll<Vehicle>();
            }
        }

        public IQueryable<UsagePeriod> UsagePeriods
        {
            get
            {
                return this.GetAll<UsagePeriod>();
            }
        }

        public IQueryable<Trader> Traders
        {
            get
            {
                return this.GetAll<Trader>();
            }
        }

        public IQueryable<TitrimetryLevel> TitrimetryLevels
        {
            get
            {
                return this.GetAll<TitrimetryLevel>();
            }
        }

        public IQueryable<Titrimetry> Titrimetries
        {
            get
            {
                return this.GetAll<Titrimetry>();
            }
        }

        public IQueryable<TankUsagePeriod> TankUsagePeriods
        {
            get
            {
                return this.GetAll<TankUsagePeriod>();
            }
        }

        public IQueryable<TankSetting> TankSettings
        {
            get
            {
                return this.GetAll<TankSetting>();
            }
        }

        public IQueryable<TankSale> TankSales
        {
            get
            {
                return this.GetAll<TankSale>();
            }
        }

        public IQueryable<TankPrice> TankPrices
        {
            get
            {
                return this.GetAll<TankPrice>();
            }
        }

        public IQueryable<TankFilling> TankFillings
        {
            get
            {
                return this.GetAll<TankFilling>();
            }
        }

        public IQueryable<Tank> Tanks
        {
            get
            {
                return this.GetAll<Tank>();
            }
        }

        public IQueryable<SystemEventDatum> SystemEventData
        {
            get
            {
                return this.GetAll<SystemEventDatum>();
            }
        }

        public IQueryable<SystemEvent> SystemEvents
        {
            get
            {
                return this.GetAll<SystemEvent>();
            }
        }

        public IQueryable<SendLog> SendLogs
        {
            get
            {
                return this.GetAll<SendLog>();
            }
        }

        public IQueryable<SalesTransaction> SalesTransactions
        {
            get
            {
                return this.GetAll<SalesTransaction>();
            }
        }

        public IQueryable<PriceListTimeSpan> PriceListTimeSpans
        {
            get
            {
                return this.GetAll<PriceListTimeSpan>();
            }
        }

        public IQueryable<PriceList> PriceLists
        {
            get
            {
                return this.GetAll<PriceList>();
            }
        }

        public IQueryable<PendingSend> PendingSends
        {
            get
            {
                return this.GetAll<PendingSend>();
            }
        }

        public IQueryable<Option> Options
        {
            get
            {
                return this.GetAll<Option>();
            }
        }

        public IQueryable<NozzleUsagePeriod> NozzleUsagePeriods
        {
            get
            {
                return this.GetAll<NozzleUsagePeriod>();
            }
        }

        public IQueryable<NozzlePriceList> NozzlePriceLists
        {
            get
            {
                return this.GetAll<NozzlePriceList>();
            }
        }

        public IQueryable<NozzleFlow> NozzleFlows
        {
            get
            {
                return this.GetAll<NozzleFlow>();
            }
        }

        public IQueryable<Nozzle> Nozzles
        {
            get
            {
                return this.GetAll<Nozzle>();
            }
        }

        public IQueryable<Normalization> Normalizations
        {
            get
            {
                return this.GetAll<Normalization>();
            }
        }

        public IQueryable<InvoiceType> InvoiceTypes
        {
            get
            {
                return this.GetAll<InvoiceType>();
            }
        }

        public IQueryable<InvoiceRelation> InvoiceRelations
        {
            get
            {
                return this.GetAll<InvoiceRelation>();
            }
        }

        public IQueryable<InvoicePrint> InvoicePrints
        {
            get
            {
                return this.GetAll<InvoicePrint>();
            }
        }

        public IQueryable<InvoiceLine> InvoiceLines
        {
            get
            {
                return this.GetAll<InvoiceLine>();
            }
        }

        public IQueryable<InvoiceForm> InvoiceForms
        {
            get
            {
                return this.GetAll<InvoiceForm>();
            }
        }

        public IQueryable<Invoice> Invoices
        {
            get
            {
                return this.GetAll<Invoice>();
            }
        }

        public IQueryable<FuelTypePrice> FuelTypePrices
        {
            get
            {
                return this.GetAll<FuelTypePrice>();
            }
        }

        public IQueryable<FuelType> FuelTypes
        {
            get
            {
                return this.GetAll<FuelType>();
            }
        }

        public IQueryable<DispenserType> DispenserTypes
        {
            get
            {
                return this.GetAll<DispenserType>();
            }
        }

        public IQueryable<DispenserSetting> DispenserSettings
        {
            get
            {
                return this.GetAll<DispenserSetting>();
            }
        }

        public IQueryable<DispenserProtocol> DispenserProtocols
        {
            get
            {
                return this.GetAll<DispenserProtocol>();
            }
        }

        public IQueryable<Dispenser> Dispensers
        {
            get
            {
                return this.GetAll<Dispenser>();
            }
        }

        public IQueryable<CommunicationController> CommunicationControllers
        {
            get
            {
                return this.GetAll<CommunicationController>();
            }
        }

        public IQueryable<Balance> Balances
        {
            get
            {
                return this.GetAll<Balance>();
            }
        }

        public IQueryable<AtgProbeType> AtgProbeTypes
        {
            get
            {
                return this.GetAll<AtgProbeType>();
            }
        }

        public IQueryable<AtgProbeProtocol> AtgProbeProtocols
        {
            get
            {
                return this.GetAll<AtgProbeProtocol>();
            }
        }

        public IQueryable<ApplicationUserLoggon> ApplicationUserLoggons
        {
            get
            {
                return this.GetAll<ApplicationUserLoggon>();
            }
        }

        public IQueryable<ApplicationUser> ApplicationUsers
        {
            get
            {
                return this.GetAll<ApplicationUser>();
            }
        }

        public IQueryable<AlertDefinition> AlertDefinitions
        {
            get
            {
                return this.GetAll<AlertDefinition>();
            }
        }

        public IQueryable<TankFillingView> TankFillingViews
        {
            get
            {
                return this.GetAll<TankFillingView>();
            }
        }

        public IQueryable<SalesView> SalesViews
        {
            get
            {
                return this.GetAll<SalesView>();
            }
        }

        public IQueryable<Shift> Shifts
        {
            get
            {
                return this.GetAll<Shift>();
            }
        }

        public IQueryable<InvoiceGroupView> InvoiceGroupViews
        {
            get
            {
                return this.GetAll<InvoiceGroupView>();
            }
        }

        public IQueryable<TankLevelStartView> TankLevelStartViews
        {
            get
            {
                return this.GetAll<TankLevelStartView>();
            }
        }

        public IQueryable<TankLevelEndView> TankLevelEndViews
        {
            get
            {
                return this.GetAll<TankLevelEndView>();
            }
        }

        public IQueryable<TankFillingInvoiceView> TankFillingInvoiceViews
        {
            get
            {
                return this.GetAll<TankFillingInvoiceView>();
            }
        }

        public IQueryable<InvoicePrintView> InvoicePrintViews
        {
            get
            {
                return this.GetAll<InvoicePrintView>();
            }
        }

        public IQueryable<TankSaleView> TankSaleViews
        {
            get
            {
                return this.GetAll<TankSaleView>();
            }
        }

        public IQueryable<OutdoorPaymentTerminalTimeSchedule> OutdoorPaymentTerminalTimeSchedules
        {
            get
            {
                return this.GetAll<OutdoorPaymentTerminalTimeSchedule>();
            }
        }

        public IQueryable<OutdoorPaymentTerminalSchedule> OutdoorPaymentTerminalSchedules
        {
            get
            {
                return this.GetAll<OutdoorPaymentTerminalSchedule>();
            }
        }

        public IQueryable<OutdoorPaymentTerminalNozzle> OutdoorPaymentTerminalNozzles
        {
            get
            {
                return this.GetAll<OutdoorPaymentTerminalNozzle>();
            }
        }

        public IQueryable<OutdoorPaymentTerminal> OutdoorPaymentTerminals
        {
            get
            {
                return this.GetAll<OutdoorPaymentTerminal>();
            }
        }

        public IQueryable<OutdoorPaymentTerminalController> OutdoorPaymentTerminalControllers
        {
            get
            {
                return this.GetAll<OutdoorPaymentTerminalController>();
            }
        }

        public IQueryable<TankCheck> TankChecks
        {
            get
            {
                return this.GetAll<TankCheck>();
            }
        }

        public IQueryable<ChangeLog> ChangeLogs
        {
            get
            {
                return this.GetAll<ChangeLog>();
            }
        }

        public IQueryable<SaleDataView> SaleDataViews
        {
            get
            {
                return this.GetAll<SaleDataView>();
            }
        }

        public IQueryable<DeviceSetting> DeviceSettings
        {
            get
            {
                return this.GetAll<DeviceSetting>();
            }
        }

        public IQueryable<FinancialTransaction> FinancialTransactions
        {
            get
            {
                return this.GetAll<FinancialTransaction>();
            }
        }

        public IQueryable<OilCompany> OilCompanies
        {
            get
            {
                return this.GetAll<OilCompany>();
            }
        }

        public IQueryable<FleetManagmentSchedule> FleetManagmentSchedules
        {
            get
            {
                return this.GetAll<FleetManagmentSchedule>();
            }
        }

        public IQueryable<FleetManagmentCotroller> FleetManagmentCotrollers
        {
            get
            {
                return this.GetAll<FleetManagmentCotroller>();
            }
        }

        public IQueryable<FleetManagerDispenser> FleetManagerDispensers
        {
            get
            {
                return this.GetAll<FleetManagerDispenser>();
            }
        }

        public IQueryable<InvoiceCatalogView> InvoiceCatalogViews
        {
            get
            {
                return this.GetAll<InvoiceCatalogView>();
            }
        }

        public IQueryable<FinTransaction> FinTransactions
        {
            get
            {
                return this.GetAll<FinTransaction>();
            }
        }

        public IQueryable<InvoiceTypeTransform> InvoiceTypeTransforms
        {
            get
            {
                return this.GetAll<InvoiceTypeTransform>();
            }
        }

        public IQueryable<InvoiceLineRelation> InvoiceLineRelations
        {
            get
            {
                return this.GetAll<InvoiceLineRelation>();
            }
        }

        public IQueryable<MyDataInvoice> MyDataInvoices
        {
            get
            {
                return this.GetAll<MyDataInvoice>();
            }
        }

        public IQueryable<Country> Countries
        {
            get
            {
                return this.GetAll<Country>();
            }
        }

        public static BackendConfiguration GetBackendConfiguration()
        {
            BackendConfiguration backend = new BackendConfiguration();
            backend.Backend = "MsSql";
            backend.ProviderName = "System.Data.SqlClient";
            backend.Runtime.CommandTimeout = 100;
            backend.Logging.LogErrorsToWindowsEventLog = false;
            backend.Logging.LogEvents = LoggingLevel.Errors;
            backend.Logging.LogEventsToSysOut = false;
            backend.Logging.LogEventsToTrace = false;
            backend.Logging.MetricStoreSnapshotInterval = 0;
            backend.ConnectionPool.ActiveConnectionTimeout = 100;

            CustomizeBackendConfiguration(ref backend);
            return backend;
        }

        static partial void CustomizeBackendConfiguration(ref BackendConfiguration config);
        partial void OnCreated();
    }
}

namespace ASFuelControl.Data
{
    public partial class Vehicle : EntityBase, INotifyPropertyChanged {

        private System.Guid _VehicleId;

        private string _PlateNumber;

        private System.Guid _TraderId;

        private string _CardId;

        private Trader _Trader;

        private IList<Invoice> _Invoices;

        public Vehicle()
        {
            this._Invoices = new List<Invoice>();
            OnCreated();
        }

        public virtual System.Guid VehicleId
        {
            get
            {
                return this._VehicleId;
            }
            set
            {
                if (this._VehicleId != value)
                {
                    this.OnVehicleIdChanging(value);
                    this._VehicleId = value;
                    this.SendPropertyChanged("VehicleId");
                    this.OnVehicleIdChanged();
                }
            }
        }

        public virtual string PlateNumber
        {
            get
            {
                return this._PlateNumber;
            }
            set
            {
                if (this._PlateNumber != value)
                {
                    this.OnPlateNumberChanging(value);
                    this._PlateNumber = value;
                    this.SendPropertyChanged("PlateNumber");
                    this.OnPlateNumberChanged();
                }
            }
        }

        public virtual System.Guid TraderId
        {
            get
            {
                return this._TraderId;
            }
            set
            {
                if (this._TraderId != value)
                {
                    this.OnTraderIdChanging(value);
                    this._TraderId = value;
                    this.SendPropertyChanged("TraderId");
                    this.OnTraderIdChanged();
                }
            }
        }

        public virtual string CardId
        {
            get
            {
                return this._CardId;
            }
            set
            {
                if (this._CardId != value)
                {
                    this.OnCardIdChanging(value);
                    this._CardId = value;
                    this.SendPropertyChanged("CardId");
                    this.OnCardIdChanged();
                }
            }
        }

        public virtual Trader Trader
        {
            get
            {
                return this._Trader;
            }
            set
            {
                if (this._Trader != value)
                {
                    this.OnTraderChanging(value);
                    this._Trader = value;
                    this.SendPropertyChanged("Trader");
                    this.OnTraderChanged();
                }
            }
        }

        public virtual IList<Invoice> Invoices
        {
            get
            {
                return this._Invoices;
            }
            set
            {
                if (this._Invoices != value)
                {
                    this._Invoices = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnVehicleIdChanging(System.Guid value);
        
        partial void OnVehicleIdChanged();
        partial void OnPlateNumberChanging(string value);
        
        partial void OnPlateNumberChanged();
        partial void OnTraderIdChanging(System.Guid value);
        
        partial void OnTraderIdChanged();
        partial void OnCardIdChanging(string value);
        
        partial void OnCardIdChanged();
        partial void OnTraderChanging(Trader value);

        partial void OnTraderChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class UsagePeriod : EntityBase, INotifyPropertyChanged {

        private System.Guid _UsagePeriodId;

        private System.DateTime _PeriodStart;

        private System.DateTime? _PeriodEnd;

        private bool _IsLocked;

        private IList<TankUsagePeriod> _TankUsagePeriods;

        private IList<TankFilling> _TankFillings;

        private IList<SalesTransaction> _SalesTransactions;

        private IList<NozzleUsagePeriod> _NozzleUsagePeriods;

        public UsagePeriod()
        {
            this._TankUsagePeriods = new List<TankUsagePeriod>();
            this._TankFillings = new List<TankFilling>();
            this._SalesTransactions = new List<SalesTransaction>();
            this._NozzleUsagePeriods = new List<NozzleUsagePeriod>();
            OnCreated();
        }

        public virtual System.Guid UsagePeriodId
        {
            get
            {
                return this._UsagePeriodId;
            }
            set
            {
                if (this._UsagePeriodId != value)
                {
                    this.OnUsagePeriodIdChanging(value);
                    this._UsagePeriodId = value;
                    this.SendPropertyChanged("UsagePeriodId");
                    this.OnUsagePeriodIdChanged();
                }
            }
        }

        public virtual System.DateTime PeriodStart
        {
            get
            {
                return this._PeriodStart;
            }
            set
            {
                if (this._PeriodStart != value)
                {
                    this.OnPeriodStartChanging(value);
                    this._PeriodStart = value;
                    this.SendPropertyChanged("PeriodStart");
                    this.OnPeriodStartChanged();
                }
            }
        }

        public virtual System.DateTime? PeriodEnd
        {
            get
            {
                return this._PeriodEnd;
            }
            set
            {
                if (this._PeriodEnd != value)
                {
                    this.OnPeriodEndChanging(value);
                    this._PeriodEnd = value;
                    this.SendPropertyChanged("PeriodEnd");
                    this.OnPeriodEndChanged();
                }
            }
        }

        public virtual bool IsLocked
        {
            get
            {
                return this._IsLocked;
            }
            set
            {
                if (this._IsLocked != value)
                {
                    this.OnIsLockedChanging(value);
                    this._IsLocked = value;
                    this.SendPropertyChanged("IsLocked");
                    this.OnIsLockedChanged();
                }
            }
        }

        public virtual IList<TankUsagePeriod> TankUsagePeriods
        {
            get
            {
                return this._TankUsagePeriods;
            }
            set
            {
                if (this._TankUsagePeriods != value)
                {
                    this._TankUsagePeriods = value;
                }
            }
        }

        public virtual IList<TankFilling> TankFillings
        {
            get
            {
                return this._TankFillings;
            }
            set
            {
                if (this._TankFillings != value)
                {
                    this._TankFillings = value;
                }
            }
        }

        public virtual IList<SalesTransaction> SalesTransactions
        {
            get
            {
                return this._SalesTransactions;
            }
            set
            {
                if (this._SalesTransactions != value)
                {
                    this._SalesTransactions = value;
                }
            }
        }

        public virtual IList<NozzleUsagePeriod> NozzleUsagePeriods
        {
            get
            {
                return this._NozzleUsagePeriods;
            }
            set
            {
                if (this._NozzleUsagePeriods != value)
                {
                    this._NozzleUsagePeriods = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnUsagePeriodIdChanging(System.Guid value);
        
        partial void OnUsagePeriodIdChanged();
        partial void OnPeriodStartChanging(System.DateTime value);
        
        partial void OnPeriodStartChanged();
        partial void OnPeriodEndChanging(System.DateTime? value);
        
        partial void OnPeriodEndChanged();
        partial void OnIsLockedChanging(bool value);
        
        partial void OnIsLockedChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class Trader : EntityBase, INotifyPropertyChanged {

        private System.Guid _TraderId;

        private string _Name;

        private string _TaxRegistrationNumber;

        private string _TaxRegistrationOffice;

        private string _Address;

        private string _City;

        private string _Phone1;

        private string _Phone2;

        private string _Fax;

        private string _Email;

        private string _Website;

        private System.Guid? _InvoiceTypeId;

        private System.Guid? _PriceListId;

        private bool _IsCustomer;

        private bool _IsSupplier;

        private bool? _VatExemption;

        private int? _PaymentType;

        private string _VatExemptionReason;

        private string _Occupation;

        private string _SupplyNumber;

        private bool? _PrintDebtOnInvoice;

        private string _DeliveryAddress;

        private string _Country;

        private string _ZipCode;

        private IList<Vehicle> _Vehicles;

        private InvoiceType _InvoiceType;

        private PriceList _PriceList;

        private IList<Invoice> _Invoices;

        private IList<FinTransaction> _FinTransactions;

        public Trader()
        {
            this._Vehicles = new List<Vehicle>();
            this._Invoices = new List<Invoice>();
            this._FinTransactions = new List<FinTransaction>();
            OnCreated();
        }

        public virtual System.Guid TraderId
        {
            get
            {
                return this._TraderId;
            }
            set
            {
                if (this._TraderId != value)
                {
                    this.OnTraderIdChanging(value);
                    this._TraderId = value;
                    this.SendPropertyChanged("TraderId");
                    this.OnTraderIdChanged();
                }
            }
        }

        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        public virtual string TaxRegistrationNumber
        {
            get
            {
                return this._TaxRegistrationNumber;
            }
            set
            {
                if (this._TaxRegistrationNumber != value)
                {
                    this.OnTaxRegistrationNumberChanging(value);
                    this._TaxRegistrationNumber = value;
                    this.SendPropertyChanged("TaxRegistrationNumber");
                    this.OnTaxRegistrationNumberChanged();
                }
            }
        }

        public virtual string TaxRegistrationOffice
        {
            get
            {
                return this._TaxRegistrationOffice;
            }
            set
            {
                if (this._TaxRegistrationOffice != value)
                {
                    this.OnTaxRegistrationOfficeChanging(value);
                    this._TaxRegistrationOffice = value;
                    this.SendPropertyChanged("TaxRegistrationOffice");
                    this.OnTaxRegistrationOfficeChanged();
                }
            }
        }

        public virtual string Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        public virtual string City
        {
            get
            {
                return this._City;
            }
            set
            {
                if (this._City != value)
                {
                    this.OnCityChanging(value);
                    this._City = value;
                    this.SendPropertyChanged("City");
                    this.OnCityChanged();
                }
            }
        }

        public virtual string Phone1
        {
            get
            {
                return this._Phone1;
            }
            set
            {
                if (this._Phone1 != value)
                {
                    this.OnPhone1Changing(value);
                    this._Phone1 = value;
                    this.SendPropertyChanged("Phone1");
                    this.OnPhone1Changed();
                }
            }
        }

        public virtual string Phone2
        {
            get
            {
                return this._Phone2;
            }
            set
            {
                if (this._Phone2 != value)
                {
                    this.OnPhone2Changing(value);
                    this._Phone2 = value;
                    this.SendPropertyChanged("Phone2");
                    this.OnPhone2Changed();
                }
            }
        }

        public virtual string Fax
        {
            get
            {
                return this._Fax;
            }
            set
            {
                if (this._Fax != value)
                {
                    this.OnFaxChanging(value);
                    this._Fax = value;
                    this.SendPropertyChanged("Fax");
                    this.OnFaxChanged();
                }
            }
        }

        public virtual string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if (this._Email != value)
                {
                    this.OnEmailChanging(value);
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }

        public virtual string Website
        {
            get
            {
                return this._Website;
            }
            set
            {
                if (this._Website != value)
                {
                    this.OnWebsiteChanging(value);
                    this._Website = value;
                    this.SendPropertyChanged("Website");
                    this.OnWebsiteChanged();
                }
            }
        }

        public virtual System.Guid? InvoiceTypeId
        {
            get
            {
                return this._InvoiceTypeId;
            }
            set
            {
                if (this._InvoiceTypeId != value)
                {
                    this.OnInvoiceTypeIdChanging(value);
                    this._InvoiceTypeId = value;
                    this.SendPropertyChanged("InvoiceTypeId");
                    this.OnInvoiceTypeIdChanged();
                }
            }
        }

        public virtual System.Guid? PriceListId
        {
            get
            {
                return this._PriceListId;
            }
            set
            {
                if (this._PriceListId != value)
                {
                    this.OnPriceListIdChanging(value);
                    this._PriceListId = value;
                    this.SendPropertyChanged("PriceListId");
                    this.OnPriceListIdChanged();
                }
            }
        }

        public virtual bool IsCustomer
        {
            get
            {
                return this._IsCustomer;
            }
            set
            {
                if (this._IsCustomer != value)
                {
                    this.OnIsCustomerChanging(value);
                    this._IsCustomer = value;
                    this.SendPropertyChanged("IsCustomer");
                    this.OnIsCustomerChanged();
                }
            }
        }

        public virtual bool IsSupplier
        {
            get
            {
                return this._IsSupplier;
            }
            set
            {
                if (this._IsSupplier != value)
                {
                    this.OnIsSupplierChanging(value);
                    this._IsSupplier = value;
                    this.SendPropertyChanged("IsSupplier");
                    this.OnIsSupplierChanged();
                }
            }
        }

        public virtual bool? VatExemption
        {
            get
            {
                return this._VatExemption;
            }
            set
            {
                if (this._VatExemption != value)
                {
                    this.OnVatExemptionChanging(value);
                    this._VatExemption = value;
                    this.SendPropertyChanged("VatExemption");
                    this.OnVatExemptionChanged();
                }
            }
        }

        public virtual int? PaymentType
        {
            get
            {
                return this._PaymentType;
            }
            set
            {
                if (this._PaymentType != value)
                {
                    this.OnPaymentTypeChanging(value);
                    this._PaymentType = value;
                    this.SendPropertyChanged("PaymentType");
                    this.OnPaymentTypeChanged();
                }
            }
        }

        public virtual string VatExemptionReason
        {
            get
            {
                return this._VatExemptionReason;
            }
            set
            {
                if (this._VatExemptionReason != value)
                {
                    this.OnVatExemptionReasonChanging(value);
                    this._VatExemptionReason = value;
                    this.SendPropertyChanged("VatExemptionReason");
                    this.OnVatExemptionReasonChanged();
                }
            }
        }

        public virtual string Occupation
        {
            get
            {
                return this._Occupation;
            }
            set
            {
                if (this._Occupation != value)
                {
                    this.OnOccupationChanging(value);
                    this._Occupation = value;
                    this.SendPropertyChanged("Occupation");
                    this.OnOccupationChanged();
                }
            }
        }

        public virtual string SupplyNumber
        {
            get
            {
                return this._SupplyNumber;
            }
            set
            {
                if (this._SupplyNumber != value)
                {
                    this.OnSupplyNumberChanging(value);
                    this._SupplyNumber = value;
                    this.SendPropertyChanged("SupplyNumber");
                    this.OnSupplyNumberChanged();
                }
            }
        }

        public virtual bool? PrintDebtOnInvoice
        {
            get
            {
                return this._PrintDebtOnInvoice;
            }
            set
            {
                if (this._PrintDebtOnInvoice != value)
                {
                    this.OnPrintDebtOnInvoiceChanging(value);
                    this._PrintDebtOnInvoice = value;
                    this.SendPropertyChanged("PrintDebtOnInvoice");
                    this.OnPrintDebtOnInvoiceChanged();
                }
            }
        }

        public virtual string DeliveryAddress
        {
            get
            {
                return this._DeliveryAddress;
            }
            set
            {
                if (this._DeliveryAddress != value)
                {
                    this.OnDeliveryAddressChanging(value);
                    this._DeliveryAddress = value;
                    this.SendPropertyChanged("DeliveryAddress");
                    this.OnDeliveryAddressChanged();
                }
            }
        }

        public virtual string Country
        {
            get
            {
                return this._Country;
            }
            set
            {
                if (this._Country != value)
                {
                    this.OnCountryChanging(value);
                    this._Country = value;
                    this.SendPropertyChanged("Country");
                    this.OnCountryChanged();
                }
            }
        }

        public virtual string ZipCode
        {
            get
            {
                return this._ZipCode;
            }
            set
            {
                if (this._ZipCode != value)
                {
                    this.OnZipCodeChanging(value);
                    this._ZipCode = value;
                    this.SendPropertyChanged("ZipCode");
                    this.OnZipCodeChanged();
                }
            }
        }

        public virtual IList<Vehicle> Vehicles
        {
            get
            {
                return this._Vehicles;
            }
            set
            {
                if (this._Vehicles != value)
                {
                    this._Vehicles = value;
                }
            }
        }

        public virtual InvoiceType InvoiceType
        {
            get
            {
                return this._InvoiceType;
            }
            set
            {
                if (this._InvoiceType != value)
                {
                    this.OnInvoiceTypeChanging(value);
                    this._InvoiceType = value;
                    this.SendPropertyChanged("InvoiceType");
                    this.OnInvoiceTypeChanged();
                }
            }
        }

        public virtual PriceList PriceList
        {
            get
            {
                return this._PriceList;
            }
            set
            {
                if (this._PriceList != value)
                {
                    this.OnPriceListChanging(value);
                    this._PriceList = value;
                    this.SendPropertyChanged("PriceList");
                    this.OnPriceListChanged();
                }
            }
        }

        public virtual IList<Invoice> Invoices
        {
            get
            {
                return this._Invoices;
            }
            set
            {
                if (this._Invoices != value)
                {
                    this._Invoices = value;
                }
            }
        }

        public virtual IList<FinTransaction> FinTransactions
        {
            get
            {
                return this._FinTransactions;
            }
            set
            {
                if (this._FinTransactions != value)
                {
                    this._FinTransactions = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnTraderIdChanging(System.Guid value);
        
        partial void OnTraderIdChanged();
        partial void OnNameChanging(string value);
        
        partial void OnNameChanged();
        partial void OnTaxRegistrationNumberChanging(string value);
        
        partial void OnTaxRegistrationNumberChanged();
        partial void OnTaxRegistrationOfficeChanging(string value);
        
        partial void OnTaxRegistrationOfficeChanged();
        partial void OnAddressChanging(string value);
        
        partial void OnAddressChanged();
        partial void OnCityChanging(string value);
        
        partial void OnCityChanged();
        partial void OnPhone1Changing(string value);
        
        partial void OnPhone1Changed();
        partial void OnPhone2Changing(string value);
        
        partial void OnPhone2Changed();
        partial void OnFaxChanging(string value);
        
        partial void OnFaxChanged();
        partial void OnEmailChanging(string value);
        
        partial void OnEmailChanged();
        partial void OnWebsiteChanging(string value);
        
        partial void OnWebsiteChanged();
        partial void OnInvoiceTypeIdChanging(System.Guid? value);
        
        partial void OnInvoiceTypeIdChanged();
        partial void OnPriceListIdChanging(System.Guid? value);
        
        partial void OnPriceListIdChanged();
        partial void OnIsCustomerChanging(bool value);
        
        partial void OnIsCustomerChanged();
        partial void OnIsSupplierChanging(bool value);
        
        partial void OnIsSupplierChanged();
        partial void OnVatExemptionChanging(bool? value);
        
        partial void OnVatExemptionChanged();
        partial void OnPaymentTypeChanging(int? value);
        
        partial void OnPaymentTypeChanged();
        partial void OnVatExemptionReasonChanging(string value);
        
        partial void OnVatExemptionReasonChanged();
        partial void OnOccupationChanging(string value);
        
        partial void OnOccupationChanged();
        partial void OnSupplyNumberChanging(string value);
        
        partial void OnSupplyNumberChanged();
        partial void OnPrintDebtOnInvoiceChanging(bool? value);
        
        partial void OnPrintDebtOnInvoiceChanged();
        partial void OnDeliveryAddressChanging(string value);
        
        partial void OnDeliveryAddressChanged();
        partial void OnCountryChanging(string value);
        
        partial void OnCountryChanged();
        partial void OnZipCodeChanging(string value);
        
        partial void OnZipCodeChanged();
        partial void OnInvoiceTypeChanging(InvoiceType value);

        partial void OnInvoiceTypeChanged();
        partial void OnPriceListChanging(PriceList value);

        partial void OnPriceListChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TitrimetryLevel : EntityBase, INotifyPropertyChanged {

        private System.Guid _TitrimetryLevelId;

        private System.Guid? _TitrimetryId;

        private decimal? _Height;

        private decimal? _Volume;

        private decimal? _UncertaintyVolume;

        private decimal? _UncertaintyPercent;

        private Titrimetry _Titrimetry;

        public TitrimetryLevel()
        {
            OnCreated();
        }

        public virtual System.Guid TitrimetryLevelId
        {
            get
            {
                return this._TitrimetryLevelId;
            }
            set
            {
                if (this._TitrimetryLevelId != value)
                {
                    this.OnTitrimetryLevelIdChanging(value);
                    this._TitrimetryLevelId = value;
                    this.SendPropertyChanged("TitrimetryLevelId");
                    this.OnTitrimetryLevelIdChanged();
                }
            }
        }

        public virtual System.Guid? TitrimetryId
        {
            get
            {
                return this._TitrimetryId;
            }
            set
            {
                if (this._TitrimetryId != value)
                {
                    this.OnTitrimetryIdChanging(value);
                    this._TitrimetryId = value;
                    this.SendPropertyChanged("TitrimetryId");
                    this.OnTitrimetryIdChanged();
                }
            }
        }

        public virtual decimal? Height
        {
            get
            {
                return this._Height;
            }
            set
            {
                if (this._Height != value)
                {
                    this.OnHeightChanging(value);
                    this._Height = value;
                    this.SendPropertyChanged("Height");
                    this.OnHeightChanged();
                }
            }
        }

        public virtual decimal? Volume
        {
            get
            {
                return this._Volume;
            }
            set
            {
                if (this._Volume != value)
                {
                    this.OnVolumeChanging(value);
                    this._Volume = value;
                    this.SendPropertyChanged("Volume");
                    this.OnVolumeChanged();
                }
            }
        }

        public virtual decimal? UncertaintyVolume
        {
            get
            {
                return this._UncertaintyVolume;
            }
            set
            {
                if (this._UncertaintyVolume != value)
                {
                    this.OnUncertaintyVolumeChanging(value);
                    this._UncertaintyVolume = value;
                    this.SendPropertyChanged("UncertaintyVolume");
                    this.OnUncertaintyVolumeChanged();
                }
            }
        }

        public virtual decimal? UncertaintyPercent
        {
            get
            {
                return this._UncertaintyPercent;
            }
            set
            {
                if (this._UncertaintyPercent != value)
                {
                    this.OnUncertaintyPercentChanging(value);
                    this._UncertaintyPercent = value;
                    this.SendPropertyChanged("UncertaintyPercent");
                    this.OnUncertaintyPercentChanged();
                }
            }
        }

        public virtual Titrimetry Titrimetry
        {
            get
            {
                return this._Titrimetry;
            }
            set
            {
                if (this._Titrimetry != value)
                {
                    this.OnTitrimetryChanging(value);
                    this._Titrimetry = value;
                    this.SendPropertyChanged("Titrimetry");
                    this.OnTitrimetryChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnTitrimetryLevelIdChanging(System.Guid value);
        
        partial void OnTitrimetryLevelIdChanged();
        partial void OnTitrimetryIdChanging(System.Guid? value);
        
        partial void OnTitrimetryIdChanged();
        partial void OnHeightChanging(decimal? value);
        
        partial void OnHeightChanged();
        partial void OnVolumeChanging(decimal? value);
        
        partial void OnVolumeChanged();
        partial void OnUncertaintyVolumeChanging(decimal? value);
        
        partial void OnUncertaintyVolumeChanged();
        partial void OnUncertaintyPercentChanging(decimal? value);
        
        partial void OnUncertaintyPercentChanged();
        partial void OnTitrimetryChanging(Titrimetry value);

        partial void OnTitrimetryChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class Titrimetry : EntityBase, INotifyPropertyChanged {

        private System.Guid _TitrimetryId;

        private System.Guid? _TankId;

        private System.DateTime? _TitrationDate;

        private System.DateTime? _PrintDate;

        private string _DocumentSign;

        private decimal? _UncertaintyLevel;

        private IList<TitrimetryLevel> _TitrimetryLevels;

        private Tank _Tank;

        public Titrimetry()
        {
            this._TitrimetryLevels = new List<TitrimetryLevel>();
            OnCreated();
        }

        public virtual System.Guid TitrimetryId
        {
            get
            {
                return this._TitrimetryId;
            }
            set
            {
                if (this._TitrimetryId != value)
                {
                    this.OnTitrimetryIdChanging(value);
                    this._TitrimetryId = value;
                    this.SendPropertyChanged("TitrimetryId");
                    this.OnTitrimetryIdChanged();
                }
            }
        }

        public virtual System.Guid? TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual System.DateTime? TitrationDate
        {
            get
            {
                return this._TitrationDate;
            }
            set
            {
                if (this._TitrationDate != value)
                {
                    this.OnTitrationDateChanging(value);
                    this._TitrationDate = value;
                    this.SendPropertyChanged("TitrationDate");
                    this.OnTitrationDateChanged();
                }
            }
        }

        public virtual System.DateTime? PrintDate
        {
            get
            {
                return this._PrintDate;
            }
            set
            {
                if (this._PrintDate != value)
                {
                    this.OnPrintDateChanging(value);
                    this._PrintDate = value;
                    this.SendPropertyChanged("PrintDate");
                    this.OnPrintDateChanged();
                }
            }
        }

        public virtual string DocumentSign
        {
            get
            {
                return this._DocumentSign;
            }
            set
            {
                if (this._DocumentSign != value)
                {
                    this.OnDocumentSignChanging(value);
                    this._DocumentSign = value;
                    this.SendPropertyChanged("DocumentSign");
                    this.OnDocumentSignChanged();
                }
            }
        }

        public virtual decimal? UncertaintyLevel
        {
            get
            {
                return this._UncertaintyLevel;
            }
            set
            {
                if (this._UncertaintyLevel != value)
                {
                    this.OnUncertaintyLevelChanging(value);
                    this._UncertaintyLevel = value;
                    this.SendPropertyChanged("UncertaintyLevel");
                    this.OnUncertaintyLevelChanged();
                }
            }
        }

        public virtual IList<TitrimetryLevel> TitrimetryLevels
        {
            get
            {
                return this._TitrimetryLevels;
            }
            set
            {
                if (this._TitrimetryLevels != value)
                {
                    this._TitrimetryLevels = value;
                }
            }
        }

        public virtual Tank Tank
        {
            get
            {
                return this._Tank;
            }
            set
            {
                if (this._Tank != value)
                {
                    this.OnTankChanging(value);
                    this._Tank = value;
                    this.SendPropertyChanged("Tank");
                    this.OnTankChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnTitrimetryIdChanging(System.Guid value);
        
        partial void OnTitrimetryIdChanged();
        partial void OnTankIdChanging(System.Guid? value);
        
        partial void OnTankIdChanged();
        partial void OnTitrationDateChanging(System.DateTime? value);
        
        partial void OnTitrationDateChanged();
        partial void OnPrintDateChanging(System.DateTime? value);
        
        partial void OnPrintDateChanged();
        partial void OnDocumentSignChanging(string value);
        
        partial void OnDocumentSignChanged();
        partial void OnUncertaintyLevelChanging(decimal? value);
        
        partial void OnUncertaintyLevelChanged();
        partial void OnTankChanging(Tank value);

        partial void OnTankChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TankUsagePeriod : EntityBase, INotifyPropertyChanged {

        private System.Guid _TankUsagePeriodId;

        private System.Guid _TankId;

        private System.Guid _UsagePeriodId;

        private System.DateTime _MeasurementDateTime;

        private System.DateTime _ExpirationDate;

        private decimal _TotalVolume;

        private long _CRC;

        private UsagePeriod _UsagePeriod;

        private Tank _Tank;

        public TankUsagePeriod()
        {
            OnCreated();
        }

        public virtual System.Guid TankUsagePeriodId
        {
            get
            {
                return this._TankUsagePeriodId;
            }
            set
            {
                if (this._TankUsagePeriodId != value)
                {
                    this.OnTankUsagePeriodIdChanging(value);
                    this._TankUsagePeriodId = value;
                    this.SendPropertyChanged("TankUsagePeriodId");
                    this.OnTankUsagePeriodIdChanged();
                }
            }
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual System.Guid UsagePeriodId
        {
            get
            {
                return this._UsagePeriodId;
            }
            set
            {
                if (this._UsagePeriodId != value)
                {
                    this.OnUsagePeriodIdChanging(value);
                    this._UsagePeriodId = value;
                    this.SendPropertyChanged("UsagePeriodId");
                    this.OnUsagePeriodIdChanged();
                }
            }
        }

        public virtual System.DateTime MeasurementDateTime
        {
            get
            {
                return this._MeasurementDateTime;
            }
            set
            {
                if (this._MeasurementDateTime != value)
                {
                    this.OnMeasurementDateTimeChanging(value);
                    this._MeasurementDateTime = value;
                    this.SendPropertyChanged("MeasurementDateTime");
                    this.OnMeasurementDateTimeChanged();
                }
            }
        }

        public virtual System.DateTime ExpirationDate
        {
            get
            {
                return this._ExpirationDate;
            }
            set
            {
                if (this._ExpirationDate != value)
                {
                    this.OnExpirationDateChanging(value);
                    this._ExpirationDate = value;
                    this.SendPropertyChanged("ExpirationDate");
                    this.OnExpirationDateChanged();
                }
            }
        }

        public virtual decimal TotalVolume
        {
            get
            {
                return this._TotalVolume;
            }
            set
            {
                if (this._TotalVolume != value)
                {
                    this.OnTotalVolumeChanging(value);
                    this._TotalVolume = value;
                    this.SendPropertyChanged("TotalVolume");
                    this.OnTotalVolumeChanged();
                }
            }
        }

        public virtual long CRC
        {
            get
            {
                return this._CRC;
            }
            set
            {
                if (this._CRC != value)
                {
                    this.OnCRCChanging(value);
                    this._CRC = value;
                    this.SendPropertyChanged("CRC");
                    this.OnCRCChanged();
                }
            }
        }

        public virtual UsagePeriod UsagePeriod
        {
            get
            {
                return this._UsagePeriod;
            }
            set
            {
                if (this._UsagePeriod != value)
                {
                    this.OnUsagePeriodChanging(value);
                    this._UsagePeriod = value;
                    this.SendPropertyChanged("UsagePeriod");
                    this.OnUsagePeriodChanged();
                }
            }
        }

        public virtual Tank Tank
        {
            get
            {
                return this._Tank;
            }
            set
            {
                if (this._Tank != value)
                {
                    this.OnTankChanging(value);
                    this._Tank = value;
                    this.SendPropertyChanged("Tank");
                    this.OnTankChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnTankUsagePeriodIdChanging(System.Guid value);
        
        partial void OnTankUsagePeriodIdChanged();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnUsagePeriodIdChanging(System.Guid value);
        
        partial void OnUsagePeriodIdChanged();
        partial void OnMeasurementDateTimeChanging(System.DateTime value);
        
        partial void OnMeasurementDateTimeChanged();
        partial void OnExpirationDateChanging(System.DateTime value);
        
        partial void OnExpirationDateChanged();
        partial void OnTotalVolumeChanging(decimal value);
        
        partial void OnTotalVolumeChanged();
        partial void OnCRCChanging(long value);
        
        partial void OnCRCChanged();
        partial void OnUsagePeriodChanging(UsagePeriod value);

        partial void OnUsagePeriodChanged();
        partial void OnTankChanging(Tank value);

        partial void OnTankChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TankSetting : EntityBase, INotifyPropertyChanged {

        private System.Guid _TankSettingId;

        private System.Guid _TankId;

        private string _SettingKey;

        private string _SettingValue;

        private string _Description;

        private Tank _Tank;

        public TankSetting()
        {
            OnCreated();
        }

        public virtual System.Guid TankSettingId
        {
            get
            {
                return this._TankSettingId;
            }
            set
            {
                if (this._TankSettingId != value)
                {
                    this.OnTankSettingIdChanging(value);
                    this._TankSettingId = value;
                    this.SendPropertyChanged("TankSettingId");
                    this.OnTankSettingIdChanged();
                }
            }
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual string SettingKey
        {
            get
            {
                return this._SettingKey;
            }
            set
            {
                if (this._SettingKey != value)
                {
                    this.OnSettingKeyChanging(value);
                    this._SettingKey = value;
                    this.SendPropertyChanged("SettingKey");
                    this.OnSettingKeyChanged();
                }
            }
        }

        public virtual string SettingValue
        {
            get
            {
                return this._SettingValue;
            }
            set
            {
                if (this._SettingValue != value)
                {
                    this.OnSettingValueChanging(value);
                    this._SettingValue = value;
                    this.SendPropertyChanged("SettingValue");
                    this.OnSettingValueChanged();
                }
            }
        }

        public virtual string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        public virtual Tank Tank
        {
            get
            {
                return this._Tank;
            }
            set
            {
                if (this._Tank != value)
                {
                    this.OnTankChanging(value);
                    this._Tank = value;
                    this.SendPropertyChanged("Tank");
                    this.OnTankChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnTankSettingIdChanging(System.Guid value);
        
        partial void OnTankSettingIdChanged();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnSettingKeyChanging(string value);
        
        partial void OnSettingKeyChanged();
        partial void OnSettingValueChanging(string value);
        
        partial void OnSettingValueChanged();
        partial void OnDescriptionChanging(string value);
        
        partial void OnDescriptionChanged();
        partial void OnTankChanging(Tank value);

        partial void OnTankChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TankSale : EntityBase, INotifyPropertyChanged {

        private System.Guid _TankSaleId;

        private System.Guid _SalesTransactionId;

        private System.Guid _TankId;

        private decimal _StartVolume;

        private decimal? _EndVolume;

        private decimal _StartVolumeNormalized;

        private decimal? _EndVolumeNormalized;

        private decimal? _StartTemperature;

        private decimal _EndTemperature;

        private long _CRC;

        private decimal _StartLevel;

        private decimal? _EndLevel;

        private decimal _FuelDensity;

        private SalesTransaction _SalesTransaction;

        private Tank _Tank;

        public TankSale()
        {
            OnCreated();
        }

        public virtual System.Guid TankSaleId
        {
            get
            {
                return this._TankSaleId;
            }
            set
            {
                if (this._TankSaleId != value)
                {
                    this.OnTankSaleIdChanging(value);
                    this._TankSaleId = value;
                    this.SendPropertyChanged("TankSaleId");
                    this.OnTankSaleIdChanged();
                }
            }
        }

        public virtual System.Guid SalesTransactionId
        {
            get
            {
                return this._SalesTransactionId;
            }
            set
            {
                if (this._SalesTransactionId != value)
                {
                    this.OnSalesTransactionIdChanging(value);
                    this._SalesTransactionId = value;
                    this.SendPropertyChanged("SalesTransactionId");
                    this.OnSalesTransactionIdChanged();
                }
            }
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual decimal StartVolume
        {
            get
            {
                return this._StartVolume;
            }
            set
            {
                if (this._StartVolume != value)
                {
                    this.OnStartVolumeChanging(value);
                    this._StartVolume = value;
                    this.SendPropertyChanged("StartVolume");
                    this.OnStartVolumeChanged();
                }
            }
        }

        public virtual decimal? EndVolume
        {
            get
            {
                return this._EndVolume;
            }
            set
            {
                if (this._EndVolume != value)
                {
                    this.OnEndVolumeChanging(value);
                    this._EndVolume = value;
                    this.SendPropertyChanged("EndVolume");
                    this.OnEndVolumeChanged();
                }
            }
        }

        public virtual decimal StartVolumeNormalized
        {
            get
            {
                return this._StartVolumeNormalized;
            }
            set
            {
                if (this._StartVolumeNormalized != value)
                {
                    this.OnStartVolumeNormalizedChanging(value);
                    this._StartVolumeNormalized = value;
                    this.SendPropertyChanged("StartVolumeNormalized");
                    this.OnStartVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal? EndVolumeNormalized
        {
            get
            {
                return this._EndVolumeNormalized;
            }
            set
            {
                if (this._EndVolumeNormalized != value)
                {
                    this.OnEndVolumeNormalizedChanging(value);
                    this._EndVolumeNormalized = value;
                    this.SendPropertyChanged("EndVolumeNormalized");
                    this.OnEndVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal? StartTemperature
        {
            get
            {
                return this._StartTemperature;
            }
            set
            {
                if (this._StartTemperature != value)
                {
                    this.OnStartTemperatureChanging(value);
                    this._StartTemperature = value;
                    this.SendPropertyChanged("StartTemperature");
                    this.OnStartTemperatureChanged();
                }
            }
        }

        public virtual decimal EndTemperature
        {
            get
            {
                return this._EndTemperature;
            }
            set
            {
                if (this._EndTemperature != value)
                {
                    this.OnEndTemperatureChanging(value);
                    this._EndTemperature = value;
                    this.SendPropertyChanged("EndTemperature");
                    this.OnEndTemperatureChanged();
                }
            }
        }

        public virtual long CRC
        {
            get
            {
                return this._CRC;
            }
            set
            {
                if (this._CRC != value)
                {
                    this.OnCRCChanging(value);
                    this._CRC = value;
                    this.SendPropertyChanged("CRC");
                    this.OnCRCChanged();
                }
            }
        }

        public virtual decimal StartLevel
        {
            get
            {
                return this._StartLevel;
            }
            set
            {
                if (this._StartLevel != value)
                {
                    this.OnStartLevelChanging(value);
                    this._StartLevel = value;
                    this.SendPropertyChanged("StartLevel");
                    this.OnStartLevelChanged();
                }
            }
        }

        public virtual decimal? EndLevel
        {
            get
            {
                return this._EndLevel;
            }
            set
            {
                if (this._EndLevel != value)
                {
                    this.OnEndLevelChanging(value);
                    this._EndLevel = value;
                    this.SendPropertyChanged("EndLevel");
                    this.OnEndLevelChanged();
                }
            }
        }

        public virtual decimal FuelDensity
        {
            get
            {
                return this._FuelDensity;
            }
            set
            {
                if (this._FuelDensity != value)
                {
                    this.OnFuelDensityChanging(value);
                    this._FuelDensity = value;
                    this.SendPropertyChanged("FuelDensity");
                    this.OnFuelDensityChanged();
                }
            }
        }

        public virtual SalesTransaction SalesTransaction
        {
            get
            {
                return this._SalesTransaction;
            }
            set
            {
                if (this._SalesTransaction != value)
                {
                    this.OnSalesTransactionChanging(value);
                    this._SalesTransaction = value;
                    this.SendPropertyChanged("SalesTransaction");
                    this.OnSalesTransactionChanged();
                }
            }
        }

        public virtual Tank Tank
        {
            get
            {
                return this._Tank;
            }
            set
            {
                if (this._Tank != value)
                {
                    this.OnTankChanging(value);
                    this._Tank = value;
                    this.SendPropertyChanged("Tank");
                    this.OnTankChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnTankSaleIdChanging(System.Guid value);
        
        partial void OnTankSaleIdChanged();
        partial void OnSalesTransactionIdChanging(System.Guid value);
        
        partial void OnSalesTransactionIdChanged();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnStartVolumeChanging(decimal value);
        
        partial void OnStartVolumeChanged();
        partial void OnEndVolumeChanging(decimal? value);
        
        partial void OnEndVolumeChanged();
        partial void OnStartVolumeNormalizedChanging(decimal value);
        
        partial void OnStartVolumeNormalizedChanged();
        partial void OnEndVolumeNormalizedChanging(decimal? value);
        
        partial void OnEndVolumeNormalizedChanged();
        partial void OnStartTemperatureChanging(decimal? value);
        
        partial void OnStartTemperatureChanged();
        partial void OnEndTemperatureChanging(decimal value);
        
        partial void OnEndTemperatureChanged();
        partial void OnCRCChanging(long value);
        
        partial void OnCRCChanged();
        partial void OnStartLevelChanging(decimal value);
        
        partial void OnStartLevelChanged();
        partial void OnEndLevelChanging(decimal? value);
        
        partial void OnEndLevelChanged();
        partial void OnFuelDensityChanging(decimal value);
        
        partial void OnFuelDensityChanged();
        partial void OnSalesTransactionChanging(SalesTransaction value);

        partial void OnSalesTransactionChanged();
        partial void OnTankChanging(Tank value);

        partial void OnTankChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TankPrice : EntityBase, INotifyPropertyChanged {

        private System.Guid _TankPriceId;

        private System.Guid _TankId;

        private decimal _Price;

        private System.DateTime _ChangeDate;

        private decimal _FuelDensity;

        private Tank _Tank;

        private IList<TankFilling> _TankFillings;

        public TankPrice()
        {
            this._TankFillings = new List<TankFilling>();
            OnCreated();
        }

        public virtual System.Guid TankPriceId
        {
            get
            {
                return this._TankPriceId;
            }
            set
            {
                if (this._TankPriceId != value)
                {
                    this.OnTankPriceIdChanging(value);
                    this._TankPriceId = value;
                    this.SendPropertyChanged("TankPriceId");
                    this.OnTankPriceIdChanged();
                }
            }
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual decimal Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

        public virtual System.DateTime ChangeDate
        {
            get
            {
                return this._ChangeDate;
            }
            set
            {
                if (this._ChangeDate != value)
                {
                    this.OnChangeDateChanging(value);
                    this._ChangeDate = value;
                    this.SendPropertyChanged("ChangeDate");
                    this.OnChangeDateChanged();
                }
            }
        }

        public virtual decimal FuelDensity
        {
            get
            {
                return this._FuelDensity;
            }
            set
            {
                if (this._FuelDensity != value)
                {
                    this.OnFuelDensityChanging(value);
                    this._FuelDensity = value;
                    this.SendPropertyChanged("FuelDensity");
                    this.OnFuelDensityChanged();
                }
            }
        }

        public virtual Tank Tank
        {
            get
            {
                return this._Tank;
            }
            set
            {
                if (this._Tank != value)
                {
                    this.OnTankChanging(value);
                    this._Tank = value;
                    this.SendPropertyChanged("Tank");
                    this.OnTankChanged();
                }
            }
        }

        public virtual IList<TankFilling> TankFillings
        {
            get
            {
                return this._TankFillings;
            }
            set
            {
                if (this._TankFillings != value)
                {
                    this._TankFillings = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnTankPriceIdChanging(System.Guid value);
        
        partial void OnTankPriceIdChanged();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnPriceChanging(decimal value);
        
        partial void OnPriceChanged();
        partial void OnChangeDateChanging(System.DateTime value);
        
        partial void OnChangeDateChanged();
        partial void OnFuelDensityChanging(decimal value);
        
        partial void OnFuelDensityChanged();
        partial void OnTankChanging(Tank value);

        partial void OnTankChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TankFilling : EntityBase, INotifyPropertyChanged {

        private System.Guid _TankFillingId;

        private System.Guid _UsagePeriodId;

        private System.Guid _TankId;

        private System.Guid _TankPriceId;

        private System.DateTime _TransactionTime;

        private decimal _Volume;

        private decimal _VolumeNormalized;

        private decimal _TankTemperatureStart;

        private decimal _TankTemperatureEnd;

        private bool _IsLocked;

        private long _CRC;

        private System.DateTime _TransactionTimeEnd;

        private decimal _LevelStart;

        private decimal _LevelEnd;

        private decimal _FuelDensity;

        private decimal _VolumeReal;

        private decimal _VolumeRealNormalized;

        private System.Guid _ApplicationUserId;

        private System.DateTime? _SentDateTime;

        private string _ResponseCode;

        private string _SignSignature;

        private UsagePeriod _UsagePeriod;

        private TankPrice _TankPrice;

        private ApplicationUser _ApplicationUser;

        private Tank _Tank;

        private IList<InvoiceLine> _InvoiceLines;

        private IList<Balance> _Balances;

        public TankFilling()
        {
            this._InvoiceLines = new List<InvoiceLine>();
            this._Balances = new List<Balance>();
            OnCreated();
        }

        public virtual System.Guid TankFillingId
        {
            get
            {
                return this._TankFillingId;
            }
            set
            {
                if (this._TankFillingId != value)
                {
                    this.OnTankFillingIdChanging(value);
                    this._TankFillingId = value;
                    this.SendPropertyChanged("TankFillingId");
                    this.OnTankFillingIdChanged();
                }
            }
        }

        public virtual System.Guid UsagePeriodId
        {
            get
            {
                return this._UsagePeriodId;
            }
            set
            {
                if (this._UsagePeriodId != value)
                {
                    this.OnUsagePeriodIdChanging(value);
                    this._UsagePeriodId = value;
                    this.SendPropertyChanged("UsagePeriodId");
                    this.OnUsagePeriodIdChanged();
                }
            }
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual System.Guid TankPriceId
        {
            get
            {
                return this._TankPriceId;
            }
            set
            {
                if (this._TankPriceId != value)
                {
                    this.OnTankPriceIdChanging(value);
                    this._TankPriceId = value;
                    this.SendPropertyChanged("TankPriceId");
                    this.OnTankPriceIdChanged();
                }
            }
        }

        public virtual System.DateTime TransactionTime
        {
            get
            {
                return this._TransactionTime;
            }
            set
            {
                if (this._TransactionTime != value)
                {
                    this.OnTransactionTimeChanging(value);
                    this._TransactionTime = value;
                    this.SendPropertyChanged("TransactionTime");
                    this.OnTransactionTimeChanged();
                }
            }
        }

        public virtual decimal Volume
        {
            get
            {
                return this._Volume;
            }
            set
            {
                if (this._Volume != value)
                {
                    this.OnVolumeChanging(value);
                    this._Volume = value;
                    this.SendPropertyChanged("Volume");
                    this.OnVolumeChanged();
                }
            }
        }

        public virtual decimal VolumeNormalized
        {
            get
            {
                return this._VolumeNormalized;
            }
            set
            {
                if (this._VolumeNormalized != value)
                {
                    this.OnVolumeNormalizedChanging(value);
                    this._VolumeNormalized = value;
                    this.SendPropertyChanged("VolumeNormalized");
                    this.OnVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal TankTemperatureStart
        {
            get
            {
                return this._TankTemperatureStart;
            }
            set
            {
                if (this._TankTemperatureStart != value)
                {
                    this.OnTankTemperatureStartChanging(value);
                    this._TankTemperatureStart = value;
                    this.SendPropertyChanged("TankTemperatureStart");
                    this.OnTankTemperatureStartChanged();
                }
            }
        }

        public virtual decimal TankTemperatureEnd
        {
            get
            {
                return this._TankTemperatureEnd;
            }
            set
            {
                if (this._TankTemperatureEnd != value)
                {
                    this.OnTankTemperatureEndChanging(value);
                    this._TankTemperatureEnd = value;
                    this.SendPropertyChanged("TankTemperatureEnd");
                    this.OnTankTemperatureEndChanged();
                }
            }
        }

        public virtual bool IsLocked
        {
            get
            {
                return this._IsLocked;
            }
            set
            {
                if (this._IsLocked != value)
                {
                    this.OnIsLockedChanging(value);
                    this._IsLocked = value;
                    this.SendPropertyChanged("IsLocked");
                    this.OnIsLockedChanged();
                }
            }
        }

        public virtual long CRC
        {
            get
            {
                return this._CRC;
            }
            set
            {
                if (this._CRC != value)
                {
                    this.OnCRCChanging(value);
                    this._CRC = value;
                    this.SendPropertyChanged("CRC");
                    this.OnCRCChanged();
                }
            }
        }

        public virtual System.DateTime TransactionTimeEnd
        {
            get
            {
                return this._TransactionTimeEnd;
            }
            set
            {
                if (this._TransactionTimeEnd != value)
                {
                    this.OnTransactionTimeEndChanging(value);
                    this._TransactionTimeEnd = value;
                    this.SendPropertyChanged("TransactionTimeEnd");
                    this.OnTransactionTimeEndChanged();
                }
            }
        }

        public virtual decimal LevelStart
        {
            get
            {
                return this._LevelStart;
            }
            set
            {
                if (this._LevelStart != value)
                {
                    this.OnLevelStartChanging(value);
                    this._LevelStart = value;
                    this.SendPropertyChanged("LevelStart");
                    this.OnLevelStartChanged();
                }
            }
        }

        public virtual decimal LevelEnd
        {
            get
            {
                return this._LevelEnd;
            }
            set
            {
                if (this._LevelEnd != value)
                {
                    this.OnLevelEndChanging(value);
                    this._LevelEnd = value;
                    this.SendPropertyChanged("LevelEnd");
                    this.OnLevelEndChanged();
                }
            }
        }

        public virtual decimal FuelDensity
        {
            get
            {
                return this._FuelDensity;
            }
            set
            {
                if (this._FuelDensity != value)
                {
                    this.OnFuelDensityChanging(value);
                    this._FuelDensity = value;
                    this.SendPropertyChanged("FuelDensity");
                    this.OnFuelDensityChanged();
                }
            }
        }

        public virtual decimal VolumeReal
        {
            get
            {
                return this._VolumeReal;
            }
            set
            {
                if (this._VolumeReal != value)
                {
                    this.OnVolumeRealChanging(value);
                    this._VolumeReal = value;
                    this.SendPropertyChanged("VolumeReal");
                    this.OnVolumeRealChanged();
                }
            }
        }

        public virtual decimal VolumeRealNormalized
        {
            get
            {
                return this._VolumeRealNormalized;
            }
            set
            {
                if (this._VolumeRealNormalized != value)
                {
                    this.OnVolumeRealNormalizedChanging(value);
                    this._VolumeRealNormalized = value;
                    this.SendPropertyChanged("VolumeRealNormalized");
                    this.OnVolumeRealNormalizedChanged();
                }
            }
        }

        public virtual System.Guid ApplicationUserId
        {
            get
            {
                return this._ApplicationUserId;
            }
            set
            {
                if (this._ApplicationUserId != value)
                {
                    this.OnApplicationUserIdChanging(value);
                    this._ApplicationUserId = value;
                    this.SendPropertyChanged("ApplicationUserId");
                    this.OnApplicationUserIdChanged();
                }
            }
        }

        public virtual System.DateTime? SentDateTime
        {
            get
            {
                return this._SentDateTime;
            }
            set
            {
                if (this._SentDateTime != value)
                {
                    this.OnSentDateTimeChanging(value);
                    this._SentDateTime = value;
                    this.SendPropertyChanged("SentDateTime");
                    this.OnSentDateTimeChanged();
                }
            }
        }

        public virtual string ResponseCode
        {
            get
            {
                return this._ResponseCode;
            }
            set
            {
                if (this._ResponseCode != value)
                {
                    this.OnResponseCodeChanging(value);
                    this._ResponseCode = value;
                    this.SendPropertyChanged("ResponseCode");
                    this.OnResponseCodeChanged();
                }
            }
        }

        public virtual string SignSignature
        {
            get
            {
                return this._SignSignature;
            }
            set
            {
                if (this._SignSignature != value)
                {
                    this.OnSignSignatureChanging(value);
                    this._SignSignature = value;
                    this.SendPropertyChanged("SignSignature");
                    this.OnSignSignatureChanged();
                }
            }
        }

        public virtual UsagePeriod UsagePeriod
        {
            get
            {
                return this._UsagePeriod;
            }
            set
            {
                if (this._UsagePeriod != value)
                {
                    this.OnUsagePeriodChanging(value);
                    this._UsagePeriod = value;
                    this.SendPropertyChanged("UsagePeriod");
                    this.OnUsagePeriodChanged();
                }
            }
        }

        public virtual TankPrice TankPrice
        {
            get
            {
                return this._TankPrice;
            }
            set
            {
                if (this._TankPrice != value)
                {
                    this.OnTankPriceChanging(value);
                    this._TankPrice = value;
                    this.SendPropertyChanged("TankPrice");
                    this.OnTankPriceChanged();
                }
            }
        }

        public virtual ApplicationUser ApplicationUser
        {
            get
            {
                return this._ApplicationUser;
            }
            set
            {
                if (this._ApplicationUser != value)
                {
                    this.OnApplicationUserChanging(value);
                    this._ApplicationUser = value;
                    this.SendPropertyChanged("ApplicationUser");
                    this.OnApplicationUserChanged();
                }
            }
        }

        public virtual Tank Tank
        {
            get
            {
                return this._Tank;
            }
            set
            {
                if (this._Tank != value)
                {
                    this.OnTankChanging(value);
                    this._Tank = value;
                    this.SendPropertyChanged("Tank");
                    this.OnTankChanged();
                }
            }
        }

        public virtual IList<InvoiceLine> InvoiceLines
        {
            get
            {
                return this._InvoiceLines;
            }
            set
            {
                if (this._InvoiceLines != value)
                {
                    this._InvoiceLines = value;
                }
            }
        }

        public virtual IList<Balance> Balances
        {
            get
            {
                return this._Balances;
            }
            set
            {
                if (this._Balances != value)
                {
                    this._Balances = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnTankFillingIdChanging(System.Guid value);
        
        partial void OnTankFillingIdChanged();
        partial void OnUsagePeriodIdChanging(System.Guid value);
        
        partial void OnUsagePeriodIdChanged();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnTankPriceIdChanging(System.Guid value);
        
        partial void OnTankPriceIdChanged();
        partial void OnTransactionTimeChanging(System.DateTime value);
        
        partial void OnTransactionTimeChanged();
        partial void OnVolumeChanging(decimal value);
        
        partial void OnVolumeChanged();
        partial void OnVolumeNormalizedChanging(decimal value);
        
        partial void OnVolumeNormalizedChanged();
        partial void OnTankTemperatureStartChanging(decimal value);
        
        partial void OnTankTemperatureStartChanged();
        partial void OnTankTemperatureEndChanging(decimal value);
        
        partial void OnTankTemperatureEndChanged();
        partial void OnIsLockedChanging(bool value);
        
        partial void OnIsLockedChanged();
        partial void OnCRCChanging(long value);
        
        partial void OnCRCChanged();
        partial void OnTransactionTimeEndChanging(System.DateTime value);
        
        partial void OnTransactionTimeEndChanged();
        partial void OnLevelStartChanging(decimal value);
        
        partial void OnLevelStartChanged();
        partial void OnLevelEndChanging(decimal value);
        
        partial void OnLevelEndChanged();
        partial void OnFuelDensityChanging(decimal value);
        
        partial void OnFuelDensityChanged();
        partial void OnVolumeRealChanging(decimal value);
        
        partial void OnVolumeRealChanged();
        partial void OnVolumeRealNormalizedChanging(decimal value);
        
        partial void OnVolumeRealNormalizedChanged();
        partial void OnApplicationUserIdChanging(System.Guid value);
        
        partial void OnApplicationUserIdChanged();
        partial void OnSentDateTimeChanging(System.DateTime? value);
        
        partial void OnSentDateTimeChanged();
        partial void OnResponseCodeChanging(string value);
        
        partial void OnResponseCodeChanged();
        partial void OnSignSignatureChanging(string value);
        
        partial void OnSignSignatureChanged();
        partial void OnUsagePeriodChanging(UsagePeriod value);

        partial void OnUsagePeriodChanged();
        partial void OnTankPriceChanging(TankPrice value);

        partial void OnTankPriceChanged();
        partial void OnApplicationUserChanging(ApplicationUser value);

        partial void OnApplicationUserChanged();
        partial void OnTankChanging(Tank value);

        partial void OnTankChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class Tank : EntityBase, INotifyPropertyChanged {

        private System.Guid _TankId;

        private System.Guid _FuelTypeId;

        private decimal _TotalVolume;

        private decimal _OffsetVolume;

        private int _PhysicalState;

        private int _Channel;

        private int _Address;

        private System.Guid _AtgProbeTypeId;

        private System.Guid _CommunicationControllerId;

        private decimal _MaxWaterHeight;

        private decimal _MinFuelHeight;

        private decimal _MaxFuelHeight;

        private int _TankNumber;

        private string _TankSerialNumber;

        private decimal _FuelLevelBase;

        private decimal _WaterLevelBase;

        private decimal _Temperatire;

        private decimal _OffestWater;

        private bool? _IsVirtual;

        private decimal? _OrderLimit;

        private int? _AlarmThreshold;

        private IList<Titrimetry> _Titrimetries;

        private IList<TankUsagePeriod> _TankUsagePeriods;

        private IList<TankSetting> _TankSettings;

        private IList<TankSale> _TankSales;

        private IList<TankPrice> _TankPrices;

        private IList<TankFilling> _TankFillings;

        private AtgProbeType _AtgProbeType;

        private CommunicationController _CommunicationController;

        private FuelType _FuelType;

        private IList<SystemEvent> _SystemEvents;

        private IList<NozzleFlow> _NozzleFlows;

        private IList<InvoiceLine> _InvoiceLines;

        private IList<TankCheck> _TankChecks;

        public Tank()
        {
            this._Titrimetries = new List<Titrimetry>();
            this._TankUsagePeriods = new List<TankUsagePeriod>();
            this._TankSettings = new List<TankSetting>();
            this._TankSales = new List<TankSale>();
            this._TankPrices = new List<TankPrice>();
            this._TankFillings = new List<TankFilling>();
            this._SystemEvents = new List<SystemEvent>();
            this._NozzleFlows = new List<NozzleFlow>();
            this._InvoiceLines = new List<InvoiceLine>();
            this._TankChecks = new List<TankCheck>();
            OnCreated();
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual System.Guid FuelTypeId
        {
            get
            {
                return this._FuelTypeId;
            }
            set
            {
                if (this._FuelTypeId != value)
                {
                    this.OnFuelTypeIdChanging(value);
                    this._FuelTypeId = value;
                    this.SendPropertyChanged("FuelTypeId");
                    this.OnFuelTypeIdChanged();
                }
            }
        }

        public virtual decimal TotalVolume
        {
            get
            {
                return this._TotalVolume;
            }
            set
            {
                if (this._TotalVolume != value)
                {
                    this.OnTotalVolumeChanging(value);
                    this._TotalVolume = value;
                    this.SendPropertyChanged("TotalVolume");
                    this.OnTotalVolumeChanged();
                }
            }
        }

        public virtual decimal OffsetVolume
        {
            get
            {
                return this._OffsetVolume;
            }
            set
            {
                if (this._OffsetVolume != value)
                {
                    this.OnOffsetVolumeChanging(value);
                    this._OffsetVolume = value;
                    this.SendPropertyChanged("OffsetVolume");
                    this.OnOffsetVolumeChanged();
                }
            }
        }

        public virtual int PhysicalState
        {
            get
            {
                return this._PhysicalState;
            }
            set
            {
                if (this._PhysicalState != value)
                {
                    this.OnPhysicalStateChanging(value);
                    this._PhysicalState = value;
                    this.SendPropertyChanged("PhysicalState");
                    this.OnPhysicalStateChanged();
                }
            }
        }

        public virtual int Channel
        {
            get
            {
                return this._Channel;
            }
            set
            {
                if (this._Channel != value)
                {
                    this.OnChannelChanging(value);
                    this._Channel = value;
                    this.SendPropertyChanged("Channel");
                    this.OnChannelChanged();
                }
            }
        }

        public virtual int Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        public virtual System.Guid AtgProbeTypeId
        {
            get
            {
                return this._AtgProbeTypeId;
            }
            set
            {
                if (this._AtgProbeTypeId != value)
                {
                    this.OnAtgProbeTypeIdChanging(value);
                    this._AtgProbeTypeId = value;
                    this.SendPropertyChanged("AtgProbeTypeId");
                    this.OnAtgProbeTypeIdChanged();
                }
            }
        }

        public virtual System.Guid CommunicationControllerId
        {
            get
            {
                return this._CommunicationControllerId;
            }
            set
            {
                if (this._CommunicationControllerId != value)
                {
                    this.OnCommunicationControllerIdChanging(value);
                    this._CommunicationControllerId = value;
                    this.SendPropertyChanged("CommunicationControllerId");
                    this.OnCommunicationControllerIdChanged();
                }
            }
        }

        public virtual decimal MaxWaterHeight
        {
            get
            {
                return this._MaxWaterHeight;
            }
            set
            {
                if (this._MaxWaterHeight != value)
                {
                    this.OnMaxWaterHeightChanging(value);
                    this._MaxWaterHeight = value;
                    this.SendPropertyChanged("MaxWaterHeight");
                    this.OnMaxWaterHeightChanged();
                }
            }
        }

        public virtual decimal MinFuelHeight
        {
            get
            {
                return this._MinFuelHeight;
            }
            set
            {
                if (this._MinFuelHeight != value)
                {
                    this.OnMinFuelHeightChanging(value);
                    this._MinFuelHeight = value;
                    this.SendPropertyChanged("MinFuelHeight");
                    this.OnMinFuelHeightChanged();
                }
            }
        }

        public virtual decimal MaxFuelHeight
        {
            get
            {
                return this._MaxFuelHeight;
            }
            set
            {
                if (this._MaxFuelHeight != value)
                {
                    this.OnMaxFuelHeightChanging(value);
                    this._MaxFuelHeight = value;
                    this.SendPropertyChanged("MaxFuelHeight");
                    this.OnMaxFuelHeightChanged();
                }
            }
        }

        public virtual int TankNumber
        {
            get
            {
                return this._TankNumber;
            }
            set
            {
                if (this._TankNumber != value)
                {
                    this.OnTankNumberChanging(value);
                    this._TankNumber = value;
                    this.SendPropertyChanged("TankNumber");
                    this.OnTankNumberChanged();
                }
            }
        }

        public virtual string TankSerialNumber
        {
            get
            {
                return this._TankSerialNumber;
            }
            set
            {
                if (this._TankSerialNumber != value)
                {
                    this.OnTankSerialNumberChanging(value);
                    this._TankSerialNumber = value;
                    this.SendPropertyChanged("TankSerialNumber");
                    this.OnTankSerialNumberChanged();
                }
            }
        }

        public virtual decimal FuelLevelBase
        {
            get
            {
                return this._FuelLevelBase;
            }
            set
            {
                if (this._FuelLevelBase != value)
                {
                    this.OnFuelLevelBaseChanging(value);
                    this._FuelLevelBase = value;
                    this.SendPropertyChanged("FuelLevelBase");
                    this.OnFuelLevelBaseChanged();
                }
            }
        }

        public virtual decimal WaterLevelBase
        {
            get
            {
                return this._WaterLevelBase;
            }
            set
            {
                if (this._WaterLevelBase != value)
                {
                    this.OnWaterLevelBaseChanging(value);
                    this._WaterLevelBase = value;
                    this.SendPropertyChanged("WaterLevelBase");
                    this.OnWaterLevelBaseChanged();
                }
            }
        }

        public virtual decimal Temperatire
        {
            get
            {
                return this._Temperatire;
            }
            set
            {
                if (this._Temperatire != value)
                {
                    this.OnTemperatireChanging(value);
                    this._Temperatire = value;
                    this.SendPropertyChanged("Temperatire");
                    this.OnTemperatireChanged();
                }
            }
        }

        public virtual decimal OffestWater
        {
            get
            {
                return this._OffestWater;
            }
            set
            {
                if (this._OffestWater != value)
                {
                    this.OnOffestWaterChanging(value);
                    this._OffestWater = value;
                    this.SendPropertyChanged("OffestWater");
                    this.OnOffestWaterChanged();
                }
            }
        }

        public virtual bool? IsVirtual
        {
            get
            {
                return this._IsVirtual;
            }
            set
            {
                if (this._IsVirtual != value)
                {
                    this.OnIsVirtualChanging(value);
                    this._IsVirtual = value;
                    this.SendPropertyChanged("IsVirtual");
                    this.OnIsVirtualChanged();
                }
            }
        }

        public virtual decimal? OrderLimit
        {
            get
            {
                return this._OrderLimit;
            }
            set
            {
                if (this._OrderLimit != value)
                {
                    this.OnOrderLimitChanging(value);
                    this._OrderLimit = value;
                    this.SendPropertyChanged("OrderLimit");
                    this.OnOrderLimitChanged();
                }
            }
        }

        public virtual int? AlarmThreshold
        {
            get
            {
                return this._AlarmThreshold;
            }
            set
            {
                if (this._AlarmThreshold != value)
                {
                    this.OnAlarmThresholdChanging(value);
                    this._AlarmThreshold = value;
                    this.SendPropertyChanged("AlarmThreshold");
                    this.OnAlarmThresholdChanged();
                }
            }
        }

        public virtual IList<Titrimetry> Titrimetries
        {
            get
            {
                return this._Titrimetries;
            }
            set
            {
                if (this._Titrimetries != value)
                {
                    this._Titrimetries = value;
                }
            }
        }

        public virtual IList<TankUsagePeriod> TankUsagePeriods
        {
            get
            {
                return this._TankUsagePeriods;
            }
            set
            {
                if (this._TankUsagePeriods != value)
                {
                    this._TankUsagePeriods = value;
                }
            }
        }

        public virtual IList<TankSetting> TankSettings
        {
            get
            {
                return this._TankSettings;
            }
            set
            {
                if (this._TankSettings != value)
                {
                    this._TankSettings = value;
                }
            }
        }

        public virtual IList<TankSale> TankSales
        {
            get
            {
                return this._TankSales;
            }
            set
            {
                if (this._TankSales != value)
                {
                    this._TankSales = value;
                }
            }
        }

        public virtual IList<TankPrice> TankPrices
        {
            get
            {
                return this._TankPrices;
            }
            set
            {
                if (this._TankPrices != value)
                {
                    this._TankPrices = value;
                }
            }
        }

        public virtual IList<TankFilling> TankFillings
        {
            get
            {
                return this._TankFillings;
            }
            set
            {
                if (this._TankFillings != value)
                {
                    this._TankFillings = value;
                }
            }
        }

        public virtual AtgProbeType AtgProbeType
        {
            get
            {
                return this._AtgProbeType;
            }
            set
            {
                if (this._AtgProbeType != value)
                {
                    this.OnAtgProbeTypeChanging(value);
                    this._AtgProbeType = value;
                    this.SendPropertyChanged("AtgProbeType");
                    this.OnAtgProbeTypeChanged();
                }
            }
        }

        public virtual CommunicationController CommunicationController
        {
            get
            {
                return this._CommunicationController;
            }
            set
            {
                if (this._CommunicationController != value)
                {
                    this.OnCommunicationControllerChanging(value);
                    this._CommunicationController = value;
                    this.SendPropertyChanged("CommunicationController");
                    this.OnCommunicationControllerChanged();
                }
            }
        }

        public virtual FuelType FuelType
        {
            get
            {
                return this._FuelType;
            }
            set
            {
                if (this._FuelType != value)
                {
                    this.OnFuelTypeChanging(value);
                    this._FuelType = value;
                    this.SendPropertyChanged("FuelType");
                    this.OnFuelTypeChanged();
                }
            }
        }

        public virtual IList<SystemEvent> SystemEvents
        {
            get
            {
                return this._SystemEvents;
            }
            set
            {
                if (this._SystemEvents != value)
                {
                    this._SystemEvents = value;
                }
            }
        }

        public virtual IList<NozzleFlow> NozzleFlows
        {
            get
            {
                return this._NozzleFlows;
            }
            set
            {
                if (this._NozzleFlows != value)
                {
                    this._NozzleFlows = value;
                }
            }
        }

        public virtual IList<InvoiceLine> InvoiceLines
        {
            get
            {
                return this._InvoiceLines;
            }
            set
            {
                if (this._InvoiceLines != value)
                {
                    this._InvoiceLines = value;
                }
            }
        }

        public virtual IList<TankCheck> TankChecks
        {
            get
            {
                return this._TankChecks;
            }
            set
            {
                if (this._TankChecks != value)
                {
                    this._TankChecks = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnFuelTypeIdChanging(System.Guid value);
        
        partial void OnFuelTypeIdChanged();
        partial void OnTotalVolumeChanging(decimal value);
        
        partial void OnTotalVolumeChanged();
        partial void OnOffsetVolumeChanging(decimal value);
        
        partial void OnOffsetVolumeChanged();
        partial void OnPhysicalStateChanging(int value);
        
        partial void OnPhysicalStateChanged();
        partial void OnChannelChanging(int value);
        
        partial void OnChannelChanged();
        partial void OnAddressChanging(int value);
        
        partial void OnAddressChanged();
        partial void OnAtgProbeTypeIdChanging(System.Guid value);
        
        partial void OnAtgProbeTypeIdChanged();
        partial void OnCommunicationControllerIdChanging(System.Guid value);
        
        partial void OnCommunicationControllerIdChanged();
        partial void OnMaxWaterHeightChanging(decimal value);
        
        partial void OnMaxWaterHeightChanged();
        partial void OnMinFuelHeightChanging(decimal value);
        
        partial void OnMinFuelHeightChanged();
        partial void OnMaxFuelHeightChanging(decimal value);
        
        partial void OnMaxFuelHeightChanged();
        partial void OnTankNumberChanging(int value);
        
        partial void OnTankNumberChanged();
        partial void OnTankSerialNumberChanging(string value);
        
        partial void OnTankSerialNumberChanged();
        partial void OnFuelLevelBaseChanging(decimal value);
        
        partial void OnFuelLevelBaseChanged();
        partial void OnWaterLevelBaseChanging(decimal value);
        
        partial void OnWaterLevelBaseChanged();
        partial void OnTemperatireChanging(decimal value);
        
        partial void OnTemperatireChanged();
        partial void OnOffestWaterChanging(decimal value);
        
        partial void OnOffestWaterChanged();
        partial void OnIsVirtualChanging(bool? value);
        
        partial void OnIsVirtualChanged();
        partial void OnOrderLimitChanging(decimal? value);
        
        partial void OnOrderLimitChanged();
        partial void OnAlarmThresholdChanging(int? value);
        
        partial void OnAlarmThresholdChanged();
        partial void OnAtgProbeTypeChanging(AtgProbeType value);

        partial void OnAtgProbeTypeChanged();
        partial void OnCommunicationControllerChanging(CommunicationController value);

        partial void OnCommunicationControllerChanged();
        partial void OnFuelTypeChanging(FuelType value);

        partial void OnFuelTypeChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class SystemEventDatum : EntityBase, INotifyPropertyChanged {

        private System.Guid _SystemEventDataId;

        private System.Guid _SystemEventId;

        private string _PropertyName;

        private string _Value;

        private bool _IsAlertTrigger;

        private SystemEvent _SystemEvent;

        public SystemEventDatum()
        {
            OnCreated();
        }

        public virtual System.Guid SystemEventDataId
        {
            get
            {
                return this._SystemEventDataId;
            }
            set
            {
                if (this._SystemEventDataId != value)
                {
                    this.OnSystemEventDataIdChanging(value);
                    this._SystemEventDataId = value;
                    this.SendPropertyChanged("SystemEventDataId");
                    this.OnSystemEventDataIdChanged();
                }
            }
        }

        public virtual System.Guid SystemEventId
        {
            get
            {
                return this._SystemEventId;
            }
            set
            {
                if (this._SystemEventId != value)
                {
                    this.OnSystemEventIdChanging(value);
                    this._SystemEventId = value;
                    this.SendPropertyChanged("SystemEventId");
                    this.OnSystemEventIdChanged();
                }
            }
        }

        public virtual string PropertyName
        {
            get
            {
                return this._PropertyName;
            }
            set
            {
                if (this._PropertyName != value)
                {
                    this.OnPropertyNameChanging(value);
                    this._PropertyName = value;
                    this.SendPropertyChanged("PropertyName");
                    this.OnPropertyNameChanged();
                }
            }
        }

        public virtual string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

        public virtual bool IsAlertTrigger
        {
            get
            {
                return this._IsAlertTrigger;
            }
            set
            {
                if (this._IsAlertTrigger != value)
                {
                    this.OnIsAlertTriggerChanging(value);
                    this._IsAlertTrigger = value;
                    this.SendPropertyChanged("IsAlertTrigger");
                    this.OnIsAlertTriggerChanged();
                }
            }
        }

        public virtual SystemEvent SystemEvent
        {
            get
            {
                return this._SystemEvent;
            }
            set
            {
                if (this._SystemEvent != value)
                {
                    this.OnSystemEventChanging(value);
                    this._SystemEvent = value;
                    this.SendPropertyChanged("SystemEvent");
                    this.OnSystemEventChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnSystemEventDataIdChanging(System.Guid value);
        
        partial void OnSystemEventDataIdChanged();
        partial void OnSystemEventIdChanging(System.Guid value);
        
        partial void OnSystemEventIdChanged();
        partial void OnPropertyNameChanging(string value);
        
        partial void OnPropertyNameChanged();
        partial void OnValueChanging(string value);
        
        partial void OnValueChanged();
        partial void OnIsAlertTriggerChanging(bool value);
        
        partial void OnIsAlertTriggerChanged();
        partial void OnSystemEventChanging(SystemEvent value);

        partial void OnSystemEventChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class SystemEvent : EntityBase, INotifyPropertyChanged {

        private System.Guid _EventId;

        private int _EventType;

        private string _Message;

        private System.DateTime _EventDate;

        private System.Guid? _NozzleId;

        private System.Guid? _TankId;

        private System.Guid? _DispenserId;

        private System.Guid? _AlertDefinitionId;

        private System.DateTime? _SentDate;

        private System.DateTime? _ResolvedDate;

        private string _ResolveMessage;

        private long _CRC;

        private int? _AlarmType;

        private System.DateTime? _PrintedDate;

        private string _DocumentSign;

        private Tank _Tank;

        private IList<SystemEventDatum> _SystemEventData;

        private Dispenser _Dispenser;

        private AlertDefinition _AlertDefinition;

        private Nozzle _Nozzle;

        public SystemEvent()
        {
            this._SystemEventData = new List<SystemEventDatum>();
            OnCreated();
        }

        public virtual System.Guid EventId
        {
            get
            {
                return this._EventId;
            }
            set
            {
                if (this._EventId != value)
                {
                    this.OnEventIdChanging(value);
                    this._EventId = value;
                    this.SendPropertyChanged("EventId");
                    this.OnEventIdChanged();
                }
            }
        }

        public virtual int EventType
        {
            get
            {
                return this._EventType;
            }
            set
            {
                if (this._EventType != value)
                {
                    this.OnEventTypeChanging(value);
                    this._EventType = value;
                    this.SendPropertyChanged("EventType");
                    this.OnEventTypeChanged();
                }
            }
        }

        public virtual string Message
        {
            get
            {
                return this._Message;
            }
            set
            {
                if (this._Message != value)
                {
                    this.OnMessageChanging(value);
                    this._Message = value;
                    this.SendPropertyChanged("Message");
                    this.OnMessageChanged();
                }
            }
        }

        public virtual System.DateTime EventDate
        {
            get
            {
                return this._EventDate;
            }
            set
            {
                if (this._EventDate != value)
                {
                    this.OnEventDateChanging(value);
                    this._EventDate = value;
                    this.SendPropertyChanged("EventDate");
                    this.OnEventDateChanged();
                }
            }
        }

        public virtual System.Guid? NozzleId
        {
            get
            {
                return this._NozzleId;
            }
            set
            {
                if (this._NozzleId != value)
                {
                    this.OnNozzleIdChanging(value);
                    this._NozzleId = value;
                    this.SendPropertyChanged("NozzleId");
                    this.OnNozzleIdChanged();
                }
            }
        }

        public virtual System.Guid? TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual System.Guid? DispenserId
        {
            get
            {
                return this._DispenserId;
            }
            set
            {
                if (this._DispenserId != value)
                {
                    this.OnDispenserIdChanging(value);
                    this._DispenserId = value;
                    this.SendPropertyChanged("DispenserId");
                    this.OnDispenserIdChanged();
                }
            }
        }

        public virtual System.Guid? AlertDefinitionId
        {
            get
            {
                return this._AlertDefinitionId;
            }
            set
            {
                if (this._AlertDefinitionId != value)
                {
                    this.OnAlertDefinitionIdChanging(value);
                    this._AlertDefinitionId = value;
                    this.SendPropertyChanged("AlertDefinitionId");
                    this.OnAlertDefinitionIdChanged();
                }
            }
        }

        public virtual System.DateTime? SentDate
        {
            get
            {
                return this._SentDate;
            }
            set
            {
                if (this._SentDate != value)
                {
                    this.OnSentDateChanging(value);
                    this._SentDate = value;
                    this.SendPropertyChanged("SentDate");
                    this.OnSentDateChanged();
                }
            }
        }

        public virtual System.DateTime? ResolvedDate
        {
            get
            {
                return this._ResolvedDate;
            }
            set
            {
                if (this._ResolvedDate != value)
                {
                    this.OnResolvedDateChanging(value);
                    this._ResolvedDate = value;
                    this.SendPropertyChanged("ResolvedDate");
                    this.OnResolvedDateChanged();
                }
            }
        }

        public virtual string ResolveMessage
        {
            get
            {
                return this._ResolveMessage;
            }
            set
            {
                if (this._ResolveMessage != value)
                {
                    this.OnResolveMessageChanging(value);
                    this._ResolveMessage = value;
                    this.SendPropertyChanged("ResolveMessage");
                    this.OnResolveMessageChanged();
                }
            }
        }

        public virtual long CRC
        {
            get
            {
                return this._CRC;
            }
            set
            {
                if (this._CRC != value)
                {
                    this.OnCRCChanging(value);
                    this._CRC = value;
                    this.SendPropertyChanged("CRC");
                    this.OnCRCChanged();
                }
            }
        }

        public virtual int? AlarmType
        {
            get
            {
                return this._AlarmType;
            }
            set
            {
                if (this._AlarmType != value)
                {
                    this.OnAlarmTypeChanging(value);
                    this._AlarmType = value;
                    this.SendPropertyChanged("AlarmType");
                    this.OnAlarmTypeChanged();
                }
            }
        }

        public virtual System.DateTime? PrintedDate
        {
            get
            {
                return this._PrintedDate;
            }
            set
            {
                if (this._PrintedDate != value)
                {
                    this.OnPrintedDateChanging(value);
                    this._PrintedDate = value;
                    this.SendPropertyChanged("PrintedDate");
                    this.OnPrintedDateChanged();
                }
            }
        }

        public virtual string DocumentSign
        {
            get
            {
                return this._DocumentSign;
            }
            set
            {
                if (this._DocumentSign != value)
                {
                    this.OnDocumentSignChanging(value);
                    this._DocumentSign = value;
                    this.SendPropertyChanged("DocumentSign");
                    this.OnDocumentSignChanged();
                }
            }
        }

        public virtual Tank Tank
        {
            get
            {
                return this._Tank;
            }
            set
            {
                if (this._Tank != value)
                {
                    this.OnTankChanging(value);
                    this._Tank = value;
                    this.SendPropertyChanged("Tank");
                    this.OnTankChanged();
                }
            }
        }

        public virtual IList<SystemEventDatum> SystemEventData
        {
            get
            {
                return this._SystemEventData;
            }
            set
            {
                if (this._SystemEventData != value)
                {
                    this._SystemEventData = value;
                }
            }
        }

        public virtual Dispenser Dispenser
        {
            get
            {
                return this._Dispenser;
            }
            set
            {
                if (this._Dispenser != value)
                {
                    this.OnDispenserChanging(value);
                    this._Dispenser = value;
                    this.SendPropertyChanged("Dispenser");
                    this.OnDispenserChanged();
                }
            }
        }

        public virtual AlertDefinition AlertDefinition
        {
            get
            {
                return this._AlertDefinition;
            }
            set
            {
                if (this._AlertDefinition != value)
                {
                    this.OnAlertDefinitionChanging(value);
                    this._AlertDefinition = value;
                    this.SendPropertyChanged("AlertDefinition");
                    this.OnAlertDefinitionChanged();
                }
            }
        }

        public virtual Nozzle Nozzle
        {
            get
            {
                return this._Nozzle;
            }
            set
            {
                if (this._Nozzle != value)
                {
                    this.OnNozzleChanging(value);
                    this._Nozzle = value;
                    this.SendPropertyChanged("Nozzle");
                    this.OnNozzleChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnEventIdChanging(System.Guid value);
        
        partial void OnEventIdChanged();
        partial void OnEventTypeChanging(int value);
        
        partial void OnEventTypeChanged();
        partial void OnMessageChanging(string value);
        
        partial void OnMessageChanged();
        partial void OnEventDateChanging(System.DateTime value);
        
        partial void OnEventDateChanged();
        partial void OnNozzleIdChanging(System.Guid? value);
        
        partial void OnNozzleIdChanged();
        partial void OnTankIdChanging(System.Guid? value);
        
        partial void OnTankIdChanged();
        partial void OnDispenserIdChanging(System.Guid? value);
        
        partial void OnDispenserIdChanged();
        partial void OnAlertDefinitionIdChanging(System.Guid? value);
        
        partial void OnAlertDefinitionIdChanged();
        partial void OnSentDateChanging(System.DateTime? value);
        
        partial void OnSentDateChanged();
        partial void OnResolvedDateChanging(System.DateTime? value);
        
        partial void OnResolvedDateChanged();
        partial void OnResolveMessageChanging(string value);
        
        partial void OnResolveMessageChanged();
        partial void OnCRCChanging(long value);
        
        partial void OnCRCChanged();
        partial void OnAlarmTypeChanging(int? value);
        
        partial void OnAlarmTypeChanged();
        partial void OnPrintedDateChanging(System.DateTime? value);
        
        partial void OnPrintedDateChanged();
        partial void OnDocumentSignChanging(string value);
        
        partial void OnDocumentSignChanged();
        partial void OnTankChanging(Tank value);

        partial void OnTankChanged();
        partial void OnDispenserChanging(Dispenser value);

        partial void OnDispenserChanged();
        partial void OnAlertDefinitionChanging(AlertDefinition value);

        partial void OnAlertDefinitionChanged();
        partial void OnNozzleChanging(Nozzle value);

        partial void OnNozzleChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class SendLog : EntityBase, INotifyPropertyChanged {

        private System.Guid _SendLogId;

        private System.DateTime _SendDate;

        private string _Action;

        private string _SendData;

        private int? _SentStatus;

        private System.DateTime? _LastSent;

        private string _EntityIdentity;

        public SendLog()
        {
            OnCreated();
        }

        public virtual System.Guid SendLogId
        {
            get
            {
                return this._SendLogId;
            }
            set
            {
                if (this._SendLogId != value)
                {
                    this.OnSendLogIdChanging(value);
                    this._SendLogId = value;
                    this.SendPropertyChanged("SendLogId");
                    this.OnSendLogIdChanged();
                }
            }
        }

        public virtual System.DateTime SendDate
        {
            get
            {
                return this._SendDate;
            }
            set
            {
                if (this._SendDate != value)
                {
                    this.OnSendDateChanging(value);
                    this._SendDate = value;
                    this.SendPropertyChanged("SendDate");
                    this.OnSendDateChanged();
                }
            }
        }

        public virtual string Action
        {
            get
            {
                return this._Action;
            }
            set
            {
                if (this._Action != value)
                {
                    this.OnActionChanging(value);
                    this._Action = value;
                    this.SendPropertyChanged("Action");
                    this.OnActionChanged();
                }
            }
        }

        public virtual string SendData
        {
            get
            {
                return this._SendData;
            }
            set
            {
                if (this._SendData != value)
                {
                    this.OnSendDataChanging(value);
                    this._SendData = value;
                    this.SendPropertyChanged("SendData");
                    this.OnSendDataChanged();
                }
            }
        }

        public virtual int? SentStatus
        {
            get
            {
                return this._SentStatus;
            }
            set
            {
                if (this._SentStatus != value)
                {
                    this.OnSentStatusChanging(value);
                    this._SentStatus = value;
                    this.SendPropertyChanged("SentStatus");
                    this.OnSentStatusChanged();
                }
            }
        }

        public virtual System.DateTime? LastSent
        {
            get
            {
                return this._LastSent;
            }
            set
            {
                if (this._LastSent != value)
                {
                    this.OnLastSentChanging(value);
                    this._LastSent = value;
                    this.SendPropertyChanged("LastSent");
                    this.OnLastSentChanged();
                }
            }
        }

        public virtual string EntityIdentity
        {
            get
            {
                return this._EntityIdentity;
            }
            set
            {
                if (this._EntityIdentity != value)
                {
                    this.OnEntityIdentityChanging(value);
                    this._EntityIdentity = value;
                    this.SendPropertyChanged("EntityIdentity");
                    this.OnEntityIdentityChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnSendLogIdChanging(System.Guid value);
        
        partial void OnSendLogIdChanged();
        partial void OnSendDateChanging(System.DateTime value);
        
        partial void OnSendDateChanged();
        partial void OnActionChanging(string value);
        
        partial void OnActionChanged();
        partial void OnSendDataChanging(string value);
        
        partial void OnSendDataChanged();
        partial void OnSentStatusChanging(int? value);
        
        partial void OnSentStatusChanged();
        partial void OnLastSentChanging(System.DateTime? value);
        
        partial void OnLastSentChanged();
        partial void OnEntityIdentityChanging(string value);
        
        partial void OnEntityIdentityChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class SalesTransaction : EntityBase, INotifyPropertyChanged {

        private System.Guid _SalesTransactionId;

        private System.Guid _UsagePeriodId;

        private bool _IsLocked;

        private long _CRC;

        private System.Guid _NozzleId;

        private decimal _TotalizerStart;

        private decimal _TotalizerEnd;

        private System.DateTime _TransactionTimeStamp;

        private decimal _Volume;

        private decimal _VolumeNormalized;

        private decimal _TemperatureStart;

        private decimal _TemperatureEnd;

        private decimal _UnitPrice;

        private decimal _TotalPrice;

        private System.Guid _ApplicationUserId;

        private System.DateTime? _SentDateTime;

        private string _ResponseCode;

        private System.Guid? _ShiftId;

        private bool? _IsErrorResolving;

        private bool? _InvalidSale;

        private decimal? _DiscountPercentage;

        private UsagePeriod _UsagePeriod;

        private IList<TankSale> _TankSales;

        private ApplicationUser _ApplicationUser;

        private Nozzle _Nozzle;

        private IList<InvoiceLine> _InvoiceLines;

        private IList<Balance> _Balances;

        public SalesTransaction()
        {
            this._TankSales = new List<TankSale>();
            this._InvoiceLines = new List<InvoiceLine>();
            this._Balances = new List<Balance>();
            OnCreated();
        }

        public virtual System.Guid SalesTransactionId
        {
            get
            {
                return this._SalesTransactionId;
            }
            set
            {
                if (this._SalesTransactionId != value)
                {
                    this.OnSalesTransactionIdChanging(value);
                    this._SalesTransactionId = value;
                    this.SendPropertyChanged("SalesTransactionId");
                    this.OnSalesTransactionIdChanged();
                }
            }
        }

        public virtual System.Guid UsagePeriodId
        {
            get
            {
                return this._UsagePeriodId;
            }
            set
            {
                if (this._UsagePeriodId != value)
                {
                    this.OnUsagePeriodIdChanging(value);
                    this._UsagePeriodId = value;
                    this.SendPropertyChanged("UsagePeriodId");
                    this.OnUsagePeriodIdChanged();
                }
            }
        }

        public virtual bool IsLocked
        {
            get
            {
                return this._IsLocked;
            }
            set
            {
                if (this._IsLocked != value)
                {
                    this.OnIsLockedChanging(value);
                    this._IsLocked = value;
                    this.SendPropertyChanged("IsLocked");
                    this.OnIsLockedChanged();
                }
            }
        }

        public virtual long CRC
        {
            get
            {
                return this._CRC;
            }
            set
            {
                if (this._CRC != value)
                {
                    this.OnCRCChanging(value);
                    this._CRC = value;
                    this.SendPropertyChanged("CRC");
                    this.OnCRCChanged();
                }
            }
        }

        public virtual System.Guid NozzleId
        {
            get
            {
                return this._NozzleId;
            }
            set
            {
                if (this._NozzleId != value)
                {
                    this.OnNozzleIdChanging(value);
                    this._NozzleId = value;
                    this.SendPropertyChanged("NozzleId");
                    this.OnNozzleIdChanged();
                }
            }
        }

        public virtual decimal TotalizerStart
        {
            get
            {
                return this._TotalizerStart;
            }
            set
            {
                if (this._TotalizerStart != value)
                {
                    this.OnTotalizerStartChanging(value);
                    this._TotalizerStart = value;
                    this.SendPropertyChanged("TotalizerStart");
                    this.OnTotalizerStartChanged();
                }
            }
        }

        public virtual decimal TotalizerEnd
        {
            get
            {
                return this._TotalizerEnd;
            }
            set
            {
                if (this._TotalizerEnd != value)
                {
                    this.OnTotalizerEndChanging(value);
                    this._TotalizerEnd = value;
                    this.SendPropertyChanged("TotalizerEnd");
                    this.OnTotalizerEndChanged();
                }
            }
        }

        public virtual System.DateTime TransactionTimeStamp
        {
            get
            {
                return this._TransactionTimeStamp;
            }
            set
            {
                if (this._TransactionTimeStamp != value)
                {
                    this.OnTransactionTimeStampChanging(value);
                    this._TransactionTimeStamp = value;
                    this.SendPropertyChanged("TransactionTimeStamp");
                    this.OnTransactionTimeStampChanged();
                }
            }
        }

        public virtual decimal Volume
        {
            get
            {
                return this._Volume;
            }
            set
            {
                if (this._Volume != value)
                {
                    this.OnVolumeChanging(value);
                    this._Volume = value;
                    this.SendPropertyChanged("Volume");
                    this.OnVolumeChanged();
                }
            }
        }

        public virtual decimal VolumeNormalized
        {
            get
            {
                return this._VolumeNormalized;
            }
            set
            {
                if (this._VolumeNormalized != value)
                {
                    this.OnVolumeNormalizedChanging(value);
                    this._VolumeNormalized = value;
                    this.SendPropertyChanged("VolumeNormalized");
                    this.OnVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal TemperatureStart
        {
            get
            {
                return this._TemperatureStart;
            }
            set
            {
                if (this._TemperatureStart != value)
                {
                    this.OnTemperatureStartChanging(value);
                    this._TemperatureStart = value;
                    this.SendPropertyChanged("TemperatureStart");
                    this.OnTemperatureStartChanged();
                }
            }
        }

        public virtual decimal TemperatureEnd
        {
            get
            {
                return this._TemperatureEnd;
            }
            set
            {
                if (this._TemperatureEnd != value)
                {
                    this.OnTemperatureEndChanging(value);
                    this._TemperatureEnd = value;
                    this.SendPropertyChanged("TemperatureEnd");
                    this.OnTemperatureEndChanged();
                }
            }
        }

        public virtual decimal UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        public virtual decimal TotalPrice
        {
            get
            {
                return this._TotalPrice;
            }
            set
            {
                if (this._TotalPrice != value)
                {
                    this.OnTotalPriceChanging(value);
                    this._TotalPrice = value;
                    this.SendPropertyChanged("TotalPrice");
                    this.OnTotalPriceChanged();
                }
            }
        }

        public virtual System.Guid ApplicationUserId
        {
            get
            {
                return this._ApplicationUserId;
            }
            set
            {
                if (this._ApplicationUserId != value)
                {
                    this.OnApplicationUserIdChanging(value);
                    this._ApplicationUserId = value;
                    this.SendPropertyChanged("ApplicationUserId");
                    this.OnApplicationUserIdChanged();
                }
            }
        }

        public virtual System.DateTime? SentDateTime
        {
            get
            {
                return this._SentDateTime;
            }
            set
            {
                if (this._SentDateTime != value)
                {
                    this.OnSentDateTimeChanging(value);
                    this._SentDateTime = value;
                    this.SendPropertyChanged("SentDateTime");
                    this.OnSentDateTimeChanged();
                }
            }
        }

        public virtual string ResponseCode
        {
            get
            {
                return this._ResponseCode;
            }
            set
            {
                if (this._ResponseCode != value)
                {
                    this.OnResponseCodeChanging(value);
                    this._ResponseCode = value;
                    this.SendPropertyChanged("ResponseCode");
                    this.OnResponseCodeChanged();
                }
            }
        }

        public virtual System.Guid? ShiftId
        {
            get
            {
                return this._ShiftId;
            }
            set
            {
                if (this._ShiftId != value)
                {
                    this.OnShiftIdChanging(value);
                    this._ShiftId = value;
                    this.SendPropertyChanged("ShiftId");
                    this.OnShiftIdChanged();
                }
            }
        }

        public virtual bool? IsErrorResolving
        {
            get
            {
                return this._IsErrorResolving;
            }
            set
            {
                if (this._IsErrorResolving != value)
                {
                    this.OnIsErrorResolvingChanging(value);
                    this._IsErrorResolving = value;
                    this.SendPropertyChanged("IsErrorResolving");
                    this.OnIsErrorResolvingChanged();
                }
            }
        }

        public virtual bool? InvalidSale
        {
            get
            {
                return this._InvalidSale;
            }
            set
            {
                if (this._InvalidSale != value)
                {
                    this.OnInvalidSaleChanging(value);
                    this._InvalidSale = value;
                    this.SendPropertyChanged("InvalidSale");
                    this.OnInvalidSaleChanged();
                }
            }
        }

        public virtual decimal? DiscountPercentage
        {
            get
            {
                return this._DiscountPercentage;
            }
            set
            {
                if (this._DiscountPercentage != value)
                {
                    this.OnDiscountPercentageChanging(value);
                    this._DiscountPercentage = value;
                    this.SendPropertyChanged("DiscountPercentage");
                    this.OnDiscountPercentageChanged();
                }
            }
        }

        public virtual UsagePeriod UsagePeriod
        {
            get
            {
                return this._UsagePeriod;
            }
            set
            {
                if (this._UsagePeriod != value)
                {
                    this.OnUsagePeriodChanging(value);
                    this._UsagePeriod = value;
                    this.SendPropertyChanged("UsagePeriod");
                    this.OnUsagePeriodChanged();
                }
            }
        }

        public virtual IList<TankSale> TankSales
        {
            get
            {
                return this._TankSales;
            }
            set
            {
                if (this._TankSales != value)
                {
                    this._TankSales = value;
                }
            }
        }

        public virtual ApplicationUser ApplicationUser
        {
            get
            {
                return this._ApplicationUser;
            }
            set
            {
                if (this._ApplicationUser != value)
                {
                    this.OnApplicationUserChanging(value);
                    this._ApplicationUser = value;
                    this.SendPropertyChanged("ApplicationUser");
                    this.OnApplicationUserChanged();
                }
            }
        }

        public virtual Nozzle Nozzle
        {
            get
            {
                return this._Nozzle;
            }
            set
            {
                if (this._Nozzle != value)
                {
                    this.OnNozzleChanging(value);
                    this._Nozzle = value;
                    this.SendPropertyChanged("Nozzle");
                    this.OnNozzleChanged();
                }
            }
        }

        public virtual IList<InvoiceLine> InvoiceLines
        {
            get
            {
                return this._InvoiceLines;
            }
            set
            {
                if (this._InvoiceLines != value)
                {
                    this._InvoiceLines = value;
                }
            }
        }

        public virtual IList<Balance> Balances
        {
            get
            {
                return this._Balances;
            }
            set
            {
                if (this._Balances != value)
                {
                    this._Balances = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnSalesTransactionIdChanging(System.Guid value);
        
        partial void OnSalesTransactionIdChanged();
        partial void OnUsagePeriodIdChanging(System.Guid value);
        
        partial void OnUsagePeriodIdChanged();
        partial void OnIsLockedChanging(bool value);
        
        partial void OnIsLockedChanged();
        partial void OnCRCChanging(long value);
        
        partial void OnCRCChanged();
        partial void OnNozzleIdChanging(System.Guid value);
        
        partial void OnNozzleIdChanged();
        partial void OnTotalizerStartChanging(decimal value);
        
        partial void OnTotalizerStartChanged();
        partial void OnTotalizerEndChanging(decimal value);
        
        partial void OnTotalizerEndChanged();
        partial void OnTransactionTimeStampChanging(System.DateTime value);
        
        partial void OnTransactionTimeStampChanged();
        partial void OnVolumeChanging(decimal value);
        
        partial void OnVolumeChanged();
        partial void OnVolumeNormalizedChanging(decimal value);
        
        partial void OnVolumeNormalizedChanged();
        partial void OnTemperatureStartChanging(decimal value);
        
        partial void OnTemperatureStartChanged();
        partial void OnTemperatureEndChanging(decimal value);
        
        partial void OnTemperatureEndChanged();
        partial void OnUnitPriceChanging(decimal value);
        
        partial void OnUnitPriceChanged();
        partial void OnTotalPriceChanging(decimal value);
        
        partial void OnTotalPriceChanged();
        partial void OnApplicationUserIdChanging(System.Guid value);
        
        partial void OnApplicationUserIdChanged();
        partial void OnSentDateTimeChanging(System.DateTime? value);
        
        partial void OnSentDateTimeChanged();
        partial void OnResponseCodeChanging(string value);
        
        partial void OnResponseCodeChanged();
        partial void OnShiftIdChanging(System.Guid? value);
        
        partial void OnShiftIdChanged();
        partial void OnIsErrorResolvingChanging(bool? value);
        
        partial void OnIsErrorResolvingChanged();
        partial void OnInvalidSaleChanging(bool? value);
        
        partial void OnInvalidSaleChanged();
        partial void OnDiscountPercentageChanging(decimal? value);
        
        partial void OnDiscountPercentageChanged();
        partial void OnUsagePeriodChanging(UsagePeriod value);

        partial void OnUsagePeriodChanged();
        partial void OnApplicationUserChanging(ApplicationUser value);

        partial void OnApplicationUserChanged();
        partial void OnNozzleChanging(Nozzle value);

        partial void OnNozzleChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class PriceListTimeSpan : EntityBase, INotifyPropertyChanged {

        private System.Guid _PriceListTimeSpanId;

        private int _FromTime;

        private int _ToTime;

        private System.Guid? _PriceListId;

        private PriceList _PriceList;

        public PriceListTimeSpan()
        {
            OnCreated();
        }

        public virtual System.Guid PriceListTimeSpanId
        {
            get
            {
                return this._PriceListTimeSpanId;
            }
            set
            {
                if (this._PriceListTimeSpanId != value)
                {
                    this.OnPriceListTimeSpanIdChanging(value);
                    this._PriceListTimeSpanId = value;
                    this.SendPropertyChanged("PriceListTimeSpanId");
                    this.OnPriceListTimeSpanIdChanged();
                }
            }
        }

        public virtual int FromTime
        {
            get
            {
                return this._FromTime;
            }
            set
            {
                if (this._FromTime != value)
                {
                    this.OnFromTimeChanging(value);
                    this._FromTime = value;
                    this.SendPropertyChanged("FromTime");
                    this.OnFromTimeChanged();
                }
            }
        }

        public virtual int ToTime
        {
            get
            {
                return this._ToTime;
            }
            set
            {
                if (this._ToTime != value)
                {
                    this.OnToTimeChanging(value);
                    this._ToTime = value;
                    this.SendPropertyChanged("ToTime");
                    this.OnToTimeChanged();
                }
            }
        }

        public virtual System.Guid? PriceListId
        {
            get
            {
                return this._PriceListId;
            }
            set
            {
                if (this._PriceListId != value)
                {
                    this.OnPriceListIdChanging(value);
                    this._PriceListId = value;
                    this.SendPropertyChanged("PriceListId");
                    this.OnPriceListIdChanged();
                }
            }
        }

        public virtual PriceList PriceList
        {
            get
            {
                return this._PriceList;
            }
            set
            {
                if (this._PriceList != value)
                {
                    this.OnPriceListChanging(value);
                    this._PriceList = value;
                    this.SendPropertyChanged("PriceList");
                    this.OnPriceListChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnPriceListTimeSpanIdChanging(System.Guid value);
        
        partial void OnPriceListTimeSpanIdChanged();
        partial void OnFromTimeChanging(int value);
        
        partial void OnFromTimeChanged();
        partial void OnToTimeChanging(int value);
        
        partial void OnToTimeChanged();
        partial void OnPriceListIdChanging(System.Guid? value);
        
        partial void OnPriceListIdChanged();
        partial void OnPriceListChanging(PriceList value);

        partial void OnPriceListChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class PriceList : EntityBase, INotifyPropertyChanged {

        private System.Guid _PriceListId;

        private string _Name;

        private System.DateTime _StartDate;

        private System.DateTime? _EndDate;

        private bool _IsTraderPriceList;

        private IList<Trader> _Traders;

        private IList<PriceListTimeSpan> _PriceListTimeSpans;

        private IList<NozzlePriceList> _NozzlePriceLists;

        public PriceList()
        {
            this._Traders = new List<Trader>();
            this._PriceListTimeSpans = new List<PriceListTimeSpan>();
            this._NozzlePriceLists = new List<NozzlePriceList>();
            OnCreated();
        }

        public virtual System.Guid PriceListId
        {
            get
            {
                return this._PriceListId;
            }
            set
            {
                if (this._PriceListId != value)
                {
                    this.OnPriceListIdChanging(value);
                    this._PriceListId = value;
                    this.SendPropertyChanged("PriceListId");
                    this.OnPriceListIdChanged();
                }
            }
        }

        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        public virtual System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

        public virtual System.DateTime? EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

        public virtual bool IsTraderPriceList
        {
            get
            {
                return this._IsTraderPriceList;
            }
            set
            {
                if (this._IsTraderPriceList != value)
                {
                    this.OnIsTraderPriceListChanging(value);
                    this._IsTraderPriceList = value;
                    this.SendPropertyChanged("IsTraderPriceList");
                    this.OnIsTraderPriceListChanged();
                }
            }
        }

        public virtual IList<Trader> Traders
        {
            get
            {
                return this._Traders;
            }
            set
            {
                if (this._Traders != value)
                {
                    this._Traders = value;
                }
            }
        }

        public virtual IList<PriceListTimeSpan> PriceListTimeSpans
        {
            get
            {
                return this._PriceListTimeSpans;
            }
            set
            {
                if (this._PriceListTimeSpans != value)
                {
                    this._PriceListTimeSpans = value;
                }
            }
        }

        public virtual IList<NozzlePriceList> NozzlePriceLists
        {
            get
            {
                return this._NozzlePriceLists;
            }
            set
            {
                if (this._NozzlePriceLists != value)
                {
                    this._NozzlePriceLists = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnPriceListIdChanging(System.Guid value);
        
        partial void OnPriceListIdChanged();
        partial void OnNameChanging(string value);
        
        partial void OnNameChanged();
        partial void OnStartDateChanging(System.DateTime value);
        
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime? value);
        
        partial void OnEndDateChanged();
        partial void OnIsTraderPriceListChanging(bool value);
        
        partial void OnIsTraderPriceListChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class PendingSend : EntityBase, INotifyPropertyChanged {

        private System.Guid _PendingSendId;

        private string _PendingData;

        private string _DataType;

        private string _AssemblyFile;

        public PendingSend()
        {
            OnCreated();
        }

        public virtual System.Guid PendingSendId
        {
            get
            {
                return this._PendingSendId;
            }
            set
            {
                if (this._PendingSendId != value)
                {
                    this.OnPendingSendIdChanging(value);
                    this._PendingSendId = value;
                    this.SendPropertyChanged("PendingSendId");
                    this.OnPendingSendIdChanged();
                }
            }
        }

        public virtual string PendingData
        {
            get
            {
                return this._PendingData;
            }
            set
            {
                if (this._PendingData != value)
                {
                    this.OnPendingDataChanging(value);
                    this._PendingData = value;
                    this.SendPropertyChanged("PendingData");
                    this.OnPendingDataChanged();
                }
            }
        }

        public virtual string DataType
        {
            get
            {
                return this._DataType;
            }
            set
            {
                if (this._DataType != value)
                {
                    this.OnDataTypeChanging(value);
                    this._DataType = value;
                    this.SendPropertyChanged("DataType");
                    this.OnDataTypeChanged();
                }
            }
        }

        public virtual string AssemblyFile
        {
            get
            {
                return this._AssemblyFile;
            }
            set
            {
                if (this._AssemblyFile != value)
                {
                    this.OnAssemblyFileChanging(value);
                    this._AssemblyFile = value;
                    this.SendPropertyChanged("AssemblyFile");
                    this.OnAssemblyFileChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnPendingSendIdChanging(System.Guid value);
        
        partial void OnPendingSendIdChanged();
        partial void OnPendingDataChanging(string value);
        
        partial void OnPendingDataChanged();
        partial void OnDataTypeChanging(string value);
        
        partial void OnDataTypeChanged();
        partial void OnAssemblyFileChanging(string value);
        
        partial void OnAssemblyFileChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class Option : EntityBase, INotifyPropertyChanged {

        private System.Guid _OptionId;

        private string _OptionKey;

        private string _OptionValue;

        private string _Description;

        public Option()
        {
            OnCreated();
        }

        public virtual System.Guid OptionId
        {
            get
            {
                return this._OptionId;
            }
            set
            {
                if (this._OptionId != value)
                {
                    this.OnOptionIdChanging(value);
                    this._OptionId = value;
                    this.SendPropertyChanged("OptionId");
                    this.OnOptionIdChanged();
                }
            }
        }

        public virtual string OptionKey
        {
            get
            {
                return this._OptionKey;
            }
            set
            {
                if (this._OptionKey != value)
                {
                    this.OnOptionKeyChanging(value);
                    this._OptionKey = value;
                    this.SendPropertyChanged("OptionKey");
                    this.OnOptionKeyChanged();
                }
            }
        }

        public virtual string OptionValue
        {
            get
            {
                return this._OptionValue;
            }
            set
            {
                if (this._OptionValue != value)
                {
                    this.OnOptionValueChanging(value);
                    this._OptionValue = value;
                    this.SendPropertyChanged("OptionValue");
                    this.OnOptionValueChanged();
                }
            }
        }

        public virtual string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnOptionIdChanging(System.Guid value);
        
        partial void OnOptionIdChanged();
        partial void OnOptionKeyChanging(string value);
        
        partial void OnOptionKeyChanged();
        partial void OnOptionValueChanging(string value);
        
        partial void OnOptionValueChanged();
        partial void OnDescriptionChanging(string value);
        
        partial void OnDescriptionChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class NozzleUsagePeriod : EntityBase, INotifyPropertyChanged {

        private System.Guid _NozzleUsagePeriodId;

        private System.Guid _NozzleId;

        private System.Guid _UsagePeriodId;

        private System.DateTime _MeasurementDateTime;

        private System.DateTime _ExpirationDate;

        private decimal _TotalVolume;

        private long _CRC;

        private UsagePeriod _UsagePeriod;

        private Nozzle _Nozzle;

        public NozzleUsagePeriod()
        {
            OnCreated();
        }

        public virtual System.Guid NozzleUsagePeriodId
        {
            get
            {
                return this._NozzleUsagePeriodId;
            }
            set
            {
                if (this._NozzleUsagePeriodId != value)
                {
                    this.OnNozzleUsagePeriodIdChanging(value);
                    this._NozzleUsagePeriodId = value;
                    this.SendPropertyChanged("NozzleUsagePeriodId");
                    this.OnNozzleUsagePeriodIdChanged();
                }
            }
        }

        public virtual System.Guid NozzleId
        {
            get
            {
                return this._NozzleId;
            }
            set
            {
                if (this._NozzleId != value)
                {
                    this.OnNozzleIdChanging(value);
                    this._NozzleId = value;
                    this.SendPropertyChanged("NozzleId");
                    this.OnNozzleIdChanged();
                }
            }
        }

        public virtual System.Guid UsagePeriodId
        {
            get
            {
                return this._UsagePeriodId;
            }
            set
            {
                if (this._UsagePeriodId != value)
                {
                    this.OnUsagePeriodIdChanging(value);
                    this._UsagePeriodId = value;
                    this.SendPropertyChanged("UsagePeriodId");
                    this.OnUsagePeriodIdChanged();
                }
            }
        }

        public virtual System.DateTime MeasurementDateTime
        {
            get
            {
                return this._MeasurementDateTime;
            }
            set
            {
                if (this._MeasurementDateTime != value)
                {
                    this.OnMeasurementDateTimeChanging(value);
                    this._MeasurementDateTime = value;
                    this.SendPropertyChanged("MeasurementDateTime");
                    this.OnMeasurementDateTimeChanged();
                }
            }
        }

        public virtual System.DateTime ExpirationDate
        {
            get
            {
                return this._ExpirationDate;
            }
            set
            {
                if (this._ExpirationDate != value)
                {
                    this.OnExpirationDateChanging(value);
                    this._ExpirationDate = value;
                    this.SendPropertyChanged("ExpirationDate");
                    this.OnExpirationDateChanged();
                }
            }
        }

        public virtual decimal TotalVolume
        {
            get
            {
                return this._TotalVolume;
            }
            set
            {
                if (this._TotalVolume != value)
                {
                    this.OnTotalVolumeChanging(value);
                    this._TotalVolume = value;
                    this.SendPropertyChanged("TotalVolume");
                    this.OnTotalVolumeChanged();
                }
            }
        }

        public virtual long CRC
        {
            get
            {
                return this._CRC;
            }
            set
            {
                if (this._CRC != value)
                {
                    this.OnCRCChanging(value);
                    this._CRC = value;
                    this.SendPropertyChanged("CRC");
                    this.OnCRCChanged();
                }
            }
        }

        public virtual UsagePeriod UsagePeriod
        {
            get
            {
                return this._UsagePeriod;
            }
            set
            {
                if (this._UsagePeriod != value)
                {
                    this.OnUsagePeriodChanging(value);
                    this._UsagePeriod = value;
                    this.SendPropertyChanged("UsagePeriod");
                    this.OnUsagePeriodChanged();
                }
            }
        }

        public virtual Nozzle Nozzle
        {
            get
            {
                return this._Nozzle;
            }
            set
            {
                if (this._Nozzle != value)
                {
                    this.OnNozzleChanging(value);
                    this._Nozzle = value;
                    this.SendPropertyChanged("Nozzle");
                    this.OnNozzleChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnNozzleUsagePeriodIdChanging(System.Guid value);
        
        partial void OnNozzleUsagePeriodIdChanged();
        partial void OnNozzleIdChanging(System.Guid value);
        
        partial void OnNozzleIdChanged();
        partial void OnUsagePeriodIdChanging(System.Guid value);
        
        partial void OnUsagePeriodIdChanged();
        partial void OnMeasurementDateTimeChanging(System.DateTime value);
        
        partial void OnMeasurementDateTimeChanged();
        partial void OnExpirationDateChanging(System.DateTime value);
        
        partial void OnExpirationDateChanged();
        partial void OnTotalVolumeChanging(decimal value);
        
        partial void OnTotalVolumeChanged();
        partial void OnCRCChanging(long value);
        
        partial void OnCRCChanged();
        partial void OnUsagePeriodChanging(UsagePeriod value);

        partial void OnUsagePeriodChanged();
        partial void OnNozzleChanging(Nozzle value);

        partial void OnNozzleChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class NozzlePriceList : EntityBase, INotifyPropertyChanged {

        private System.Guid _NozzlePriceListId;

        private System.Guid? _PriceListId;

        private System.Guid? _NozzleId;

        private decimal? _Discount;

        private PriceList _PriceList;

        private Nozzle _Nozzle;

        public NozzlePriceList()
        {
            OnCreated();
        }

        public virtual System.Guid NozzlePriceListId
        {
            get
            {
                return this._NozzlePriceListId;
            }
            set
            {
                if (this._NozzlePriceListId != value)
                {
                    this.OnNozzlePriceListIdChanging(value);
                    this._NozzlePriceListId = value;
                    this.SendPropertyChanged("NozzlePriceListId");
                    this.OnNozzlePriceListIdChanged();
                }
            }
        }

        public virtual System.Guid? PriceListId
        {
            get
            {
                return this._PriceListId;
            }
            set
            {
                if (this._PriceListId != value)
                {
                    this.OnPriceListIdChanging(value);
                    this._PriceListId = value;
                    this.SendPropertyChanged("PriceListId");
                    this.OnPriceListIdChanged();
                }
            }
        }

        public virtual System.Guid? NozzleId
        {
            get
            {
                return this._NozzleId;
            }
            set
            {
                if (this._NozzleId != value)
                {
                    this.OnNozzleIdChanging(value);
                    this._NozzleId = value;
                    this.SendPropertyChanged("NozzleId");
                    this.OnNozzleIdChanged();
                }
            }
        }

        public virtual decimal? Discount
        {
            get
            {
                return this._Discount;
            }
            set
            {
                if (this._Discount != value)
                {
                    this.OnDiscountChanging(value);
                    this._Discount = value;
                    this.SendPropertyChanged("Discount");
                    this.OnDiscountChanged();
                }
            }
        }

        public virtual PriceList PriceList
        {
            get
            {
                return this._PriceList;
            }
            set
            {
                if (this._PriceList != value)
                {
                    this.OnPriceListChanging(value);
                    this._PriceList = value;
                    this.SendPropertyChanged("PriceList");
                    this.OnPriceListChanged();
                }
            }
        }

        public virtual Nozzle Nozzle
        {
            get
            {
                return this._Nozzle;
            }
            set
            {
                if (this._Nozzle != value)
                {
                    this.OnNozzleChanging(value);
                    this._Nozzle = value;
                    this.SendPropertyChanged("Nozzle");
                    this.OnNozzleChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnNozzlePriceListIdChanging(System.Guid value);
        
        partial void OnNozzlePriceListIdChanged();
        partial void OnPriceListIdChanging(System.Guid? value);
        
        partial void OnPriceListIdChanged();
        partial void OnNozzleIdChanging(System.Guid? value);
        
        partial void OnNozzleIdChanged();
        partial void OnDiscountChanging(decimal? value);
        
        partial void OnDiscountChanged();
        partial void OnPriceListChanging(PriceList value);

        partial void OnPriceListChanged();
        partial void OnNozzleChanging(Nozzle value);

        partial void OnNozzleChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class NozzleFlow : EntityBase, INotifyPropertyChanged {

        private System.Guid _NozzleFlowId;

        private System.Guid _NozzleId;

        private System.Guid _TankId;

        private short _FlowState;

        private Tank _Tank;

        private Nozzle _Nozzle;

        public NozzleFlow()
        {
            OnCreated();
        }

        public virtual System.Guid NozzleFlowId
        {
            get
            {
                return this._NozzleFlowId;
            }
            set
            {
                if (this._NozzleFlowId != value)
                {
                    this.OnNozzleFlowIdChanging(value);
                    this._NozzleFlowId = value;
                    this.SendPropertyChanged("NozzleFlowId");
                    this.OnNozzleFlowIdChanged();
                }
            }
        }

        public virtual System.Guid NozzleId
        {
            get
            {
                return this._NozzleId;
            }
            set
            {
                if (this._NozzleId != value)
                {
                    this.OnNozzleIdChanging(value);
                    this._NozzleId = value;
                    this.SendPropertyChanged("NozzleId");
                    this.OnNozzleIdChanged();
                }
            }
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual short FlowState
        {
            get
            {
                return this._FlowState;
            }
            set
            {
                if (this._FlowState != value)
                {
                    this.OnFlowStateChanging(value);
                    this._FlowState = value;
                    this.SendPropertyChanged("FlowState");
                    this.OnFlowStateChanged();
                }
            }
        }

        public virtual Tank Tank
        {
            get
            {
                return this._Tank;
            }
            set
            {
                if (this._Tank != value)
                {
                    this.OnTankChanging(value);
                    this._Tank = value;
                    this.SendPropertyChanged("Tank");
                    this.OnTankChanged();
                }
            }
        }

        public virtual Nozzle Nozzle
        {
            get
            {
                return this._Nozzle;
            }
            set
            {
                if (this._Nozzle != value)
                {
                    this.OnNozzleChanging(value);
                    this._Nozzle = value;
                    this.SendPropertyChanged("Nozzle");
                    this.OnNozzleChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnNozzleFlowIdChanging(System.Guid value);
        
        partial void OnNozzleFlowIdChanged();
        partial void OnNozzleIdChanging(System.Guid value);
        
        partial void OnNozzleIdChanged();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnFlowStateChanging(short value);
        
        partial void OnFlowStateChanged();
        partial void OnTankChanging(Tank value);

        partial void OnTankChanged();
        partial void OnNozzleChanging(Nozzle value);

        partial void OnNozzleChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class Nozzle : EntityBase, INotifyPropertyChanged {

        private System.Guid _NozzleId;

        private System.Guid _DispenserId;

        private decimal _TotalCounter;

        private int _Channel;

        private int _Address;

        private string _Name;

        private System.Guid _FuelTypeId;

        private int _OrderId;

        private int _NozzleState;

        private string _SerialNumber;

        private int _OfficialNozzleNumber;

        private int? _NozzleIndex;

        private IList<SystemEvent> _SystemEvents;

        private IList<SalesTransaction> _SalesTransactions;

        private IList<NozzleUsagePeriod> _NozzleUsagePeriods;

        private IList<NozzlePriceList> _NozzlePriceLists;

        private IList<NozzleFlow> _NozzleFlows;

        private Dispenser _Dispenser;

        private FuelType _FuelType;

        private IList<DispenserSetting> _DispenserSettings;

        private IList<OutdoorPaymentTerminalNozzle> _OutdoorPaymentTerminalNozzles;

        public Nozzle()
        {
            this._SystemEvents = new List<SystemEvent>();
            this._SalesTransactions = new List<SalesTransaction>();
            this._NozzleUsagePeriods = new List<NozzleUsagePeriod>();
            this._NozzlePriceLists = new List<NozzlePriceList>();
            this._NozzleFlows = new List<NozzleFlow>();
            this._DispenserSettings = new List<DispenserSetting>();
            this._OutdoorPaymentTerminalNozzles = new List<OutdoorPaymentTerminalNozzle>();
            OnCreated();
        }

        public virtual System.Guid NozzleId
        {
            get
            {
                return this._NozzleId;
            }
            set
            {
                if (this._NozzleId != value)
                {
                    this.OnNozzleIdChanging(value);
                    this._NozzleId = value;
                    this.SendPropertyChanged("NozzleId");
                    this.OnNozzleIdChanged();
                }
            }
        }

        public virtual System.Guid DispenserId
        {
            get
            {
                return this._DispenserId;
            }
            set
            {
                if (this._DispenserId != value)
                {
                    this.OnDispenserIdChanging(value);
                    this._DispenserId = value;
                    this.SendPropertyChanged("DispenserId");
                    this.OnDispenserIdChanged();
                }
            }
        }

        public virtual decimal TotalCounter
        {
            get
            {
                return this._TotalCounter;
            }
            set
            {
                if (this._TotalCounter != value)
                {
                    this.OnTotalCounterChanging(value);
                    this._TotalCounter = value;
                    this.SendPropertyChanged("TotalCounter");
                    this.OnTotalCounterChanged();
                }
            }
        }

        public virtual int Channel
        {
            get
            {
                return this._Channel;
            }
            set
            {
                if (this._Channel != value)
                {
                    this.OnChannelChanging(value);
                    this._Channel = value;
                    this.SendPropertyChanged("Channel");
                    this.OnChannelChanged();
                }
            }
        }

        public virtual int Address
        {
            get
            {
                return this._Address;
            }
            set
            {
                if (this._Address != value)
                {
                    this.OnAddressChanging(value);
                    this._Address = value;
                    this.SendPropertyChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }

        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        public virtual System.Guid FuelTypeId
        {
            get
            {
                return this._FuelTypeId;
            }
            set
            {
                if (this._FuelTypeId != value)
                {
                    this.OnFuelTypeIdChanging(value);
                    this._FuelTypeId = value;
                    this.SendPropertyChanged("FuelTypeId");
                    this.OnFuelTypeIdChanged();
                }
            }
        }

        public virtual int OrderId
        {
            get
            {
                return this._OrderId;
            }
            set
            {
                if (this._OrderId != value)
                {
                    this.OnOrderIdChanging(value);
                    this._OrderId = value;
                    this.SendPropertyChanged("OrderId");
                    this.OnOrderIdChanged();
                }
            }
        }

        public virtual int NozzleState
        {
            get
            {
                return this._NozzleState;
            }
            set
            {
                if (this._NozzleState != value)
                {
                    this.OnNozzleStateChanging(value);
                    this._NozzleState = value;
                    this.SendPropertyChanged("NozzleState");
                    this.OnNozzleStateChanged();
                }
            }
        }

        public virtual string SerialNumber
        {
            get
            {
                return this._SerialNumber;
            }
            set
            {
                if (this._SerialNumber != value)
                {
                    this.OnSerialNumberChanging(value);
                    this._SerialNumber = value;
                    this.SendPropertyChanged("SerialNumber");
                    this.OnSerialNumberChanged();
                }
            }
        }

        public virtual int OfficialNozzleNumber
        {
            get
            {
                return this._OfficialNozzleNumber;
            }
            set
            {
                if (this._OfficialNozzleNumber != value)
                {
                    this.OnOfficialNozzleNumberChanging(value);
                    this._OfficialNozzleNumber = value;
                    this.SendPropertyChanged("OfficialNozzleNumber");
                    this.OnOfficialNozzleNumberChanged();
                }
            }
        }

        public virtual int? NozzleIndex
        {
            get
            {
                return this._NozzleIndex;
            }
            set
            {
                if (this._NozzleIndex != value)
                {
                    this.OnNozzleIndexChanging(value);
                    this._NozzleIndex = value;
                    this.SendPropertyChanged("NozzleIndex");
                    this.OnNozzleIndexChanged();
                }
            }
        }

        public virtual IList<SystemEvent> SystemEvents
        {
            get
            {
                return this._SystemEvents;
            }
            set
            {
                if (this._SystemEvents != value)
                {
                    this._SystemEvents = value;
                }
            }
        }

        public virtual IList<SalesTransaction> SalesTransactions
        {
            get
            {
                return this._SalesTransactions;
            }
            set
            {
                if (this._SalesTransactions != value)
                {
                    this._SalesTransactions = value;
                }
            }
        }

        public virtual IList<NozzleUsagePeriod> NozzleUsagePeriods
        {
            get
            {
                return this._NozzleUsagePeriods;
            }
            set
            {
                if (this._NozzleUsagePeriods != value)
                {
                    this._NozzleUsagePeriods = value;
                }
            }
        }

        public virtual IList<NozzlePriceList> NozzlePriceLists
        {
            get
            {
                return this._NozzlePriceLists;
            }
            set
            {
                if (this._NozzlePriceLists != value)
                {
                    this._NozzlePriceLists = value;
                }
            }
        }

        public virtual IList<NozzleFlow> NozzleFlows
        {
            get
            {
                return this._NozzleFlows;
            }
            set
            {
                if (this._NozzleFlows != value)
                {
                    this._NozzleFlows = value;
                }
            }
        }

        public virtual Dispenser Dispenser
        {
            get
            {
                return this._Dispenser;
            }
            set
            {
                if (this._Dispenser != value)
                {
                    this.OnDispenserChanging(value);
                    this._Dispenser = value;
                    this.SendPropertyChanged("Dispenser");
                    this.OnDispenserChanged();
                }
            }
        }

        public virtual FuelType FuelType
        {
            get
            {
                return this._FuelType;
            }
            set
            {
                if (this._FuelType != value)
                {
                    this.OnFuelTypeChanging(value);
                    this._FuelType = value;
                    this.SendPropertyChanged("FuelType");
                    this.OnFuelTypeChanged();
                }
            }
        }

        public virtual IList<DispenserSetting> DispenserSettings
        {
            get
            {
                return this._DispenserSettings;
            }
            set
            {
                if (this._DispenserSettings != value)
                {
                    this._DispenserSettings = value;
                }
            }
        }

        public virtual IList<OutdoorPaymentTerminalNozzle> OutdoorPaymentTerminalNozzles
        {
            get
            {
                return this._OutdoorPaymentTerminalNozzles;
            }
            set
            {
                if (this._OutdoorPaymentTerminalNozzles != value)
                {
                    this._OutdoorPaymentTerminalNozzles = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnNozzleIdChanging(System.Guid value);
        
        partial void OnNozzleIdChanged();
        partial void OnDispenserIdChanging(System.Guid value);
        
        partial void OnDispenserIdChanged();
        partial void OnTotalCounterChanging(decimal value);
        
        partial void OnTotalCounterChanged();
        partial void OnChannelChanging(int value);
        
        partial void OnChannelChanged();
        partial void OnAddressChanging(int value);
        
        partial void OnAddressChanged();
        partial void OnNameChanging(string value);
        
        partial void OnNameChanged();
        partial void OnFuelTypeIdChanging(System.Guid value);
        
        partial void OnFuelTypeIdChanged();
        partial void OnOrderIdChanging(int value);
        
        partial void OnOrderIdChanged();
        partial void OnNozzleStateChanging(int value);
        
        partial void OnNozzleStateChanged();
        partial void OnSerialNumberChanging(string value);
        
        partial void OnSerialNumberChanged();
        partial void OnOfficialNozzleNumberChanging(int value);
        
        partial void OnOfficialNozzleNumberChanged();
        partial void OnNozzleIndexChanging(int? value);
        
        partial void OnNozzleIndexChanged();
        partial void OnDispenserChanging(Dispenser value);

        partial void OnDispenserChanged();
        partial void OnFuelTypeChanging(FuelType value);

        partial void OnFuelTypeChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class Normalization : EntityBase, INotifyPropertyChanged {

        private System.Guid _NormalizationId;

        private System.Guid _FuelTypeId;

        private long _Density;

        private long _Temperature;

        private long _ThermalCoefficient;

        private FuelType _FuelType;

        public Normalization()
        {
            OnCreated();
        }

        public virtual System.Guid NormalizationId
        {
            get
            {
                return this._NormalizationId;
            }
            set
            {
                if (this._NormalizationId != value)
                {
                    this.OnNormalizationIdChanging(value);
                    this._NormalizationId = value;
                    this.SendPropertyChanged("NormalizationId");
                    this.OnNormalizationIdChanged();
                }
            }
        }

        public virtual System.Guid FuelTypeId
        {
            get
            {
                return this._FuelTypeId;
            }
            set
            {
                if (this._FuelTypeId != value)
                {
                    this.OnFuelTypeIdChanging(value);
                    this._FuelTypeId = value;
                    this.SendPropertyChanged("FuelTypeId");
                    this.OnFuelTypeIdChanged();
                }
            }
        }

        public virtual long Density
        {
            get
            {
                return this._Density;
            }
            set
            {
                if (this._Density != value)
                {
                    this.OnDensityChanging(value);
                    this._Density = value;
                    this.SendPropertyChanged("Density");
                    this.OnDensityChanged();
                }
            }
        }

        public virtual long Temperature
        {
            get
            {
                return this._Temperature;
            }
            set
            {
                if (this._Temperature != value)
                {
                    this.OnTemperatureChanging(value);
                    this._Temperature = value;
                    this.SendPropertyChanged("Temperature");
                    this.OnTemperatureChanged();
                }
            }
        }

        public virtual long ThermalCoefficient
        {
            get
            {
                return this._ThermalCoefficient;
            }
            set
            {
                if (this._ThermalCoefficient != value)
                {
                    this.OnThermalCoefficientChanging(value);
                    this._ThermalCoefficient = value;
                    this.SendPropertyChanged("ThermalCoefficient");
                    this.OnThermalCoefficientChanged();
                }
            }
        }

        public virtual FuelType FuelType
        {
            get
            {
                return this._FuelType;
            }
            set
            {
                if (this._FuelType != value)
                {
                    this.OnFuelTypeChanging(value);
                    this._FuelType = value;
                    this.SendPropertyChanged("FuelType");
                    this.OnFuelTypeChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnNormalizationIdChanging(System.Guid value);
        
        partial void OnNormalizationIdChanged();
        partial void OnFuelTypeIdChanging(System.Guid value);
        
        partial void OnFuelTypeIdChanged();
        partial void OnDensityChanging(long value);
        
        partial void OnDensityChanged();
        partial void OnTemperatureChanging(long value);
        
        partial void OnTemperatureChanged();
        partial void OnThermalCoefficientChanging(long value);
        
        partial void OnThermalCoefficientChanged();
        partial void OnFuelTypeChanging(FuelType value);

        partial void OnFuelTypeChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class InvoiceType : EntityBase, INotifyPropertyChanged {

        private System.Guid _InvoiceTypeId;

        private string _Description;

        private string _Abbreviation;

        private int _LastNumber;

        private int _TransactionType;

        private bool _Printable;

        private int _OfficialEnumerator;

        private string _Printer;

        private System.Guid? _InvoiceFormId;

        private bool? _IsInternal;

        private string _InternalDeliveryDescription;

        private bool? _NeedsVehicle;

        private bool? _IsCancelation;

        private bool? _HasFinancialTransactions;

        private bool? _IsLaserPrint;

        private int? _TransactionSign;

        private bool? _ShowFinancialData;

        private int? _DeliveryType;

        private bool? _AdminView;

        private bool? _Invalidated;

        private bool? _DispenserType;

        private bool? _ForcesDelivery;

        private bool? _RetailInvoice;

        private bool? _IncludeInBalance;

        private string _DefaultSeries;

        private bool _SendToMyData;

        private IList<Trader> _Traders;

        private InvoiceForm _InvoiceForm;

        private IList<InvoicePrint> _InvoicePrints;

        private IList<Invoice> _Invoices;

        private IList<FleetManagerDispenser> _FleetManagerDispensers;

        private IList<InvoiceTypeTransform> _InvoiceTypeTransforms_ParentInvoiceTypeId;

        private IList<InvoiceTypeTransform> _InvoiceTypeTransforms_ChildInvoiceTypeId;

        private IList<InvoiceTypeTransform> _InvoiceTypeTransforms_CreationInvoiceTypeId;

        public InvoiceType()
        {
            this._Traders = new List<Trader>();
            this._InvoicePrints = new List<InvoicePrint>();
            this._Invoices = new List<Invoice>();
            this._FleetManagerDispensers = new List<FleetManagerDispenser>();
            this._InvoiceTypeTransforms_ParentInvoiceTypeId = new List<InvoiceTypeTransform>();
            this._InvoiceTypeTransforms_ChildInvoiceTypeId = new List<InvoiceTypeTransform>();
            this._InvoiceTypeTransforms_CreationInvoiceTypeId = new List<InvoiceTypeTransform>();
            OnCreated();
        }

        public virtual System.Guid InvoiceTypeId
        {
            get
            {
                return this._InvoiceTypeId;
            }
            set
            {
                if (this._InvoiceTypeId != value)
                {
                    this.OnInvoiceTypeIdChanging(value);
                    this._InvoiceTypeId = value;
                    this.SendPropertyChanged("InvoiceTypeId");
                    this.OnInvoiceTypeIdChanged();
                }
            }
        }

        public virtual string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        public virtual string Abbreviation
        {
            get
            {
                return this._Abbreviation;
            }
            set
            {
                if (this._Abbreviation != value)
                {
                    this.OnAbbreviationChanging(value);
                    this._Abbreviation = value;
                    this.SendPropertyChanged("Abbreviation");
                    this.OnAbbreviationChanged();
                }
            }
        }

        public virtual int LastNumber
        {
            get
            {
                return this._LastNumber;
            }
            set
            {
                if (this._LastNumber != value)
                {
                    this.OnLastNumberChanging(value);
                    this._LastNumber = value;
                    this.SendPropertyChanged("LastNumber");
                    this.OnLastNumberChanged();
                }
            }
        }

        public virtual int TransactionType
        {
            get
            {
                return this._TransactionType;
            }
            set
            {
                if (this._TransactionType != value)
                {
                    this.OnTransactionTypeChanging(value);
                    this._TransactionType = value;
                    this.SendPropertyChanged("TransactionType");
                    this.OnTransactionTypeChanged();
                }
            }
        }

        public virtual bool Printable
        {
            get
            {
                return this._Printable;
            }
            set
            {
                if (this._Printable != value)
                {
                    this.OnPrintableChanging(value);
                    this._Printable = value;
                    this.SendPropertyChanged("Printable");
                    this.OnPrintableChanged();
                }
            }
        }

        public virtual int OfficialEnumerator
        {
            get
            {
                return this._OfficialEnumerator;
            }
            set
            {
                if (this._OfficialEnumerator != value)
                {
                    this.OnOfficialEnumeratorChanging(value);
                    this._OfficialEnumerator = value;
                    this.SendPropertyChanged("OfficialEnumerator");
                    this.OnOfficialEnumeratorChanged();
                }
            }
        }

        public virtual string Printer
        {
            get
            {
                return this._Printer;
            }
            set
            {
                if (this._Printer != value)
                {
                    this.OnPrinterChanging(value);
                    this._Printer = value;
                    this.SendPropertyChanged("Printer");
                    this.OnPrinterChanged();
                }
            }
        }

        public virtual System.Guid? InvoiceFormId
        {
            get
            {
                return this._InvoiceFormId;
            }
            set
            {
                if (this._InvoiceFormId != value)
                {
                    this.OnInvoiceFormIdChanging(value);
                    this._InvoiceFormId = value;
                    this.SendPropertyChanged("InvoiceFormId");
                    this.OnInvoiceFormIdChanged();
                }
            }
        }

        public virtual bool? IsInternal
        {
            get
            {
                return this._IsInternal;
            }
            set
            {
                if (this._IsInternal != value)
                {
                    this.OnIsInternalChanging(value);
                    this._IsInternal = value;
                    this.SendPropertyChanged("IsInternal");
                    this.OnIsInternalChanged();
                }
            }
        }

        public virtual string InternalDeliveryDescription
        {
            get
            {
                return this._InternalDeliveryDescription;
            }
            set
            {
                if (this._InternalDeliveryDescription != value)
                {
                    this.OnInternalDeliveryDescriptionChanging(value);
                    this._InternalDeliveryDescription = value;
                    this.SendPropertyChanged("InternalDeliveryDescription");
                    this.OnInternalDeliveryDescriptionChanged();
                }
            }
        }

        public virtual bool? NeedsVehicle
        {
            get
            {
                return this._NeedsVehicle;
            }
            set
            {
                if (this._NeedsVehicle != value)
                {
                    this.OnNeedsVehicleChanging(value);
                    this._NeedsVehicle = value;
                    this.SendPropertyChanged("NeedsVehicle");
                    this.OnNeedsVehicleChanged();
                }
            }
        }

        public virtual bool? IsCancelation
        {
            get
            {
                return this._IsCancelation;
            }
            set
            {
                if (this._IsCancelation != value)
                {
                    this.OnIsCancelationChanging(value);
                    this._IsCancelation = value;
                    this.SendPropertyChanged("IsCancelation");
                    this.OnIsCancelationChanged();
                }
            }
        }

        public virtual bool? HasFinancialTransactions
        {
            get
            {
                return this._HasFinancialTransactions;
            }
            set
            {
                if (this._HasFinancialTransactions != value)
                {
                    this.OnHasFinancialTransactionsChanging(value);
                    this._HasFinancialTransactions = value;
                    this.SendPropertyChanged("HasFinancialTransactions");
                    this.OnHasFinancialTransactionsChanged();
                }
            }
        }

        public virtual bool? IsLaserPrint
        {
            get
            {
                return this._IsLaserPrint;
            }
            set
            {
                if (this._IsLaserPrint != value)
                {
                    this.OnIsLaserPrintChanging(value);
                    this._IsLaserPrint = value;
                    this.SendPropertyChanged("IsLaserPrint");
                    this.OnIsLaserPrintChanged();
                }
            }
        }

        public virtual int? TransactionSign
        {
            get
            {
                return this._TransactionSign;
            }
            set
            {
                if (this._TransactionSign != value)
                {
                    this.OnTransactionSignChanging(value);
                    this._TransactionSign = value;
                    this.SendPropertyChanged("TransactionSign");
                    this.OnTransactionSignChanged();
                }
            }
        }

        public virtual bool? ShowFinancialData
        {
            get
            {
                return this._ShowFinancialData;
            }
            set
            {
                if (this._ShowFinancialData != value)
                {
                    this.OnShowFinancialDataChanging(value);
                    this._ShowFinancialData = value;
                    this.SendPropertyChanged("ShowFinancialData");
                    this.OnShowFinancialDataChanged();
                }
            }
        }

        public virtual int? DeliveryType
        {
            get
            {
                return this._DeliveryType;
            }
            set
            {
                if (this._DeliveryType != value)
                {
                    this.OnDeliveryTypeChanging(value);
                    this._DeliveryType = value;
                    this.SendPropertyChanged("DeliveryType");
                    this.OnDeliveryTypeChanged();
                }
            }
        }

        public virtual bool? AdminView
        {
            get
            {
                return this._AdminView;
            }
            set
            {
                if (this._AdminView != value)
                {
                    this.OnAdminViewChanging(value);
                    this._AdminView = value;
                    this.SendPropertyChanged("AdminView");
                    this.OnAdminViewChanged();
                }
            }
        }

        public virtual bool? Invalidated
        {
            get
            {
                return this._Invalidated;
            }
            set
            {
                if (this._Invalidated != value)
                {
                    this.OnInvalidatedChanging(value);
                    this._Invalidated = value;
                    this.SendPropertyChanged("Invalidated");
                    this.OnInvalidatedChanged();
                }
            }
        }

        public virtual bool? DispenserType
        {
            get
            {
                return this._DispenserType;
            }
            set
            {
                if (this._DispenserType != value)
                {
                    this.OnDispenserTypeChanging(value);
                    this._DispenserType = value;
                    this.SendPropertyChanged("DispenserType");
                    this.OnDispenserTypeChanged();
                }
            }
        }

        public virtual bool? ForcesDelivery
        {
            get
            {
                return this._ForcesDelivery;
            }
            set
            {
                if (this._ForcesDelivery != value)
                {
                    this.OnForcesDeliveryChanging(value);
                    this._ForcesDelivery = value;
                    this.SendPropertyChanged("ForcesDelivery");
                    this.OnForcesDeliveryChanged();
                }
            }
        }

        public virtual bool? RetailInvoice
        {
            get
            {
                return this._RetailInvoice;
            }
            set
            {
                if (this._RetailInvoice != value)
                {
                    this.OnRetailInvoiceChanging(value);
                    this._RetailInvoice = value;
                    this.SendPropertyChanged("RetailInvoice");
                    this.OnRetailInvoiceChanged();
                }
            }
        }

        public virtual bool? IncludeInBalance
        {
            get
            {
                return this._IncludeInBalance;
            }
            set
            {
                if (this._IncludeInBalance != value)
                {
                    this.OnIncludeInBalanceChanging(value);
                    this._IncludeInBalance = value;
                    this.SendPropertyChanged("IncludeInBalance");
                    this.OnIncludeInBalanceChanged();
                }
            }
        }

        public virtual string DefaultSeries
        {
            get
            {
                return this._DefaultSeries;
            }
            set
            {
                if (this._DefaultSeries != value)
                {
                    this.OnDefaultSeriesChanging(value);
                    this._DefaultSeries = value;
                    this.SendPropertyChanged("DefaultSeries");
                    this.OnDefaultSeriesChanged();
                }
            }
        }

        public virtual bool SendToMyData
        {
            get
            {
                return this._SendToMyData;
            }
            set
            {
                if (this._SendToMyData != value)
                {
                    this.OnSendToMyDataChanging(value);
                    this._SendToMyData = value;
                    this.SendPropertyChanged("SendToMyData");
                    this.OnSendToMyDataChanged();
                }
            }
        }

        public virtual IList<Trader> Traders
        {
            get
            {
                return this._Traders;
            }
            set
            {
                if (this._Traders != value)
                {
                    this._Traders = value;
                }
            }
        }

        public virtual InvoiceForm InvoiceForm
        {
            get
            {
                return this._InvoiceForm;
            }
            set
            {
                if (this._InvoiceForm != value)
                {
                    this.OnInvoiceFormChanging(value);
                    this._InvoiceForm = value;
                    this.SendPropertyChanged("InvoiceForm");
                    this.OnInvoiceFormChanged();
                }
            }
        }

        public virtual IList<InvoicePrint> InvoicePrints
        {
            get
            {
                return this._InvoicePrints;
            }
            set
            {
                if (this._InvoicePrints != value)
                {
                    this._InvoicePrints = value;
                }
            }
        }

        public virtual IList<Invoice> Invoices
        {
            get
            {
                return this._Invoices;
            }
            set
            {
                if (this._Invoices != value)
                {
                    this._Invoices = value;
                }
            }
        }

        public virtual IList<FleetManagerDispenser> FleetManagerDispensers
        {
            get
            {
                return this._FleetManagerDispensers;
            }
            set
            {
                if (this._FleetManagerDispensers != value)
                {
                    this._FleetManagerDispensers = value;
                }
            }
        }

        public virtual IList<InvoiceTypeTransform> InvoiceTypeTransforms_ParentInvoiceTypeId
        {
            get
            {
                return this._InvoiceTypeTransforms_ParentInvoiceTypeId;
            }
            set
            {
                if (this._InvoiceTypeTransforms_ParentInvoiceTypeId != value)
                {
                    this._InvoiceTypeTransforms_ParentInvoiceTypeId = value;
                }
            }
        }

        public virtual IList<InvoiceTypeTransform> InvoiceTypeTransforms_ChildInvoiceTypeId
        {
            get
            {
                return this._InvoiceTypeTransforms_ChildInvoiceTypeId;
            }
            set
            {
                if (this._InvoiceTypeTransforms_ChildInvoiceTypeId != value)
                {
                    this._InvoiceTypeTransforms_ChildInvoiceTypeId = value;
                }
            }
        }

        public virtual IList<InvoiceTypeTransform> InvoiceTypeTransforms_CreationInvoiceTypeId
        {
            get
            {
                return this._InvoiceTypeTransforms_CreationInvoiceTypeId;
            }
            set
            {
                if (this._InvoiceTypeTransforms_CreationInvoiceTypeId != value)
                {
                    this._InvoiceTypeTransforms_CreationInvoiceTypeId = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnInvoiceTypeIdChanging(System.Guid value);
        
        partial void OnInvoiceTypeIdChanged();
        partial void OnDescriptionChanging(string value);
        
        partial void OnDescriptionChanged();
        partial void OnAbbreviationChanging(string value);
        
        partial void OnAbbreviationChanged();
        partial void OnLastNumberChanging(int value);
        
        partial void OnLastNumberChanged();
        partial void OnTransactionTypeChanging(int value);
        
        partial void OnTransactionTypeChanged();
        partial void OnPrintableChanging(bool value);
        
        partial void OnPrintableChanged();
        partial void OnOfficialEnumeratorChanging(int value);
        
        partial void OnOfficialEnumeratorChanged();
        partial void OnPrinterChanging(string value);
        
        partial void OnPrinterChanged();
        partial void OnInvoiceFormIdChanging(System.Guid? value);
        
        partial void OnInvoiceFormIdChanged();
        partial void OnIsInternalChanging(bool? value);
        
        partial void OnIsInternalChanged();
        partial void OnInternalDeliveryDescriptionChanging(string value);
        
        partial void OnInternalDeliveryDescriptionChanged();
        partial void OnNeedsVehicleChanging(bool? value);
        
        partial void OnNeedsVehicleChanged();
        partial void OnIsCancelationChanging(bool? value);
        
        partial void OnIsCancelationChanged();
        partial void OnHasFinancialTransactionsChanging(bool? value);
        
        partial void OnHasFinancialTransactionsChanged();
        partial void OnIsLaserPrintChanging(bool? value);
        
        partial void OnIsLaserPrintChanged();
        partial void OnTransactionSignChanging(int? value);
        
        partial void OnTransactionSignChanged();
        partial void OnShowFinancialDataChanging(bool? value);
        
        partial void OnShowFinancialDataChanged();
        partial void OnDeliveryTypeChanging(int? value);
        
        partial void OnDeliveryTypeChanged();
        partial void OnAdminViewChanging(bool? value);
        
        partial void OnAdminViewChanged();
        partial void OnInvalidatedChanging(bool? value);
        
        partial void OnInvalidatedChanged();
        partial void OnDispenserTypeChanging(bool? value);
        
        partial void OnDispenserTypeChanged();
        partial void OnForcesDeliveryChanging(bool? value);
        
        partial void OnForcesDeliveryChanged();
        partial void OnRetailInvoiceChanging(bool? value);
        
        partial void OnRetailInvoiceChanged();
        partial void OnIncludeInBalanceChanging(bool? value);
        
        partial void OnIncludeInBalanceChanged();
        partial void OnDefaultSeriesChanging(string value);
        
        partial void OnDefaultSeriesChanged();
        partial void OnSendToMyDataChanging(bool value);
        
        partial void OnSendToMyDataChanged();
        partial void OnInvoiceFormChanging(InvoiceForm value);

        partial void OnInvoiceFormChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class InvoiceRelation : EntityBase, INotifyPropertyChanged {

        private System.Guid _InvoiceRelationId;

        private System.Guid _ParentInvoiceId;

        private System.Guid _ChildInvoiceId;

        private int _RelationType;

        private Invoice _ChildInvoice;

        private Invoice _ParentInvoice;

        private IList<InvoiceLine> _InvoiceLines;

        private IList<InvoiceLineRelation> _InvoiceLineRelations;

        public InvoiceRelation()
        {
            this._InvoiceLines = new List<InvoiceLine>();
            this._InvoiceLineRelations = new List<InvoiceLineRelation>();
            OnCreated();
        }

        public virtual System.Guid InvoiceRelationId
        {
            get
            {
                return this._InvoiceRelationId;
            }
            set
            {
                if (this._InvoiceRelationId != value)
                {
                    this.OnInvoiceRelationIdChanging(value);
                    this._InvoiceRelationId = value;
                    this.SendPropertyChanged("InvoiceRelationId");
                    this.OnInvoiceRelationIdChanged();
                }
            }
        }

        public virtual System.Guid ParentInvoiceId
        {
            get
            {
                return this._ParentInvoiceId;
            }
            set
            {
                if (this._ParentInvoiceId != value)
                {
                    this.OnParentInvoiceIdChanging(value);
                    this._ParentInvoiceId = value;
                    this.SendPropertyChanged("ParentInvoiceId");
                    this.OnParentInvoiceIdChanged();
                }
            }
        }

        public virtual System.Guid ChildInvoiceId
        {
            get
            {
                return this._ChildInvoiceId;
            }
            set
            {
                if (this._ChildInvoiceId != value)
                {
                    this.OnChildInvoiceIdChanging(value);
                    this._ChildInvoiceId = value;
                    this.SendPropertyChanged("ChildInvoiceId");
                    this.OnChildInvoiceIdChanged();
                }
            }
        }

        public virtual int RelationType
        {
            get
            {
                return this._RelationType;
            }
            set
            {
                if (this._RelationType != value)
                {
                    this.OnRelationTypeChanging(value);
                    this._RelationType = value;
                    this.SendPropertyChanged("RelationType");
                    this.OnRelationTypeChanged();
                }
            }
        }

        public virtual Invoice ChildInvoice
        {
            get
            {
                return this._ChildInvoice;
            }
            set
            {
                if (this._ChildInvoice != value)
                {
                    this.OnChildInvoiceChanging(value);
                    this._ChildInvoice = value;
                    this.SendPropertyChanged("ChildInvoice");
                    this.OnChildInvoiceChanged();
                }
            }
        }

        public virtual Invoice ParentInvoice
        {
            get
            {
                return this._ParentInvoice;
            }
            set
            {
                if (this._ParentInvoice != value)
                {
                    this.OnParentInvoiceChanging(value);
                    this._ParentInvoice = value;
                    this.SendPropertyChanged("ParentInvoice");
                    this.OnParentInvoiceChanged();
                }
            }
        }

        public virtual IList<InvoiceLine> InvoiceLines
        {
            get
            {
                return this._InvoiceLines;
            }
            set
            {
                if (this._InvoiceLines != value)
                {
                    this._InvoiceLines = value;
                }
            }
        }

        public virtual IList<InvoiceLineRelation> InvoiceLineRelations
        {
            get
            {
                return this._InvoiceLineRelations;
            }
            set
            {
                if (this._InvoiceLineRelations != value)
                {
                    this._InvoiceLineRelations = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnInvoiceRelationIdChanging(System.Guid value);
        
        partial void OnInvoiceRelationIdChanged();
        partial void OnParentInvoiceIdChanging(System.Guid value);
        
        partial void OnParentInvoiceIdChanged();
        partial void OnChildInvoiceIdChanging(System.Guid value);
        
        partial void OnChildInvoiceIdChanged();
        partial void OnRelationTypeChanging(int value);
        
        partial void OnRelationTypeChanged();
        partial void OnChildInvoiceChanging(Invoice value);

        partial void OnChildInvoiceChanged();
        partial void OnParentInvoiceChanging(Invoice value);

        partial void OnParentInvoiceChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class InvoicePrint : EntityBase, INotifyPropertyChanged {

        private System.Guid _InvoicePrintId;

        private System.Guid _DispenserId;

        private string _Printer;

        private System.Guid _DefaultInvoiceType;

        private InvoiceType _InvoiceType;

        private Dispenser _Dispenser;

        public InvoicePrint()
        {
            OnCreated();
        }

        public virtual System.Guid InvoicePrintId
        {
            get
            {
                return this._InvoicePrintId;
            }
            set
            {
                if (this._InvoicePrintId != value)
                {
                    this.OnInvoicePrintIdChanging(value);
                    this._InvoicePrintId = value;
                    this.SendPropertyChanged("InvoicePrintId");
                    this.OnInvoicePrintIdChanged();
                }
            }
        }

        public virtual System.Guid DispenserId
        {
            get
            {
                return this._DispenserId;
            }
            set
            {
                if (this._DispenserId != value)
                {
                    this.OnDispenserIdChanging(value);
                    this._DispenserId = value;
                    this.SendPropertyChanged("DispenserId");
                    this.OnDispenserIdChanged();
                }
            }
        }

        public virtual string Printer
        {
            get
            {
                return this._Printer;
            }
            set
            {
                if (this._Printer != value)
                {
                    this.OnPrinterChanging(value);
                    this._Printer = value;
                    this.SendPropertyChanged("Printer");
                    this.OnPrinterChanged();
                }
            }
        }

        public virtual System.Guid DefaultInvoiceType
        {
            get
            {
                return this._DefaultInvoiceType;
            }
            set
            {
                if (this._DefaultInvoiceType != value)
                {
                    this.OnDefaultInvoiceTypeChanging(value);
                    this._DefaultInvoiceType = value;
                    this.SendPropertyChanged("DefaultInvoiceType");
                    this.OnDefaultInvoiceTypeChanged();
                }
            }
        }

        public virtual InvoiceType InvoiceType
        {
            get
            {
                return this._InvoiceType;
            }
            set
            {
                if (this._InvoiceType != value)
                {
                    this.OnInvoiceTypeChanging(value);
                    this._InvoiceType = value;
                    this.SendPropertyChanged("InvoiceType");
                    this.OnInvoiceTypeChanged();
                }
            }
        }

        public virtual Dispenser Dispenser
        {
            get
            {
                return this._Dispenser;
            }
            set
            {
                if (this._Dispenser != value)
                {
                    this.OnDispenserChanging(value);
                    this._Dispenser = value;
                    this.SendPropertyChanged("Dispenser");
                    this.OnDispenserChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnInvoicePrintIdChanging(System.Guid value);
        
        partial void OnInvoicePrintIdChanged();
        partial void OnDispenserIdChanging(System.Guid value);
        
        partial void OnDispenserIdChanged();
        partial void OnPrinterChanging(string value);
        
        partial void OnPrinterChanged();
        partial void OnDefaultInvoiceTypeChanging(System.Guid value);
        
        partial void OnDefaultInvoiceTypeChanged();
        partial void OnInvoiceTypeChanging(InvoiceType value);

        partial void OnInvoiceTypeChanged();
        partial void OnDispenserChanging(Dispenser value);

        partial void OnDispenserChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class InvoiceLine : EntityBase, INotifyPropertyChanged {

        private System.Guid _InvoiceLineId;

        private System.Guid _InvoiceId;

        private decimal _Volume;

        private decimal _VolumeNormalized;

        private decimal _Temperature;

        private decimal _FuelDensity;

        private decimal _UnitPrice;

        private decimal _TotalPrice;

        private decimal _VatAmount;

        private decimal _VatPercentage;

        private System.Guid? _SaleTransactionId;

        private System.Guid? _TankFillingId;

        private System.Guid _FuelTypeId;

        private decimal _DiscountAmount;

        private System.Guid? _TankId;

        private System.Guid? _InvoiceRelationId;

        private decimal _UnitPriceWhole;

        private decimal _DiscountAmountWhole;

        private decimal _UnitPriceRetail;

        private decimal _DiscountAmountRetail;

        private decimal _DiscountPercentage;

        private TankFilling _TankFilling;

        private Tank _Tank;

        private SalesTransaction _SalesTransaction;

        private FuelType _FuelType;

        private Invoice _Invoice;

        private InvoiceRelation _InvoiceRelation;

        private IList<InvoiceLineRelation> _InvoiceLineRelations_ParentLineId;

        private IList<InvoiceLineRelation> _InvoiceLineRelations_ChildRelationId;

        public InvoiceLine()
        {
            this._InvoiceLineRelations_ParentLineId = new List<InvoiceLineRelation>();
            this._InvoiceLineRelations_ChildRelationId = new List<InvoiceLineRelation>();
            OnCreated();
        }

        public virtual System.Guid InvoiceLineId
        {
            get
            {
                return this._InvoiceLineId;
            }
            set
            {
                if (this._InvoiceLineId != value)
                {
                    this.OnInvoiceLineIdChanging(value);
                    this._InvoiceLineId = value;
                    this.SendPropertyChanged("InvoiceLineId");
                    this.OnInvoiceLineIdChanged();
                }
            }
        }

        public virtual System.Guid InvoiceId
        {
            get
            {
                return this._InvoiceId;
            }
            set
            {
                if (this._InvoiceId != value)
                {
                    this.OnInvoiceIdChanging(value);
                    this._InvoiceId = value;
                    this.SendPropertyChanged("InvoiceId");
                    this.OnInvoiceIdChanged();
                }
            }
        }

        public virtual decimal Volume
        {
            get
            {
                return this._Volume;
            }
            set
            {
                if (this._Volume != value)
                {
                    this.OnVolumeChanging(value);
                    this._Volume = value;
                    this.SendPropertyChanged("Volume");
                    this.OnVolumeChanged();
                }
            }
        }

        public virtual decimal VolumeNormalized
        {
            get
            {
                return this._VolumeNormalized;
            }
            set
            {
                if (this._VolumeNormalized != value)
                {
                    this.OnVolumeNormalizedChanging(value);
                    this._VolumeNormalized = value;
                    this.SendPropertyChanged("VolumeNormalized");
                    this.OnVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal Temperature
        {
            get
            {
                return this._Temperature;
            }
            set
            {
                if (this._Temperature != value)
                {
                    this.OnTemperatureChanging(value);
                    this._Temperature = value;
                    this.SendPropertyChanged("Temperature");
                    this.OnTemperatureChanged();
                }
            }
        }

        public virtual decimal FuelDensity
        {
            get
            {
                return this._FuelDensity;
            }
            set
            {
                if (this._FuelDensity != value)
                {
                    this.OnFuelDensityChanging(value);
                    this._FuelDensity = value;
                    this.SendPropertyChanged("FuelDensity");
                    this.OnFuelDensityChanged();
                }
            }
        }

        public virtual decimal UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        public virtual decimal TotalPrice
        {
            get
            {
                return this._TotalPrice;
            }
            set
            {
                if (this._TotalPrice != value)
                {
                    this.OnTotalPriceChanging(value);
                    this._TotalPrice = value;
                    this.SendPropertyChanged("TotalPrice");
                    this.OnTotalPriceChanged();
                }
            }
        }

        public virtual decimal VatAmount
        {
            get
            {
                return this._VatAmount;
            }
            set
            {
                if (this._VatAmount != value)
                {
                    this.OnVatAmountChanging(value);
                    this._VatAmount = value;
                    this.SendPropertyChanged("VatAmount");
                    this.OnVatAmountChanged();
                }
            }
        }

        public virtual decimal VatPercentage
        {
            get
            {
                return this._VatPercentage;
            }
            set
            {
                if (this._VatPercentage != value)
                {
                    this.OnVatPercentageChanging(value);
                    this._VatPercentage = value;
                    this.SendPropertyChanged("VatPercentage");
                    this.OnVatPercentageChanged();
                }
            }
        }

        public virtual System.Guid? SaleTransactionId
        {
            get
            {
                return this._SaleTransactionId;
            }
            set
            {
                if (this._SaleTransactionId != value)
                {
                    this.OnSaleTransactionIdChanging(value);
                    this._SaleTransactionId = value;
                    this.SendPropertyChanged("SaleTransactionId");
                    this.OnSaleTransactionIdChanged();
                }
            }
        }

        public virtual System.Guid? TankFillingId
        {
            get
            {
                return this._TankFillingId;
            }
            set
            {
                if (this._TankFillingId != value)
                {
                    this.OnTankFillingIdChanging(value);
                    this._TankFillingId = value;
                    this.SendPropertyChanged("TankFillingId");
                    this.OnTankFillingIdChanged();
                }
            }
        }

        public virtual System.Guid FuelTypeId
        {
            get
            {
                return this._FuelTypeId;
            }
            set
            {
                if (this._FuelTypeId != value)
                {
                    this.OnFuelTypeIdChanging(value);
                    this._FuelTypeId = value;
                    this.SendPropertyChanged("FuelTypeId");
                    this.OnFuelTypeIdChanged();
                }
            }
        }

        public virtual decimal DiscountAmount
        {
            get
            {
                return this._DiscountAmount;
            }
            set
            {
                if (this._DiscountAmount != value)
                {
                    this.OnDiscountAmountChanging(value);
                    this._DiscountAmount = value;
                    this.SendPropertyChanged("DiscountAmount");
                    this.OnDiscountAmountChanged();
                }
            }
        }

        public virtual System.Guid? TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual System.Guid? InvoiceRelationId
        {
            get
            {
                return this._InvoiceRelationId;
            }
            set
            {
                if (this._InvoiceRelationId != value)
                {
                    this.OnInvoiceRelationIdChanging(value);
                    this._InvoiceRelationId = value;
                    this.SendPropertyChanged("InvoiceRelationId");
                    this.OnInvoiceRelationIdChanged();
                }
            }
        }

        public virtual decimal UnitPriceWhole
        {
            get
            {
                return this._UnitPriceWhole;
            }
            set
            {
                if (this._UnitPriceWhole != value)
                {
                    this.OnUnitPriceWholeChanging(value);
                    this._UnitPriceWhole = value;
                    this.SendPropertyChanged("UnitPriceWhole");
                    this.OnUnitPriceWholeChanged();
                }
            }
        }

        public virtual decimal DiscountAmountWhole
        {
            get
            {
                return this._DiscountAmountWhole;
            }
            set
            {
                if (this._DiscountAmountWhole != value)
                {
                    this.OnDiscountAmountWholeChanging(value);
                    this._DiscountAmountWhole = value;
                    this.SendPropertyChanged("DiscountAmountWhole");
                    this.OnDiscountAmountWholeChanged();
                }
            }
        }

        public virtual decimal UnitPriceRetail
        {
            get
            {
                return this._UnitPriceRetail;
            }
            set
            {
                if (this._UnitPriceRetail != value)
                {
                    this.OnUnitPriceRetailChanging(value);
                    this._UnitPriceRetail = value;
                    this.SendPropertyChanged("UnitPriceRetail");
                    this.OnUnitPriceRetailChanged();
                }
            }
        }

        public virtual decimal DiscountAmountRetail
        {
            get
            {
                return this._DiscountAmountRetail;
            }
            set
            {
                if (this._DiscountAmountRetail != value)
                {
                    this.OnDiscountAmountRetailChanging(value);
                    this._DiscountAmountRetail = value;
                    this.SendPropertyChanged("DiscountAmountRetail");
                    this.OnDiscountAmountRetailChanged();
                }
            }
        }

        public virtual decimal DiscountPercentage
        {
            get
            {
                return this._DiscountPercentage;
            }
            set
            {
                if (this._DiscountPercentage != value)
                {
                    this.OnDiscountPercentageChanging(value);
                    this._DiscountPercentage = value;
                    this.SendPropertyChanged("DiscountPercentage");
                    this.OnDiscountPercentageChanged();
                }
            }
        }

        public virtual TankFilling TankFilling
        {
            get
            {
                return this._TankFilling;
            }
            set
            {
                if (this._TankFilling != value)
                {
                    this.OnTankFillingChanging(value);
                    this._TankFilling = value;
                    this.SendPropertyChanged("TankFilling");
                    this.OnTankFillingChanged();
                }
            }
        }

        public virtual Tank Tank
        {
            get
            {
                return this._Tank;
            }
            set
            {
                if (this._Tank != value)
                {
                    this.OnTankChanging(value);
                    this._Tank = value;
                    this.SendPropertyChanged("Tank");
                    this.OnTankChanged();
                }
            }
        }

        public virtual SalesTransaction SalesTransaction
        {
            get
            {
                return this._SalesTransaction;
            }
            set
            {
                if (this._SalesTransaction != value)
                {
                    this.OnSalesTransactionChanging(value);
                    this._SalesTransaction = value;
                    this.SendPropertyChanged("SalesTransaction");
                    this.OnSalesTransactionChanged();
                }
            }
        }

        public virtual FuelType FuelType
        {
            get
            {
                return this._FuelType;
            }
            set
            {
                if (this._FuelType != value)
                {
                    this.OnFuelTypeChanging(value);
                    this._FuelType = value;
                    this.SendPropertyChanged("FuelType");
                    this.OnFuelTypeChanged();
                }
            }
        }

        public virtual Invoice Invoice
        {
            get
            {
                return this._Invoice;
            }
            set
            {
                if (this._Invoice != value)
                {
                    this.OnInvoiceChanging(value);
                    this._Invoice = value;
                    this.SendPropertyChanged("Invoice");
                    this.OnInvoiceChanged();
                }
            }
        }

        public virtual InvoiceRelation InvoiceRelation
        {
            get
            {
                return this._InvoiceRelation;
            }
            set
            {
                if (this._InvoiceRelation != value)
                {
                    this.OnInvoiceRelationChanging(value);
                    this._InvoiceRelation = value;
                    this.SendPropertyChanged("InvoiceRelation");
                    this.OnInvoiceRelationChanged();
                }
            }
        }

        public virtual IList<InvoiceLineRelation> InvoiceLineRelations_ParentLineId
        {
            get
            {
                return this._InvoiceLineRelations_ParentLineId;
            }
            set
            {
                if (this._InvoiceLineRelations_ParentLineId != value)
                {
                    this._InvoiceLineRelations_ParentLineId = value;
                }
            }
        }

        public virtual IList<InvoiceLineRelation> InvoiceLineRelations_ChildRelationId
        {
            get
            {
                return this._InvoiceLineRelations_ChildRelationId;
            }
            set
            {
                if (this._InvoiceLineRelations_ChildRelationId != value)
                {
                    this._InvoiceLineRelations_ChildRelationId = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnInvoiceLineIdChanging(System.Guid value);
        
        partial void OnInvoiceLineIdChanged();
        partial void OnInvoiceIdChanging(System.Guid value);
        
        partial void OnInvoiceIdChanged();
        partial void OnVolumeChanging(decimal value);
        
        partial void OnVolumeChanged();
        partial void OnVolumeNormalizedChanging(decimal value);
        
        partial void OnVolumeNormalizedChanged();
        partial void OnTemperatureChanging(decimal value);
        
        partial void OnTemperatureChanged();
        partial void OnFuelDensityChanging(decimal value);
        
        partial void OnFuelDensityChanged();
        partial void OnUnitPriceChanging(decimal value);
        
        partial void OnUnitPriceChanged();
        partial void OnTotalPriceChanging(decimal value);
        
        partial void OnTotalPriceChanged();
        partial void OnVatAmountChanging(decimal value);
        
        partial void OnVatAmountChanged();
        partial void OnVatPercentageChanging(decimal value);
        
        partial void OnVatPercentageChanged();
        partial void OnSaleTransactionIdChanging(System.Guid? value);
        
        partial void OnSaleTransactionIdChanged();
        partial void OnTankFillingIdChanging(System.Guid? value);
        
        partial void OnTankFillingIdChanged();
        partial void OnFuelTypeIdChanging(System.Guid value);
        
        partial void OnFuelTypeIdChanged();
        partial void OnDiscountAmountChanging(decimal value);
        
        partial void OnDiscountAmountChanged();
        partial void OnTankIdChanging(System.Guid? value);
        
        partial void OnTankIdChanged();
        partial void OnInvoiceRelationIdChanging(System.Guid? value);
        
        partial void OnInvoiceRelationIdChanged();
        partial void OnUnitPriceWholeChanging(decimal value);
        
        partial void OnUnitPriceWholeChanged();
        partial void OnDiscountAmountWholeChanging(decimal value);
        
        partial void OnDiscountAmountWholeChanged();
        partial void OnUnitPriceRetailChanging(decimal value);
        
        partial void OnUnitPriceRetailChanged();
        partial void OnDiscountAmountRetailChanging(decimal value);
        
        partial void OnDiscountAmountRetailChanged();
        partial void OnDiscountPercentageChanging(decimal value);
        
        partial void OnDiscountPercentageChanged();
        partial void OnTankFillingChanging(TankFilling value);

        partial void OnTankFillingChanged();
        partial void OnTankChanging(Tank value);

        partial void OnTankChanged();
        partial void OnSalesTransactionChanging(SalesTransaction value);

        partial void OnSalesTransactionChanged();
        partial void OnFuelTypeChanging(FuelType value);

        partial void OnFuelTypeChanged();
        partial void OnInvoiceChanging(Invoice value);

        partial void OnInvoiceChanged();
        partial void OnInvoiceRelationChanging(InvoiceRelation value);

        partial void OnInvoiceRelationChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class InvoiceForm : EntityBase, INotifyPropertyChanged {

        private System.Guid _InvoiceFormId;

        private bool _IsTextForm;

        private string _Data;

        private IList<InvoiceType> _InvoiceTypes;

        private IList<Invoice> _Invoices;

        public InvoiceForm()
        {
            this._InvoiceTypes = new List<InvoiceType>();
            this._Invoices = new List<Invoice>();
            OnCreated();
        }

        public virtual System.Guid InvoiceFormId
        {
            get
            {
                return this._InvoiceFormId;
            }
            set
            {
                if (this._InvoiceFormId != value)
                {
                    this.OnInvoiceFormIdChanging(value);
                    this._InvoiceFormId = value;
                    this.SendPropertyChanged("InvoiceFormId");
                    this.OnInvoiceFormIdChanged();
                }
            }
        }

        public virtual bool IsTextForm
        {
            get
            {
                return this._IsTextForm;
            }
            set
            {
                if (this._IsTextForm != value)
                {
                    this.OnIsTextFormChanging(value);
                    this._IsTextForm = value;
                    this.SendPropertyChanged("IsTextForm");
                    this.OnIsTextFormChanged();
                }
            }
        }

        public virtual string Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }

        public virtual IList<InvoiceType> InvoiceTypes
        {
            get
            {
                return this._InvoiceTypes;
            }
            set
            {
                if (this._InvoiceTypes != value)
                {
                    this._InvoiceTypes = value;
                }
            }
        }

        public virtual IList<Invoice> Invoices
        {
            get
            {
                return this._Invoices;
            }
            set
            {
                if (this._Invoices != value)
                {
                    this._Invoices = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnInvoiceFormIdChanging(System.Guid value);
        
        partial void OnInvoiceFormIdChanged();
        partial void OnIsTextFormChanging(bool value);
        
        partial void OnIsTextFormChanged();
        partial void OnDataChanging(string value);
        
        partial void OnDataChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class Invoice : EntityBase, INotifyPropertyChanged {

        private System.Guid _InvoiceId;

        private System.Guid? _TraderId;

        private int _Number;

        private string _VehiclePlateNumber;

        private string _InvoiceSignature;

        private System.Guid _InvoiceTypeId;

        private System.Guid? _VehicleId;

        private System.DateTime _TransactionDate;

        private decimal? _NettoAmount;

        private decimal? _VatAmount;

        private decimal? _TotalAmount;

        private string _Printer;

        private System.Guid? _InvoiceFormId;

        private System.Guid _ApplicationUserId;

        private string _Series;

        private bool? _IsPrinted;

        private string _Notes;

        private int? _PaymentType;

        private decimal _DiscountAmount;

        private bool? _IsEuromat;

        private string _SupplyNumber;

        private decimal? _LastRestAmount;

        private bool? _AllowEdit;

        private int? _VehicleOdometer;

        private string _DeliveryAddress;

        private string _QRCodeData;

        private decimal _DiscountAmountWhole;

        private decimal _DiscountAmountRetail;

        private decimal _NettoAfterDiscount;

        private string _Mark;

        private Vehicle _Vehicle;

        private Trader _Trader;

        private InvoiceType _InvoiceType;

        private IList<InvoiceRelation> _ParentInvoiceRelations;

        private IList<InvoiceRelation> _ChildInvoiceRelations;

        private IList<InvoiceLine> _InvoiceLines;

        private InvoiceForm _InvoiceForm;

        private ApplicationUser _ApplicationUser;

        private IList<FinTransaction> _FinTransactions;

        public Invoice()
        {
            this._NettoAfterDiscount = 0m;
            this._ParentInvoiceRelations = new List<InvoiceRelation>();
            this._ChildInvoiceRelations = new List<InvoiceRelation>();
            this._InvoiceLines = new List<InvoiceLine>();
            this._FinTransactions = new List<FinTransaction>();
            OnCreated();
        }

        public virtual System.Guid InvoiceId
        {
            get
            {
                return this._InvoiceId;
            }
            set
            {
                if (this._InvoiceId != value)
                {
                    this.OnInvoiceIdChanging(value);
                    this._InvoiceId = value;
                    this.SendPropertyChanged("InvoiceId");
                    this.OnInvoiceIdChanged();
                }
            }
        }

        public virtual System.Guid? TraderId
        {
            get
            {
                return this._TraderId;
            }
            set
            {
                if (this._TraderId != value)
                {
                    this.OnTraderIdChanging(value);
                    this._TraderId = value;
                    this.SendPropertyChanged("TraderId");
                    this.OnTraderIdChanged();
                }
            }
        }

        public virtual int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if (this._Number != value)
                {
                    this.OnNumberChanging(value);
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        public virtual string VehiclePlateNumber
        {
            get
            {
                return this._VehiclePlateNumber;
            }
            set
            {
                if (this._VehiclePlateNumber != value)
                {
                    this.OnVehiclePlateNumberChanging(value);
                    this._VehiclePlateNumber = value;
                    this.SendPropertyChanged("VehiclePlateNumber");
                    this.OnVehiclePlateNumberChanged();
                }
            }
        }

        public virtual string InvoiceSignature
        {
            get
            {
                return this._InvoiceSignature;
            }
            set
            {
                if (this._InvoiceSignature != value)
                {
                    this.OnInvoiceSignatureChanging(value);
                    this._InvoiceSignature = value;
                    this.SendPropertyChanged("InvoiceSignature");
                    this.OnInvoiceSignatureChanged();
                }
            }
        }

        public virtual System.Guid InvoiceTypeId
        {
            get
            {
                return this._InvoiceTypeId;
            }
            set
            {
                if (this._InvoiceTypeId != value)
                {
                    this.OnInvoiceTypeIdChanging(value);
                    this._InvoiceTypeId = value;
                    this.SendPropertyChanged("InvoiceTypeId");
                    this.OnInvoiceTypeIdChanged();
                }
            }
        }

        public virtual System.Guid? VehicleId
        {
            get
            {
                return this._VehicleId;
            }
            set
            {
                if (this._VehicleId != value)
                {
                    this.OnVehicleIdChanging(value);
                    this._VehicleId = value;
                    this.SendPropertyChanged("VehicleId");
                    this.OnVehicleIdChanged();
                }
            }
        }

        public virtual System.DateTime TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

        public virtual decimal? NettoAmount
        {
            get
            {
                return this._NettoAmount;
            }
            set
            {
                if (this._NettoAmount != value)
                {
                    this.OnNettoAmountChanging(value);
                    this._NettoAmount = value;
                    this.SendPropertyChanged("NettoAmount");
                    this.OnNettoAmountChanged();
                }
            }
        }

        public virtual decimal? VatAmount
        {
            get
            {
                return this._VatAmount;
            }
            set
            {
                if (this._VatAmount != value)
                {
                    this.OnVatAmountChanging(value);
                    this._VatAmount = value;
                    this.SendPropertyChanged("VatAmount");
                    this.OnVatAmountChanged();
                }
            }
        }

        public virtual decimal? TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        public virtual string Printer
        {
            get
            {
                return this._Printer;
            }
            set
            {
                if (this._Printer != value)
                {
                    this.OnPrinterChanging(value);
                    this._Printer = value;
                    this.SendPropertyChanged("Printer");
                    this.OnPrinterChanged();
                }
            }
        }

        public virtual System.Guid? InvoiceFormId
        {
            get
            {
                return this._InvoiceFormId;
            }
            set
            {
                if (this._InvoiceFormId != value)
                {
                    this.OnInvoiceFormIdChanging(value);
                    this._InvoiceFormId = value;
                    this.SendPropertyChanged("InvoiceFormId");
                    this.OnInvoiceFormIdChanged();
                }
            }
        }

        public virtual System.Guid ApplicationUserId
        {
            get
            {
                return this._ApplicationUserId;
            }
            set
            {
                if (this._ApplicationUserId != value)
                {
                    this.OnApplicationUserIdChanging(value);
                    this._ApplicationUserId = value;
                    this.SendPropertyChanged("ApplicationUserId");
                    this.OnApplicationUserIdChanged();
                }
            }
        }

        public virtual string Series
        {
            get
            {
                return this._Series;
            }
            set
            {
                if (this._Series != value)
                {
                    this.OnSeriesChanging(value);
                    this._Series = value;
                    this.SendPropertyChanged("Series");
                    this.OnSeriesChanged();
                }
            }
        }

        public virtual bool? IsPrinted
        {
            get
            {
                return this._IsPrinted;
            }
            set
            {
                if (this._IsPrinted != value)
                {
                    this.OnIsPrintedChanging(value);
                    this._IsPrinted = value;
                    this.SendPropertyChanged("IsPrinted");
                    this.OnIsPrintedChanged();
                }
            }
        }

        public virtual string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

        public virtual int? PaymentType
        {
            get
            {
                return this._PaymentType;
            }
            set
            {
                if (this._PaymentType != value)
                {
                    this.OnPaymentTypeChanging(value);
                    this._PaymentType = value;
                    this.SendPropertyChanged("PaymentType");
                    this.OnPaymentTypeChanged();
                }
            }
        }

        public virtual decimal DiscountAmount
        {
            get
            {
                return this._DiscountAmount;
            }
            set
            {
                if (this._DiscountAmount != value)
                {
                    this.OnDiscountAmountChanging(value);
                    this._DiscountAmount = value;
                    this.SendPropertyChanged("DiscountAmount");
                    this.OnDiscountAmountChanged();
                }
            }
        }

        public virtual bool? IsEuromat
        {
            get
            {
                return this._IsEuromat;
            }
            set
            {
                if (this._IsEuromat != value)
                {
                    this.OnIsEuromatChanging(value);
                    this._IsEuromat = value;
                    this.SendPropertyChanged("IsEuromat");
                    this.OnIsEuromatChanged();
                }
            }
        }

        public virtual string SupplyNumber
        {
            get
            {
                return this._SupplyNumber;
            }
            set
            {
                if (this._SupplyNumber != value)
                {
                    this.OnSupplyNumberChanging(value);
                    this._SupplyNumber = value;
                    this.SendPropertyChanged("SupplyNumber");
                    this.OnSupplyNumberChanged();
                }
            }
        }

        public virtual decimal? LastRestAmount
        {
            get
            {
                return this._LastRestAmount;
            }
            set
            {
                if (this._LastRestAmount != value)
                {
                    this.OnLastRestAmountChanging(value);
                    this._LastRestAmount = value;
                    this.SendPropertyChanged("LastRestAmount");
                    this.OnLastRestAmountChanged();
                }
            }
        }

        public virtual bool? AllowEdit
        {
            get
            {
                return this._AllowEdit;
            }
            set
            {
                if (this._AllowEdit != value)
                {
                    this.OnAllowEditChanging(value);
                    this._AllowEdit = value;
                    this.SendPropertyChanged("AllowEdit");
                    this.OnAllowEditChanged();
                }
            }
        }

        public virtual int? VehicleOdometer
        {
            get
            {
                return this._VehicleOdometer;
            }
            set
            {
                if (this._VehicleOdometer != value)
                {
                    this.OnVehicleOdometerChanging(value);
                    this._VehicleOdometer = value;
                    this.SendPropertyChanged("VehicleOdometer");
                    this.OnVehicleOdometerChanged();
                }
            }
        }

        public virtual string DeliveryAddress
        {
            get
            {
                return this._DeliveryAddress;
            }
            set
            {
                if (this._DeliveryAddress != value)
                {
                    this.OnDeliveryAddressChanging(value);
                    this._DeliveryAddress = value;
                    this.SendPropertyChanged("DeliveryAddress");
                    this.OnDeliveryAddressChanged();
                }
            }
        }

        public virtual string QRCodeData
        {
            get
            {
                return this._QRCodeData;
            }
            set
            {
                if (this._QRCodeData != value)
                {
                    this.OnQRCodeDataChanging(value);
                    this._QRCodeData = value;
                    this.SendPropertyChanged("QRCodeData");
                    this.OnQRCodeDataChanged();
                }
            }
        }

        public virtual decimal DiscountAmountWhole
        {
            get
            {
                return this._DiscountAmountWhole;
            }
            set
            {
                if (this._DiscountAmountWhole != value)
                {
                    this.OnDiscountAmountWholeChanging(value);
                    this._DiscountAmountWhole = value;
                    this.SendPropertyChanged("DiscountAmountWhole");
                    this.OnDiscountAmountWholeChanged();
                }
            }
        }

        public virtual decimal DiscountAmountRetail
        {
            get
            {
                return this._DiscountAmountRetail;
            }
            set
            {
                if (this._DiscountAmountRetail != value)
                {
                    this.OnDiscountAmountRetailChanging(value);
                    this._DiscountAmountRetail = value;
                    this.SendPropertyChanged("DiscountAmountRetail");
                    this.OnDiscountAmountRetailChanged();
                }
            }
        }

        public virtual decimal NettoAfterDiscount
        {
            get
            {
                return this._NettoAfterDiscount;
            }
            set
            {
                if (this._NettoAfterDiscount != value)
                {
                    this.OnNettoAfterDiscountChanging(value);
                    this._NettoAfterDiscount = value;
                    this.SendPropertyChanged("NettoAfterDiscount");
                    this.OnNettoAfterDiscountChanged();
                }
            }
        }
        public virtual string Mark
        {
            get
            {
                return this._Mark;
            }
            set
            {
                if (this._Mark != value)
                {
                    this.OnQRCodeDataChanging(value);
                    this._Mark = value;
                    this.SendPropertyChanged("_Mark");
                    this.OnQRCodeDataChanged();
                }
            }
        }

        public virtual Vehicle Vehicle
        {
            get
            {
                return this._Vehicle;
            }
            set
            {
                if (this._Vehicle != value)
                {
                    this.OnVehicleChanging(value);
                    this._Vehicle = value;
                    this.SendPropertyChanged("Vehicle");
                    this.OnVehicleChanged();
                }
            }
        }

        public virtual Trader Trader
        {
            get
            {
                return this._Trader;
            }
            set
            {
                if (this._Trader != value)
                {
                    this.OnTraderChanging(value);
                    this._Trader = value;
                    this.SendPropertyChanged("Trader");
                    this.OnTraderChanged();
                }
            }
        }

        public virtual InvoiceType InvoiceType
        {
            get
            {
                return this._InvoiceType;
            }
            set
            {
                if (this._InvoiceType != value)
                {
                    this.OnInvoiceTypeChanging(value);
                    this._InvoiceType = value;
                    this.SendPropertyChanged("InvoiceType");
                    this.OnInvoiceTypeChanged();
                }
            }
        }

        public virtual IList<InvoiceRelation> ParentInvoiceRelations
        {
            get
            {
                return this._ParentInvoiceRelations;
            }
            set
            {
                if (this._ParentInvoiceRelations != value)
                {
                    this._ParentInvoiceRelations = value;
                }
            }
        }

        public virtual IList<InvoiceRelation> ChildInvoiceRelations
        {
            get
            {
                return this._ChildInvoiceRelations;
            }
            set
            {
                if (this._ChildInvoiceRelations != value)
                {
                    this._ChildInvoiceRelations = value;
                }
            }
        }

        public virtual IList<InvoiceLine> InvoiceLines
        {
            get
            {
                return this._InvoiceLines;
            }
            set
            {
                if (this._InvoiceLines != value)
                {
                    this._InvoiceLines = value;
                }
            }
        }

        public virtual InvoiceForm InvoiceForm
        {
            get
            {
                return this._InvoiceForm;
            }
            set
            {
                if (this._InvoiceForm != value)
                {
                    this.OnInvoiceFormChanging(value);
                    this._InvoiceForm = value;
                    this.SendPropertyChanged("InvoiceForm");
                    this.OnInvoiceFormChanged();
                }
            }
        }

        public virtual ApplicationUser ApplicationUser
        {
            get
            {
                return this._ApplicationUser;
            }
            set
            {
                if (this._ApplicationUser != value)
                {
                    this.OnApplicationUserChanging(value);
                    this._ApplicationUser = value;
                    this.SendPropertyChanged("ApplicationUser");
                    this.OnApplicationUserChanged();
                }
            }
        }

        public virtual IList<FinTransaction> FinTransactions
        {
            get
            {
                return this._FinTransactions;
            }
            set
            {
                if (this._FinTransactions != value)
                {
                    this._FinTransactions = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnInvoiceIdChanging(System.Guid value);
        
        partial void OnInvoiceIdChanged();
        partial void OnTraderIdChanging(System.Guid? value);
        
        partial void OnTraderIdChanged();
        partial void OnNumberChanging(int value);
        
        partial void OnNumberChanged();
        partial void OnVehiclePlateNumberChanging(string value);
        
        partial void OnVehiclePlateNumberChanged();
        partial void OnInvoiceSignatureChanging(string value);
        
        partial void OnInvoiceSignatureChanged();
        partial void OnInvoiceTypeIdChanging(System.Guid value);
        
        partial void OnInvoiceTypeIdChanged();
        partial void OnVehicleIdChanging(System.Guid? value);
        
        partial void OnVehicleIdChanged();
        partial void OnTransactionDateChanging(System.DateTime value);
        
        partial void OnTransactionDateChanged();
        partial void OnNettoAmountChanging(decimal? value);
        
        partial void OnNettoAmountChanged();
        partial void OnVatAmountChanging(decimal? value);
        
        partial void OnVatAmountChanged();
        partial void OnTotalAmountChanging(decimal? value);
        
        partial void OnTotalAmountChanged();
        partial void OnPrinterChanging(string value);
        
        partial void OnPrinterChanged();
        partial void OnInvoiceFormIdChanging(System.Guid? value);
        
        partial void OnInvoiceFormIdChanged();
        partial void OnApplicationUserIdChanging(System.Guid value);
        
        partial void OnApplicationUserIdChanged();
        partial void OnSeriesChanging(string value);
        
        partial void OnSeriesChanged();
        partial void OnIsPrintedChanging(bool? value);
        
        partial void OnIsPrintedChanged();
        partial void OnNotesChanging(string value);
        
        partial void OnNotesChanged();
        partial void OnPaymentTypeChanging(int? value);
        
        partial void OnPaymentTypeChanged();
        partial void OnDiscountAmountChanging(decimal value);
        
        partial void OnDiscountAmountChanged();
        partial void OnIsEuromatChanging(bool? value);
        
        partial void OnIsEuromatChanged();
        partial void OnSupplyNumberChanging(string value);
        
        partial void OnSupplyNumberChanged();
        partial void OnLastRestAmountChanging(decimal? value);
        
        partial void OnLastRestAmountChanged();
        partial void OnAllowEditChanging(bool? value);
        
        partial void OnAllowEditChanged();
        partial void OnVehicleOdometerChanging(int? value);
        
        partial void OnVehicleOdometerChanged();
        partial void OnDeliveryAddressChanging(string value);
        
        partial void OnDeliveryAddressChanged();
        partial void OnQRCodeDataChanging(string value);
        
        partial void OnQRCodeDataChanged();
        partial void OnDiscountAmountWholeChanging(decimal value);
        
        partial void OnDiscountAmountWholeChanged();
        partial void OnDiscountAmountRetailChanging(decimal value);
        
        partial void OnDiscountAmountRetailChanged();
        partial void OnNettoAfterDiscountChanging(decimal value);
        
        partial void OnNettoAfterDiscountChanged();
        partial void OnVehicleChanging(Vehicle value);

        partial void OnVehicleChanged();
        partial void OnTraderChanging(Trader value);

        partial void OnTraderChanged();
        partial void OnInvoiceTypeChanging(InvoiceType value);

        partial void OnInvoiceTypeChanged();
        partial void OnInvoiceFormChanging(InvoiceForm value);

        partial void OnInvoiceFormChanged();
        partial void OnApplicationUserChanging(ApplicationUser value);

        partial void OnApplicationUserChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class FuelTypePrice : EntityBase, INotifyPropertyChanged {

        private System.Guid _FuelTypePriceId;

        private System.Guid _FuelTypeId;

        private decimal _Price;

        private System.DateTime _ChangeDate;

        private System.DateTime? _SentDateTime;

        private string _ResponseCode;

        private FuelType _FuelType;

        public FuelTypePrice()
        {
            OnCreated();
        }

        public virtual System.Guid FuelTypePriceId
        {
            get
            {
                return this._FuelTypePriceId;
            }
            set
            {
                if (this._FuelTypePriceId != value)
                {
                    this.OnFuelTypePriceIdChanging(value);
                    this._FuelTypePriceId = value;
                    this.SendPropertyChanged("FuelTypePriceId");
                    this.OnFuelTypePriceIdChanged();
                }
            }
        }

        public virtual System.Guid FuelTypeId
        {
            get
            {
                return this._FuelTypeId;
            }
            set
            {
                if (this._FuelTypeId != value)
                {
                    this.OnFuelTypeIdChanging(value);
                    this._FuelTypeId = value;
                    this.SendPropertyChanged("FuelTypeId");
                    this.OnFuelTypeIdChanged();
                }
            }
        }

        public virtual decimal Price
        {
            get
            {
                return this._Price;
            }
            set
            {
                if (this._Price != value)
                {
                    this.OnPriceChanging(value);
                    this._Price = value;
                    this.SendPropertyChanged("Price");
                    this.OnPriceChanged();
                }
            }
        }

        public virtual System.DateTime ChangeDate
        {
            get
            {
                return this._ChangeDate;
            }
            set
            {
                if (this._ChangeDate != value)
                {
                    this.OnChangeDateChanging(value);
                    this._ChangeDate = value;
                    this.SendPropertyChanged("ChangeDate");
                    this.OnChangeDateChanged();
                }
            }
        }

        public virtual System.DateTime? SentDateTime
        {
            get
            {
                return this._SentDateTime;
            }
            set
            {
                if (this._SentDateTime != value)
                {
                    this.OnSentDateTimeChanging(value);
                    this._SentDateTime = value;
                    this.SendPropertyChanged("SentDateTime");
                    this.OnSentDateTimeChanged();
                }
            }
        }

        public virtual string ResponseCode
        {
            get
            {
                return this._ResponseCode;
            }
            set
            {
                if (this._ResponseCode != value)
                {
                    this.OnResponseCodeChanging(value);
                    this._ResponseCode = value;
                    this.SendPropertyChanged("ResponseCode");
                    this.OnResponseCodeChanged();
                }
            }
        }

        public virtual FuelType FuelType
        {
            get
            {
                return this._FuelType;
            }
            set
            {
                if (this._FuelType != value)
                {
                    this.OnFuelTypeChanging(value);
                    this._FuelType = value;
                    this.SendPropertyChanged("FuelType");
                    this.OnFuelTypeChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnFuelTypePriceIdChanging(System.Guid value);
        
        partial void OnFuelTypePriceIdChanged();
        partial void OnFuelTypeIdChanging(System.Guid value);
        
        partial void OnFuelTypeIdChanged();
        partial void OnPriceChanging(decimal value);
        
        partial void OnPriceChanged();
        partial void OnChangeDateChanging(System.DateTime value);
        
        partial void OnChangeDateChanged();
        partial void OnSentDateTimeChanging(System.DateTime? value);
        
        partial void OnSentDateTimeChanged();
        partial void OnResponseCodeChanging(string value);
        
        partial void OnResponseCodeChanged();
        partial void OnFuelTypeChanging(FuelType value);

        partial void OnFuelTypeChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class FuelType : EntityBase, INotifyPropertyChanged {

        private System.Guid _FuelTypeId;

        private string _Name;

        private string _Code;

        private int? _Color;

        private decimal _ThermalCoeficient;

        private int _EnumeratorValue;

        private decimal _BaseDensity;

        private bool? _SupportsSupplyNumber;

        private bool? _ExcludeFromBalance;

        private IList<Tank> _Tanks;

        private IList<Nozzle> _Nozzles;

        private IList<Normalization> _Normalizations;

        private IList<InvoiceLine> _InvoiceLines;

        private IList<FuelTypePrice> _FuelTypePrices;

        public FuelType()
        {
            this._Tanks = new List<Tank>();
            this._Nozzles = new List<Nozzle>();
            this._Normalizations = new List<Normalization>();
            this._InvoiceLines = new List<InvoiceLine>();
            this._FuelTypePrices = new List<FuelTypePrice>();
            OnCreated();
        }

        public virtual System.Guid FuelTypeId
        {
            get
            {
                return this._FuelTypeId;
            }
            set
            {
                if (this._FuelTypeId != value)
                {
                    this.OnFuelTypeIdChanging(value);
                    this._FuelTypeId = value;
                    this.SendPropertyChanged("FuelTypeId");
                    this.OnFuelTypeIdChanged();
                }
            }
        }

        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        public virtual string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        public virtual int? Color
        {
            get
            {
                return this._Color;
            }
            set
            {
                if (this._Color != value)
                {
                    this.OnColorChanging(value);
                    this._Color = value;
                    this.SendPropertyChanged("Color");
                    this.OnColorChanged();
                }
            }
        }

        public virtual decimal ThermalCoeficient
        {
            get
            {
                return this._ThermalCoeficient;
            }
            set
            {
                if (this._ThermalCoeficient != value)
                {
                    this.OnThermalCoeficientChanging(value);
                    this._ThermalCoeficient = value;
                    this.SendPropertyChanged("ThermalCoeficient");
                    this.OnThermalCoeficientChanged();
                }
            }
        }

        public virtual int EnumeratorValue
        {
            get
            {
                return this._EnumeratorValue;
            }
            set
            {
                if (this._EnumeratorValue != value)
                {
                    this.OnEnumeratorValueChanging(value);
                    this._EnumeratorValue = value;
                    this.SendPropertyChanged("EnumeratorValue");
                    this.OnEnumeratorValueChanged();
                }
            }
        }

        public virtual decimal BaseDensity
        {
            get
            {
                return this._BaseDensity;
            }
            set
            {
                if (this._BaseDensity != value)
                {
                    this.OnBaseDensityChanging(value);
                    this._BaseDensity = value;
                    this.SendPropertyChanged("BaseDensity");
                    this.OnBaseDensityChanged();
                }
            }
        }

        public virtual bool? SupportsSupplyNumber
        {
            get
            {
                return this._SupportsSupplyNumber;
            }
            set
            {
                if (this._SupportsSupplyNumber != value)
                {
                    this.OnSupportsSupplyNumberChanging(value);
                    this._SupportsSupplyNumber = value;
                    this.SendPropertyChanged("SupportsSupplyNumber");
                    this.OnSupportsSupplyNumberChanged();
                }
            }
        }

        public virtual bool? ExcludeFromBalance
        {
            get
            {
                return this._ExcludeFromBalance;
            }
            set
            {
                if (this._ExcludeFromBalance != value)
                {
                    this.OnExcludeFromBalanceChanging(value);
                    this._ExcludeFromBalance = value;
                    this.SendPropertyChanged("ExcludeFromBalance");
                    this.OnExcludeFromBalanceChanged();
                }
            }
        }

        public virtual IList<Tank> Tanks
        {
            get
            {
                return this._Tanks;
            }
            set
            {
                if (this._Tanks != value)
                {
                    this._Tanks = value;
                }
            }
        }

        public virtual IList<Nozzle> Nozzles
        {
            get
            {
                return this._Nozzles;
            }
            set
            {
                if (this._Nozzles != value)
                {
                    this._Nozzles = value;
                }
            }
        }

        public virtual IList<Normalization> Normalizations
        {
            get
            {
                return this._Normalizations;
            }
            set
            {
                if (this._Normalizations != value)
                {
                    this._Normalizations = value;
                }
            }
        }

        public virtual IList<InvoiceLine> InvoiceLines
        {
            get
            {
                return this._InvoiceLines;
            }
            set
            {
                if (this._InvoiceLines != value)
                {
                    this._InvoiceLines = value;
                }
            }
        }

        public virtual IList<FuelTypePrice> FuelTypePrices
        {
            get
            {
                return this._FuelTypePrices;
            }
            set
            {
                if (this._FuelTypePrices != value)
                {
                    this._FuelTypePrices = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnFuelTypeIdChanging(System.Guid value);
        
        partial void OnFuelTypeIdChanged();
        partial void OnNameChanging(string value);
        
        partial void OnNameChanged();
        partial void OnCodeChanging(string value);
        
        partial void OnCodeChanged();
        partial void OnColorChanging(int? value);
        
        partial void OnColorChanged();
        partial void OnThermalCoeficientChanging(decimal value);
        
        partial void OnThermalCoeficientChanged();
        partial void OnEnumeratorValueChanging(int value);
        
        partial void OnEnumeratorValueChanged();
        partial void OnBaseDensityChanging(decimal value);
        
        partial void OnBaseDensityChanged();
        partial void OnSupportsSupplyNumberChanging(bool? value);
        
        partial void OnSupportsSupplyNumberChanged();
        partial void OnExcludeFromBalanceChanging(bool? value);
        
        partial void OnExcludeFromBalanceChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class DispenserType : EntityBase, INotifyPropertyChanged {

        private System.Guid _DispenserTypeId;

        private System.Guid _DispenserProtocolId;

        private string _BrandName;

        private DispenserProtocol _DispenserProtocol;

        private IList<Dispenser> _Dispensers;

        public DispenserType()
        {
            this._Dispensers = new List<Dispenser>();
            OnCreated();
        }

        public virtual System.Guid DispenserTypeId
        {
            get
            {
                return this._DispenserTypeId;
            }
            set
            {
                if (this._DispenserTypeId != value)
                {
                    this.OnDispenserTypeIdChanging(value);
                    this._DispenserTypeId = value;
                    this.SendPropertyChanged("DispenserTypeId");
                    this.OnDispenserTypeIdChanged();
                }
            }
        }

        public virtual System.Guid DispenserProtocolId
        {
            get
            {
                return this._DispenserProtocolId;
            }
            set
            {
                if (this._DispenserProtocolId != value)
                {
                    this.OnDispenserProtocolIdChanging(value);
                    this._DispenserProtocolId = value;
                    this.SendPropertyChanged("DispenserProtocolId");
                    this.OnDispenserProtocolIdChanged();
                }
            }
        }

        public virtual string BrandName
        {
            get
            {
                return this._BrandName;
            }
            set
            {
                if (this._BrandName != value)
                {
                    this.OnBrandNameChanging(value);
                    this._BrandName = value;
                    this.SendPropertyChanged("BrandName");
                    this.OnBrandNameChanged();
                }
            }
        }

        public virtual DispenserProtocol DispenserProtocol
        {
            get
            {
                return this._DispenserProtocol;
            }
            set
            {
                if (this._DispenserProtocol != value)
                {
                    this.OnDispenserProtocolChanging(value);
                    this._DispenserProtocol = value;
                    this.SendPropertyChanged("DispenserProtocol");
                    this.OnDispenserProtocolChanged();
                }
            }
        }

        public virtual IList<Dispenser> Dispensers
        {
            get
            {
                return this._Dispensers;
            }
            set
            {
                if (this._Dispensers != value)
                {
                    this._Dispensers = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnDispenserTypeIdChanging(System.Guid value);
        
        partial void OnDispenserTypeIdChanged();
        partial void OnDispenserProtocolIdChanging(System.Guid value);
        
        partial void OnDispenserProtocolIdChanged();
        partial void OnBrandNameChanging(string value);
        
        partial void OnBrandNameChanged();
        partial void OnDispenserProtocolChanging(DispenserProtocol value);

        partial void OnDispenserProtocolChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class DispenserSetting : EntityBase, INotifyPropertyChanged {

        private System.Guid _DispenserSettingId;

        private System.Guid _DispenserId;

        private string _SettingKey;

        private string _SettingValue;

        private string _Description;

        private System.Guid? _NozzleId;

        private Nozzle _Nozzle;

        private Dispenser _Dispenser;

        public DispenserSetting()
        {
            OnCreated();
        }

        public virtual System.Guid DispenserSettingId
        {
            get
            {
                return this._DispenserSettingId;
            }
            set
            {
                if (this._DispenserSettingId != value)
                {
                    this.OnDispenserSettingIdChanging(value);
                    this._DispenserSettingId = value;
                    this.SendPropertyChanged("DispenserSettingId");
                    this.OnDispenserSettingIdChanged();
                }
            }
        }

        public virtual System.Guid DispenserId
        {
            get
            {
                return this._DispenserId;
            }
            set
            {
                if (this._DispenserId != value)
                {
                    this.OnDispenserIdChanging(value);
                    this._DispenserId = value;
                    this.SendPropertyChanged("DispenserId");
                    this.OnDispenserIdChanged();
                }
            }
        }

        public virtual string SettingKey
        {
            get
            {
                return this._SettingKey;
            }
            set
            {
                if (this._SettingKey != value)
                {
                    this.OnSettingKeyChanging(value);
                    this._SettingKey = value;
                    this.SendPropertyChanged("SettingKey");
                    this.OnSettingKeyChanged();
                }
            }
        }

        public virtual string SettingValue
        {
            get
            {
                return this._SettingValue;
            }
            set
            {
                if (this._SettingValue != value)
                {
                    this.OnSettingValueChanging(value);
                    this._SettingValue = value;
                    this.SendPropertyChanged("SettingValue");
                    this.OnSettingValueChanged();
                }
            }
        }

        public virtual string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        public virtual System.Guid? NozzleId
        {
            get
            {
                return this._NozzleId;
            }
            set
            {
                if (this._NozzleId != value)
                {
                    this.OnNozzleIdChanging(value);
                    this._NozzleId = value;
                    this.SendPropertyChanged("NozzleId");
                    this.OnNozzleIdChanged();
                }
            }
        }

        public virtual Nozzle Nozzle
        {
            get
            {
                return this._Nozzle;
            }
            set
            {
                if (this._Nozzle != value)
                {
                    this.OnNozzleChanging(value);
                    this._Nozzle = value;
                    this.SendPropertyChanged("Nozzle");
                    this.OnNozzleChanged();
                }
            }
        }

        public virtual Dispenser Dispenser
        {
            get
            {
                return this._Dispenser;
            }
            set
            {
                if (this._Dispenser != value)
                {
                    this.OnDispenserChanging(value);
                    this._Dispenser = value;
                    this.SendPropertyChanged("Dispenser");
                    this.OnDispenserChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnDispenserSettingIdChanging(System.Guid value);
        
        partial void OnDispenserSettingIdChanged();
        partial void OnDispenserIdChanging(System.Guid value);
        
        partial void OnDispenserIdChanged();
        partial void OnSettingKeyChanging(string value);
        
        partial void OnSettingKeyChanged();
        partial void OnSettingValueChanging(string value);
        
        partial void OnSettingValueChanged();
        partial void OnDescriptionChanging(string value);
        
        partial void OnDescriptionChanged();
        partial void OnNozzleIdChanging(System.Guid? value);
        
        partial void OnNozzleIdChanged();
        partial void OnNozzleChanging(Nozzle value);

        partial void OnNozzleChanged();
        partial void OnDispenserChanging(Dispenser value);

        partial void OnDispenserChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class DispenserProtocol : EntityBase, INotifyPropertyChanged {

        private System.Guid _DispenserProtocolId;

        private string _ProtocolName;

        private int _EnumeratorValue;

        private IList<DispenserType> _DispenserTypes;

        public DispenserProtocol()
        {
            this._DispenserTypes = new List<DispenserType>();
            OnCreated();
        }

        public virtual System.Guid DispenserProtocolId
        {
            get
            {
                return this._DispenserProtocolId;
            }
            set
            {
                if (this._DispenserProtocolId != value)
                {
                    this.OnDispenserProtocolIdChanging(value);
                    this._DispenserProtocolId = value;
                    this.SendPropertyChanged("DispenserProtocolId");
                    this.OnDispenserProtocolIdChanged();
                }
            }
        }

        public virtual string ProtocolName
        {
            get
            {
                return this._ProtocolName;
            }
            set
            {
                if (this._ProtocolName != value)
                {
                    this.OnProtocolNameChanging(value);
                    this._ProtocolName = value;
                    this.SendPropertyChanged("ProtocolName");
                    this.OnProtocolNameChanged();
                }
            }
        }

        public virtual int EnumeratorValue
        {
            get
            {
                return this._EnumeratorValue;
            }
            set
            {
                if (this._EnumeratorValue != value)
                {
                    this.OnEnumeratorValueChanging(value);
                    this._EnumeratorValue = value;
                    this.SendPropertyChanged("EnumeratorValue");
                    this.OnEnumeratorValueChanged();
                }
            }
        }

        public virtual IList<DispenserType> DispenserTypes
        {
            get
            {
                return this._DispenserTypes;
            }
            set
            {
                if (this._DispenserTypes != value)
                {
                    this._DispenserTypes = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnDispenserProtocolIdChanging(System.Guid value);
        
        partial void OnDispenserProtocolIdChanged();
        partial void OnProtocolNameChanging(string value);
        
        partial void OnProtocolNameChanged();
        partial void OnEnumeratorValueChanging(int value);
        
        partial void OnEnumeratorValueChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class Dispenser : EntityBase, INotifyPropertyChanged {

        private System.Guid _DispenserId;

        private int _PhysicalState;

        private bool _IsValid;

        private System.DateTime? _InValidationDate;

        private System.Guid _DispenserTypeId;

        private System.Guid _CommunicationControllerId;

        private int _Channel;

        private int _PhysicalAddress;

        private int _DispenserNumber;

        private string _PumpSerialNumber;

        private int _OfficialPumpNumber;

        private int? _UnitPriceDecimalPlaces;

        private int? _DecimalPlaces;

        private int? _VolumeDecimalPlaces;

        private IList<SystemEvent> _SystemEvents;

        private IList<Nozzle> _Nozzles;

        private IList<InvoicePrint> _InvoicePrints;

        private DispenserType _DispenserType;

        private IList<DispenserSetting> _DispenserSettings;

        private CommunicationController _CommunicationController;

        private IList<FleetManagerDispenser> _FleetManagerDispensers;

        public Dispenser()
        {
            this._SystemEvents = new List<SystemEvent>();
            this._Nozzles = new List<Nozzle>();
            this._InvoicePrints = new List<InvoicePrint>();
            this._DispenserSettings = new List<DispenserSetting>();
            this._FleetManagerDispensers = new List<FleetManagerDispenser>();
            OnCreated();
        }

        public virtual System.Guid DispenserId
        {
            get
            {
                return this._DispenserId;
            }
            set
            {
                if (this._DispenserId != value)
                {
                    this.OnDispenserIdChanging(value);
                    this._DispenserId = value;
                    this.SendPropertyChanged("DispenserId");
                    this.OnDispenserIdChanged();
                }
            }
        }

        public virtual int PhysicalState
        {
            get
            {
                return this._PhysicalState;
            }
            set
            {
                if (this._PhysicalState != value)
                {
                    this.OnPhysicalStateChanging(value);
                    this._PhysicalState = value;
                    this.SendPropertyChanged("PhysicalState");
                    this.OnPhysicalStateChanged();
                }
            }
        }

        public virtual bool IsValid
        {
            get
            {
                return this._IsValid;
            }
            set
            {
                if (this._IsValid != value)
                {
                    this.OnIsValidChanging(value);
                    this._IsValid = value;
                    this.SendPropertyChanged("IsValid");
                    this.OnIsValidChanged();
                }
            }
        }

        public virtual System.DateTime? InValidationDate
        {
            get
            {
                return this._InValidationDate;
            }
            set
            {
                if (this._InValidationDate != value)
                {
                    this.OnInValidationDateChanging(value);
                    this._InValidationDate = value;
                    this.SendPropertyChanged("InValidationDate");
                    this.OnInValidationDateChanged();
                }
            }
        }

        public virtual System.Guid DispenserTypeId
        {
            get
            {
                return this._DispenserTypeId;
            }
            set
            {
                if (this._DispenserTypeId != value)
                {
                    this.OnDispenserTypeIdChanging(value);
                    this._DispenserTypeId = value;
                    this.SendPropertyChanged("DispenserTypeId");
                    this.OnDispenserTypeIdChanged();
                }
            }
        }

        public virtual System.Guid CommunicationControllerId
        {
            get
            {
                return this._CommunicationControllerId;
            }
            set
            {
                if (this._CommunicationControllerId != value)
                {
                    this.OnCommunicationControllerIdChanging(value);
                    this._CommunicationControllerId = value;
                    this.SendPropertyChanged("CommunicationControllerId");
                    this.OnCommunicationControllerIdChanged();
                }
            }
        }

        public virtual int Channel
        {
            get
            {
                return this._Channel;
            }
            set
            {
                if (this._Channel != value)
                {
                    this.OnChannelChanging(value);
                    this._Channel = value;
                    this.SendPropertyChanged("Channel");
                    this.OnChannelChanged();
                }
            }
        }

        public virtual int PhysicalAddress
        {
            get
            {
                return this._PhysicalAddress;
            }
            set
            {
                if (this._PhysicalAddress != value)
                {
                    this.OnPhysicalAddressChanging(value);
                    this._PhysicalAddress = value;
                    this.SendPropertyChanged("PhysicalAddress");
                    this.OnPhysicalAddressChanged();
                }
            }
        }

        public virtual int DispenserNumber
        {
            get
            {
                return this._DispenserNumber;
            }
            set
            {
                if (this._DispenserNumber != value)
                {
                    this.OnDispenserNumberChanging(value);
                    this._DispenserNumber = value;
                    this.SendPropertyChanged("DispenserNumber");
                    this.OnDispenserNumberChanged();
                }
            }
        }

        public virtual string PumpSerialNumber
        {
            get
            {
                return this._PumpSerialNumber;
            }
            set
            {
                if (this._PumpSerialNumber != value)
                {
                    this.OnPumpSerialNumberChanging(value);
                    this._PumpSerialNumber = value;
                    this.SendPropertyChanged("PumpSerialNumber");
                    this.OnPumpSerialNumberChanged();
                }
            }
        }

        public virtual int OfficialPumpNumber
        {
            get
            {
                return this._OfficialPumpNumber;
            }
            set
            {
                if (this._OfficialPumpNumber != value)
                {
                    this.OnOfficialPumpNumberChanging(value);
                    this._OfficialPumpNumber = value;
                    this.SendPropertyChanged("OfficialPumpNumber");
                    this.OnOfficialPumpNumberChanged();
                }
            }
        }

        public virtual int? UnitPriceDecimalPlaces
        {
            get
            {
                return this._UnitPriceDecimalPlaces;
            }
            set
            {
                if (this._UnitPriceDecimalPlaces != value)
                {
                    this.OnUnitPriceDecimalPlacesChanging(value);
                    this._UnitPriceDecimalPlaces = value;
                    this.SendPropertyChanged("UnitPriceDecimalPlaces");
                    this.OnUnitPriceDecimalPlacesChanged();
                }
            }
        }

        public virtual int? DecimalPlaces
        {
            get
            {
                return this._DecimalPlaces;
            }
            set
            {
                if (this._DecimalPlaces != value)
                {
                    this.OnDecimalPlacesChanging(value);
                    this._DecimalPlaces = value;
                    this.SendPropertyChanged("DecimalPlaces");
                    this.OnDecimalPlacesChanged();
                }
            }
        }

        public virtual int? VolumeDecimalPlaces
        {
            get
            {
                return this._VolumeDecimalPlaces;
            }
            set
            {
                if (this._VolumeDecimalPlaces != value)
                {
                    this.OnVolumeDecimalPlacesChanging(value);
                    this._VolumeDecimalPlaces = value;
                    this.SendPropertyChanged("VolumeDecimalPlaces");
                    this.OnVolumeDecimalPlacesChanged();
                }
            }
        }

        public virtual IList<SystemEvent> SystemEvents
        {
            get
            {
                return this._SystemEvents;
            }
            set
            {
                if (this._SystemEvents != value)
                {
                    this._SystemEvents = value;
                }
            }
        }

        public virtual IList<Nozzle> Nozzles
        {
            get
            {
                return this._Nozzles;
            }
            set
            {
                if (this._Nozzles != value)
                {
                    this._Nozzles = value;
                }
            }
        }

        public virtual IList<InvoicePrint> InvoicePrints
        {
            get
            {
                return this._InvoicePrints;
            }
            set
            {
                if (this._InvoicePrints != value)
                {
                    this._InvoicePrints = value;
                }
            }
        }

        public virtual DispenserType DispenserType
        {
            get
            {
                return this._DispenserType;
            }
            set
            {
                if (this._DispenserType != value)
                {
                    this.OnDispenserTypeChanging(value);
                    this._DispenserType = value;
                    this.SendPropertyChanged("DispenserType");
                    this.OnDispenserTypeChanged();
                }
            }
        }

        public virtual IList<DispenserSetting> DispenserSettings
        {
            get
            {
                return this._DispenserSettings;
            }
            set
            {
                if (this._DispenserSettings != value)
                {
                    this._DispenserSettings = value;
                }
            }
        }

        public virtual CommunicationController CommunicationController
        {
            get
            {
                return this._CommunicationController;
            }
            set
            {
                if (this._CommunicationController != value)
                {
                    this.OnCommunicationControllerChanging(value);
                    this._CommunicationController = value;
                    this.SendPropertyChanged("CommunicationController");
                    this.OnCommunicationControllerChanged();
                }
            }
        }

        public virtual IList<FleetManagerDispenser> FleetManagerDispensers
        {
            get
            {
                return this._FleetManagerDispensers;
            }
            set
            {
                if (this._FleetManagerDispensers != value)
                {
                    this._FleetManagerDispensers = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnDispenserIdChanging(System.Guid value);
        
        partial void OnDispenserIdChanged();
        partial void OnPhysicalStateChanging(int value);
        
        partial void OnPhysicalStateChanged();
        partial void OnIsValidChanging(bool value);
        
        partial void OnIsValidChanged();
        partial void OnInValidationDateChanging(System.DateTime? value);
        
        partial void OnInValidationDateChanged();
        partial void OnDispenserTypeIdChanging(System.Guid value);
        
        partial void OnDispenserTypeIdChanged();
        partial void OnCommunicationControllerIdChanging(System.Guid value);
        
        partial void OnCommunicationControllerIdChanged();
        partial void OnChannelChanging(int value);
        
        partial void OnChannelChanged();
        partial void OnPhysicalAddressChanging(int value);
        
        partial void OnPhysicalAddressChanged();
        partial void OnDispenserNumberChanging(int value);
        
        partial void OnDispenserNumberChanged();
        partial void OnPumpSerialNumberChanging(string value);
        
        partial void OnPumpSerialNumberChanged();
        partial void OnOfficialPumpNumberChanging(int value);
        
        partial void OnOfficialPumpNumberChanged();
        partial void OnUnitPriceDecimalPlacesChanging(int? value);
        
        partial void OnUnitPriceDecimalPlacesChanged();
        partial void OnDecimalPlacesChanging(int? value);
        
        partial void OnDecimalPlacesChanged();
        partial void OnVolumeDecimalPlacesChanging(int? value);
        
        partial void OnVolumeDecimalPlacesChanged();
        partial void OnDispenserTypeChanging(DispenserType value);

        partial void OnDispenserTypeChanged();
        partial void OnCommunicationControllerChanging(CommunicationController value);

        partial void OnCommunicationControllerChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class CommunicationController : EntityBase, INotifyPropertyChanged {

        private System.Guid _CommunicationControllerId;

        private string _Name;

        private string _CommunicationPort;

        private int? _CommunicationProtocol;

        private string _ControllerAssembly;

        private bool? _EuromatEnabled;

        private int? _EuromatPort;

        private string _EuromatIp;

        private IList<Tank> _Tanks;

        private IList<Dispenser> _Dispensers;

        private IList<OutdoorPaymentTerminalController> _OutdoorPaymentTerminalControllers;

        public CommunicationController()
        {
            this._Tanks = new List<Tank>();
            this._Dispensers = new List<Dispenser>();
            this._OutdoorPaymentTerminalControllers = new List<OutdoorPaymentTerminalController>();
            OnCreated();
        }

        public virtual System.Guid CommunicationControllerId
        {
            get
            {
                return this._CommunicationControllerId;
            }
            set
            {
                if (this._CommunicationControllerId != value)
                {
                    this.OnCommunicationControllerIdChanging(value);
                    this._CommunicationControllerId = value;
                    this.SendPropertyChanged("CommunicationControllerId");
                    this.OnCommunicationControllerIdChanged();
                }
            }
        }

        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        public virtual string CommunicationPort
        {
            get
            {
                return this._CommunicationPort;
            }
            set
            {
                if (this._CommunicationPort != value)
                {
                    this.OnCommunicationPortChanging(value);
                    this._CommunicationPort = value;
                    this.SendPropertyChanged("CommunicationPort");
                    this.OnCommunicationPortChanged();
                }
            }
        }

        public virtual int? CommunicationProtocol
        {
            get
            {
                return this._CommunicationProtocol;
            }
            set
            {
                if (this._CommunicationProtocol != value)
                {
                    this.OnCommunicationProtocolChanging(value);
                    this._CommunicationProtocol = value;
                    this.SendPropertyChanged("CommunicationProtocol");
                    this.OnCommunicationProtocolChanged();
                }
            }
        }

        public virtual string ControllerAssembly
        {
            get
            {
                return this._ControllerAssembly;
            }
            set
            {
                if (this._ControllerAssembly != value)
                {
                    this.OnControllerAssemblyChanging(value);
                    this._ControllerAssembly = value;
                    this.SendPropertyChanged("ControllerAssembly");
                    this.OnControllerAssemblyChanged();
                }
            }
        }

        public virtual bool? EuromatEnabled
        {
            get
            {
                return this._EuromatEnabled;
            }
            set
            {
                if (this._EuromatEnabled != value)
                {
                    this.OnEuromatEnabledChanging(value);
                    this._EuromatEnabled = value;
                    this.SendPropertyChanged("EuromatEnabled");
                    this.OnEuromatEnabledChanged();
                }
            }
        }

        public virtual int? EuromatPort
        {
            get
            {
                return this._EuromatPort;
            }
            set
            {
                if (this._EuromatPort != value)
                {
                    this.OnEuromatPortChanging(value);
                    this._EuromatPort = value;
                    this.SendPropertyChanged("EuromatPort");
                    this.OnEuromatPortChanged();
                }
            }
        }

        public virtual string EuromatIp
        {
            get
            {
                return this._EuromatIp;
            }
            set
            {
                if (this._EuromatIp != value)
                {
                    this.OnEuromatIpChanging(value);
                    this._EuromatIp = value;
                    this.SendPropertyChanged("EuromatIp");
                    this.OnEuromatIpChanged();
                }
            }
        }

        public virtual IList<Tank> Tanks
        {
            get
            {
                return this._Tanks;
            }
            set
            {
                if (this._Tanks != value)
                {
                    this._Tanks = value;
                }
            }
        }

        public virtual IList<Dispenser> Dispensers
        {
            get
            {
                return this._Dispensers;
            }
            set
            {
                if (this._Dispensers != value)
                {
                    this._Dispensers = value;
                }
            }
        }

        public virtual IList<OutdoorPaymentTerminalController> OutdoorPaymentTerminalControllers
        {
            get
            {
                return this._OutdoorPaymentTerminalControllers;
            }
            set
            {
                if (this._OutdoorPaymentTerminalControllers != value)
                {
                    this._OutdoorPaymentTerminalControllers = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnCommunicationControllerIdChanging(System.Guid value);
        
        partial void OnCommunicationControllerIdChanged();
        partial void OnNameChanging(string value);
        
        partial void OnNameChanged();
        partial void OnCommunicationPortChanging(string value);
        
        partial void OnCommunicationPortChanged();
        partial void OnCommunicationProtocolChanging(int? value);
        
        partial void OnCommunicationProtocolChanged();
        partial void OnControllerAssemblyChanging(string value);
        
        partial void OnControllerAssemblyChanged();
        partial void OnEuromatEnabledChanging(bool? value);
        
        partial void OnEuromatEnabledChanged();
        partial void OnEuromatPortChanging(int? value);
        
        partial void OnEuromatPortChanged();
        partial void OnEuromatIpChanging(string value);
        
        partial void OnEuromatIpChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class Balance : EntityBase, INotifyPropertyChanged {

        private System.Guid _BalanceId;

        private System.DateTime _StartDate;

        private System.DateTime _EndDate;

        private System.Guid? _LastSale;

        private System.Guid? _LastFilling;

        private string _BalanceText;

        private System.Guid _ApplicationUserId;

        private System.DateTime? _SentDateTime;

        private string _ResponseCode;

        private System.DateTime? _PrintDate;

        private string _DocumentSign;

        private TankFilling _TankFilling;

        private SalesTransaction _SalesTransaction;

        private ApplicationUser _ApplicationUser;

        public Balance()
        {
            OnCreated();
        }

        public virtual System.Guid BalanceId
        {
            get
            {
                return this._BalanceId;
            }
            set
            {
                if (this._BalanceId != value)
                {
                    this.OnBalanceIdChanging(value);
                    this._BalanceId = value;
                    this.SendPropertyChanged("BalanceId");
                    this.OnBalanceIdChanged();
                }
            }
        }

        public virtual System.DateTime StartDate
        {
            get
            {
                return this._StartDate;
            }
            set
            {
                if (this._StartDate != value)
                {
                    this.OnStartDateChanging(value);
                    this._StartDate = value;
                    this.SendPropertyChanged("StartDate");
                    this.OnStartDateChanged();
                }
            }
        }

        public virtual System.DateTime EndDate
        {
            get
            {
                return this._EndDate;
            }
            set
            {
                if (this._EndDate != value)
                {
                    this.OnEndDateChanging(value);
                    this._EndDate = value;
                    this.SendPropertyChanged("EndDate");
                    this.OnEndDateChanged();
                }
            }
        }

        public virtual System.Guid? LastSale
        {
            get
            {
                return this._LastSale;
            }
            set
            {
                if (this._LastSale != value)
                {
                    this.OnLastSaleChanging(value);
                    this._LastSale = value;
                    this.SendPropertyChanged("LastSale");
                    this.OnLastSaleChanged();
                }
            }
        }

        public virtual System.Guid? LastFilling
        {
            get
            {
                return this._LastFilling;
            }
            set
            {
                if (this._LastFilling != value)
                {
                    this.OnLastFillingChanging(value);
                    this._LastFilling = value;
                    this.SendPropertyChanged("LastFilling");
                    this.OnLastFillingChanged();
                }
            }
        }

        public virtual string BalanceText
        {
            get
            {
                return this._BalanceText;
            }
            set
            {
                if (this._BalanceText != value)
                {
                    this.OnBalanceTextChanging(value);
                    this._BalanceText = value;
                    this.SendPropertyChanged("BalanceText");
                    this.OnBalanceTextChanged();
                }
            }
        }

        public virtual System.Guid ApplicationUserId
        {
            get
            {
                return this._ApplicationUserId;
            }
            set
            {
                if (this._ApplicationUserId != value)
                {
                    this.OnApplicationUserIdChanging(value);
                    this._ApplicationUserId = value;
                    this.SendPropertyChanged("ApplicationUserId");
                    this.OnApplicationUserIdChanged();
                }
            }
        }

        public virtual System.DateTime? SentDateTime
        {
            get
            {
                return this._SentDateTime;
            }
            set
            {
                if (this._SentDateTime != value)
                {
                    this.OnSentDateTimeChanging(value);
                    this._SentDateTime = value;
                    this.SendPropertyChanged("SentDateTime");
                    this.OnSentDateTimeChanged();
                }
            }
        }

        public virtual string ResponseCode
        {
            get
            {
                return this._ResponseCode;
            }
            set
            {
                if (this._ResponseCode != value)
                {
                    this.OnResponseCodeChanging(value);
                    this._ResponseCode = value;
                    this.SendPropertyChanged("ResponseCode");
                    this.OnResponseCodeChanged();
                }
            }
        }

        public virtual System.DateTime? PrintDate
        {
            get
            {
                return this._PrintDate;
            }
            set
            {
                if (this._PrintDate != value)
                {
                    this.OnPrintDateChanging(value);
                    this._PrintDate = value;
                    this.SendPropertyChanged("PrintDate");
                    this.OnPrintDateChanged();
                }
            }
        }

        public virtual string DocumentSign
        {
            get
            {
                return this._DocumentSign;
            }
            set
            {
                if (this._DocumentSign != value)
                {
                    this.OnDocumentSignChanging(value);
                    this._DocumentSign = value;
                    this.SendPropertyChanged("DocumentSign");
                    this.OnDocumentSignChanged();
                }
            }
        }

        public virtual TankFilling TankFilling
        {
            get
            {
                return this._TankFilling;
            }
            set
            {
                if (this._TankFilling != value)
                {
                    this.OnTankFillingChanging(value);
                    this._TankFilling = value;
                    this.SendPropertyChanged("TankFilling");
                    this.OnTankFillingChanged();
                }
            }
        }

        public virtual SalesTransaction SalesTransaction
        {
            get
            {
                return this._SalesTransaction;
            }
            set
            {
                if (this._SalesTransaction != value)
                {
                    this.OnSalesTransactionChanging(value);
                    this._SalesTransaction = value;
                    this.SendPropertyChanged("SalesTransaction");
                    this.OnSalesTransactionChanged();
                }
            }
        }

        public virtual ApplicationUser ApplicationUser
        {
            get
            {
                return this._ApplicationUser;
            }
            set
            {
                if (this._ApplicationUser != value)
                {
                    this.OnApplicationUserChanging(value);
                    this._ApplicationUser = value;
                    this.SendPropertyChanged("ApplicationUser");
                    this.OnApplicationUserChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnBalanceIdChanging(System.Guid value);
        
        partial void OnBalanceIdChanged();
        partial void OnStartDateChanging(System.DateTime value);
        
        partial void OnStartDateChanged();
        partial void OnEndDateChanging(System.DateTime value);
        
        partial void OnEndDateChanged();
        partial void OnLastSaleChanging(System.Guid? value);
        
        partial void OnLastSaleChanged();
        partial void OnLastFillingChanging(System.Guid? value);
        
        partial void OnLastFillingChanged();
        partial void OnBalanceTextChanging(string value);
        
        partial void OnBalanceTextChanged();
        partial void OnApplicationUserIdChanging(System.Guid value);
        
        partial void OnApplicationUserIdChanged();
        partial void OnSentDateTimeChanging(System.DateTime? value);
        
        partial void OnSentDateTimeChanged();
        partial void OnResponseCodeChanging(string value);
        
        partial void OnResponseCodeChanged();
        partial void OnPrintDateChanging(System.DateTime? value);
        
        partial void OnPrintDateChanged();
        partial void OnDocumentSignChanging(string value);
        
        partial void OnDocumentSignChanged();
        partial void OnTankFillingChanging(TankFilling value);

        partial void OnTankFillingChanged();
        partial void OnSalesTransactionChanging(SalesTransaction value);

        partial void OnSalesTransactionChanged();
        partial void OnApplicationUserChanging(ApplicationUser value);

        partial void OnApplicationUserChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class AtgProbeType : EntityBase, INotifyPropertyChanged {

        private System.Guid _AtgProbeTypeId;

        private System.Guid _AtgProbeProtocolId;

        private string _BrandName;

        private IList<Tank> _Tanks;

        private AtgProbeProtocol _AtgProbeProtocol;

        public AtgProbeType()
        {
            this._Tanks = new List<Tank>();
            OnCreated();
        }

        public virtual System.Guid AtgProbeTypeId
        {
            get
            {
                return this._AtgProbeTypeId;
            }
            set
            {
                if (this._AtgProbeTypeId != value)
                {
                    this.OnAtgProbeTypeIdChanging(value);
                    this._AtgProbeTypeId = value;
                    this.SendPropertyChanged("AtgProbeTypeId");
                    this.OnAtgProbeTypeIdChanged();
                }
            }
        }

        public virtual System.Guid AtgProbeProtocolId
        {
            get
            {
                return this._AtgProbeProtocolId;
            }
            set
            {
                if (this._AtgProbeProtocolId != value)
                {
                    this.OnAtgProbeProtocolIdChanging(value);
                    this._AtgProbeProtocolId = value;
                    this.SendPropertyChanged("AtgProbeProtocolId");
                    this.OnAtgProbeProtocolIdChanged();
                }
            }
        }

        public virtual string BrandName
        {
            get
            {
                return this._BrandName;
            }
            set
            {
                if (this._BrandName != value)
                {
                    this.OnBrandNameChanging(value);
                    this._BrandName = value;
                    this.SendPropertyChanged("BrandName");
                    this.OnBrandNameChanged();
                }
            }
        }

        public virtual IList<Tank> Tanks
        {
            get
            {
                return this._Tanks;
            }
            set
            {
                if (this._Tanks != value)
                {
                    this._Tanks = value;
                }
            }
        }

        public virtual AtgProbeProtocol AtgProbeProtocol
        {
            get
            {
                return this._AtgProbeProtocol;
            }
            set
            {
                if (this._AtgProbeProtocol != value)
                {
                    this.OnAtgProbeProtocolChanging(value);
                    this._AtgProbeProtocol = value;
                    this.SendPropertyChanged("AtgProbeProtocol");
                    this.OnAtgProbeProtocolChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnAtgProbeTypeIdChanging(System.Guid value);
        
        partial void OnAtgProbeTypeIdChanged();
        partial void OnAtgProbeProtocolIdChanging(System.Guid value);
        
        partial void OnAtgProbeProtocolIdChanged();
        partial void OnBrandNameChanging(string value);
        
        partial void OnBrandNameChanged();
        partial void OnAtgProbeProtocolChanging(AtgProbeProtocol value);

        partial void OnAtgProbeProtocolChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class AtgProbeProtocol : EntityBase, INotifyPropertyChanged {

        private System.Guid _AtgProbeProtocolId;

        private string _ProtocolName;

        private int _EnumeratorValue;

        private IList<AtgProbeType> _AtgProbeTypes;

        public AtgProbeProtocol()
        {
            this._AtgProbeTypes = new List<AtgProbeType>();
            OnCreated();
        }

        public virtual System.Guid AtgProbeProtocolId
        {
            get
            {
                return this._AtgProbeProtocolId;
            }
            set
            {
                if (this._AtgProbeProtocolId != value)
                {
                    this.OnAtgProbeProtocolIdChanging(value);
                    this._AtgProbeProtocolId = value;
                    this.SendPropertyChanged("AtgProbeProtocolId");
                    this.OnAtgProbeProtocolIdChanged();
                }
            }
        }

        public virtual string ProtocolName
        {
            get
            {
                return this._ProtocolName;
            }
            set
            {
                if (this._ProtocolName != value)
                {
                    this.OnProtocolNameChanging(value);
                    this._ProtocolName = value;
                    this.SendPropertyChanged("ProtocolName");
                    this.OnProtocolNameChanged();
                }
            }
        }

        public virtual int EnumeratorValue
        {
            get
            {
                return this._EnumeratorValue;
            }
            set
            {
                if (this._EnumeratorValue != value)
                {
                    this.OnEnumeratorValueChanging(value);
                    this._EnumeratorValue = value;
                    this.SendPropertyChanged("EnumeratorValue");
                    this.OnEnumeratorValueChanged();
                }
            }
        }

        public virtual IList<AtgProbeType> AtgProbeTypes
        {
            get
            {
                return this._AtgProbeTypes;
            }
            set
            {
                if (this._AtgProbeTypes != value)
                {
                    this._AtgProbeTypes = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnAtgProbeProtocolIdChanging(System.Guid value);
        
        partial void OnAtgProbeProtocolIdChanged();
        partial void OnProtocolNameChanging(string value);
        
        partial void OnProtocolNameChanged();
        partial void OnEnumeratorValueChanging(int value);
        
        partial void OnEnumeratorValueChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class ApplicationUserLoggon : EntityBase, INotifyPropertyChanged {

        private System.Guid _ApplicationUserLoggonId;

        private System.Guid _ApplicationUserId;

        private System.DateTime _LoggonTime;

        private System.DateTime? _LogoffTime;

        private ApplicationUser _ApplicationUser;

        public ApplicationUserLoggon()
        {
            OnCreated();
        }

        public virtual System.Guid ApplicationUserLoggonId
        {
            get
            {
                return this._ApplicationUserLoggonId;
            }
            set
            {
                if (this._ApplicationUserLoggonId != value)
                {
                    this.OnApplicationUserLoggonIdChanging(value);
                    this._ApplicationUserLoggonId = value;
                    this.SendPropertyChanged("ApplicationUserLoggonId");
                    this.OnApplicationUserLoggonIdChanged();
                }
            }
        }

        public virtual System.Guid ApplicationUserId
        {
            get
            {
                return this._ApplicationUserId;
            }
            set
            {
                if (this._ApplicationUserId != value)
                {
                    this.OnApplicationUserIdChanging(value);
                    this._ApplicationUserId = value;
                    this.SendPropertyChanged("ApplicationUserId");
                    this.OnApplicationUserIdChanged();
                }
            }
        }

        public virtual System.DateTime LoggonTime
        {
            get
            {
                return this._LoggonTime;
            }
            set
            {
                if (this._LoggonTime != value)
                {
                    this.OnLoggonTimeChanging(value);
                    this._LoggonTime = value;
                    this.SendPropertyChanged("LoggonTime");
                    this.OnLoggonTimeChanged();
                }
            }
        }

        public virtual System.DateTime? LogoffTime
        {
            get
            {
                return this._LogoffTime;
            }
            set
            {
                if (this._LogoffTime != value)
                {
                    this.OnLogoffTimeChanging(value);
                    this._LogoffTime = value;
                    this.SendPropertyChanged("LogoffTime");
                    this.OnLogoffTimeChanged();
                }
            }
        }

        public virtual ApplicationUser ApplicationUser
        {
            get
            {
                return this._ApplicationUser;
            }
            set
            {
                if (this._ApplicationUser != value)
                {
                    this.OnApplicationUserChanging(value);
                    this._ApplicationUser = value;
                    this.SendPropertyChanged("ApplicationUser");
                    this.OnApplicationUserChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnApplicationUserLoggonIdChanging(System.Guid value);
        
        partial void OnApplicationUserLoggonIdChanged();
        partial void OnApplicationUserIdChanging(System.Guid value);
        
        partial void OnApplicationUserIdChanged();
        partial void OnLoggonTimeChanging(System.DateTime value);
        
        partial void OnLoggonTimeChanged();
        partial void OnLogoffTimeChanging(System.DateTime? value);
        
        partial void OnLogoffTimeChanged();
        partial void OnApplicationUserChanging(ApplicationUser value);

        partial void OnApplicationUserChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class ApplicationUser : EntityBase, INotifyPropertyChanged {

        private System.Guid _ApplicationUserId;

        private string _UserName;

        private string _Password;

        private int _UserLevel;

        private string _PasswordEncrypted;

        private IList<TankFilling> _TankFillings;

        private IList<SalesTransaction> _SalesTransactions;

        private IList<Invoice> _Invoices;

        private IList<Balance> _Balances;

        private IList<ApplicationUserLoggon> _ApplicationUserLoggons;

        private IList<Shift> _Shifts;

        private IList<FinTransaction> _FinTransactions;

        public ApplicationUser()
        {
            this._TankFillings = new List<TankFilling>();
            this._SalesTransactions = new List<SalesTransaction>();
            this._Invoices = new List<Invoice>();
            this._Balances = new List<Balance>();
            this._ApplicationUserLoggons = new List<ApplicationUserLoggon>();
            this._Shifts = new List<Shift>();
            this._FinTransactions = new List<FinTransaction>();
            OnCreated();
        }

        public virtual System.Guid ApplicationUserId
        {
            get
            {
                return this._ApplicationUserId;
            }
            set
            {
                if (this._ApplicationUserId != value)
                {
                    this.OnApplicationUserIdChanging(value);
                    this._ApplicationUserId = value;
                    this.SendPropertyChanged("ApplicationUserId");
                    this.OnApplicationUserIdChanged();
                }
            }
        }

        public virtual string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }

        public virtual string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

        public virtual int UserLevel
        {
            get
            {
                return this._UserLevel;
            }
            set
            {
                if (this._UserLevel != value)
                {
                    this.OnUserLevelChanging(value);
                    this._UserLevel = value;
                    this.SendPropertyChanged("UserLevel");
                    this.OnUserLevelChanged();
                }
            }
        }

        public virtual string PasswordEncrypted
        {
            get
            {
                return this._PasswordEncrypted;
            }
            set
            {
                if (this._PasswordEncrypted != value)
                {
                    this.OnPasswordEncryptedChanging(value);
                    this._PasswordEncrypted = value;
                    this.SendPropertyChanged("PasswordEncrypted");
                    this.OnPasswordEncryptedChanged();
                }
            }
        }

        public virtual IList<TankFilling> TankFillings
        {
            get
            {
                return this._TankFillings;
            }
            set
            {
                if (this._TankFillings != value)
                {
                    this._TankFillings = value;
                }
            }
        }

        public virtual IList<SalesTransaction> SalesTransactions
        {
            get
            {
                return this._SalesTransactions;
            }
            set
            {
                if (this._SalesTransactions != value)
                {
                    this._SalesTransactions = value;
                }
            }
        }

        public virtual IList<Invoice> Invoices
        {
            get
            {
                return this._Invoices;
            }
            set
            {
                if (this._Invoices != value)
                {
                    this._Invoices = value;
                }
            }
        }

        public virtual IList<Balance> Balances
        {
            get
            {
                return this._Balances;
            }
            set
            {
                if (this._Balances != value)
                {
                    this._Balances = value;
                }
            }
        }

        public virtual IList<ApplicationUserLoggon> ApplicationUserLoggons
        {
            get
            {
                return this._ApplicationUserLoggons;
            }
            set
            {
                if (this._ApplicationUserLoggons != value)
                {
                    this._ApplicationUserLoggons = value;
                }
            }
        }

        public virtual IList<Shift> Shifts
        {
            get
            {
                return this._Shifts;
            }
            set
            {
                if (this._Shifts != value)
                {
                    this._Shifts = value;
                }
            }
        }

        public virtual IList<FinTransaction> FinTransactions
        {
            get
            {
                return this._FinTransactions;
            }
            set
            {
                if (this._FinTransactions != value)
                {
                    this._FinTransactions = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnApplicationUserIdChanging(System.Guid value);
        
        partial void OnApplicationUserIdChanged();
        partial void OnUserNameChanging(string value);
        
        partial void OnUserNameChanged();
        partial void OnPasswordChanging(string value);
        
        partial void OnPasswordChanged();
        partial void OnUserLevelChanging(int value);
        
        partial void OnUserLevelChanged();
        partial void OnPasswordEncryptedChanging(string value);
        
        partial void OnPasswordEncryptedChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class AlertDefinition : EntityBase, INotifyPropertyChanged {

        private System.Guid _AlertDefinitionId;

        private string _Name;

        private int? _AlertEnumValue;

        private bool _IsNozzleAlert;

        private bool _IsDispenserAlert;

        private bool _IsTankAlert;

        private bool _IsStationAlert;

        private bool _LockDevices;

        private string _Expression;

        private bool _AlertIsDisabled;

        private decimal _ErrorThreshold;

        private bool _ResendAlerts;

        private string _AlerttMessage;

        private bool _IsGeneric;

        private int _ResendAlertsInterval;

        private bool _AutoResolve;

        private string _MethodForResolve;

        private IList<SystemEvent> _SystemEvents;

        public AlertDefinition()
        {
            this._SystemEvents = new List<SystemEvent>();
            OnCreated();
        }

        public virtual System.Guid AlertDefinitionId
        {
            get
            {
                return this._AlertDefinitionId;
            }
            set
            {
                if (this._AlertDefinitionId != value)
                {
                    this.OnAlertDefinitionIdChanging(value);
                    this._AlertDefinitionId = value;
                    this.SendPropertyChanged("AlertDefinitionId");
                    this.OnAlertDefinitionIdChanged();
                }
            }
        }

        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        public virtual int? AlertEnumValue
        {
            get
            {
                return this._AlertEnumValue;
            }
            set
            {
                if (this._AlertEnumValue != value)
                {
                    this.OnAlertEnumValueChanging(value);
                    this._AlertEnumValue = value;
                    this.SendPropertyChanged("AlertEnumValue");
                    this.OnAlertEnumValueChanged();
                }
            }
        }

        public virtual bool IsNozzleAlert
        {
            get
            {
                return this._IsNozzleAlert;
            }
            set
            {
                if (this._IsNozzleAlert != value)
                {
                    this.OnIsNozzleAlertChanging(value);
                    this._IsNozzleAlert = value;
                    this.SendPropertyChanged("IsNozzleAlert");
                    this.OnIsNozzleAlertChanged();
                }
            }
        }

        public virtual bool IsDispenserAlert
        {
            get
            {
                return this._IsDispenserAlert;
            }
            set
            {
                if (this._IsDispenserAlert != value)
                {
                    this.OnIsDispenserAlertChanging(value);
                    this._IsDispenserAlert = value;
                    this.SendPropertyChanged("IsDispenserAlert");
                    this.OnIsDispenserAlertChanged();
                }
            }
        }

        public virtual bool IsTankAlert
        {
            get
            {
                return this._IsTankAlert;
            }
            set
            {
                if (this._IsTankAlert != value)
                {
                    this.OnIsTankAlertChanging(value);
                    this._IsTankAlert = value;
                    this.SendPropertyChanged("IsTankAlert");
                    this.OnIsTankAlertChanged();
                }
            }
        }

        public virtual bool IsStationAlert
        {
            get
            {
                return this._IsStationAlert;
            }
            set
            {
                if (this._IsStationAlert != value)
                {
                    this.OnIsStationAlertChanging(value);
                    this._IsStationAlert = value;
                    this.SendPropertyChanged("IsStationAlert");
                    this.OnIsStationAlertChanged();
                }
            }
        }

        public virtual bool LockDevices
        {
            get
            {
                return this._LockDevices;
            }
            set
            {
                if (this._LockDevices != value)
                {
                    this.OnLockDevicesChanging(value);
                    this._LockDevices = value;
                    this.SendPropertyChanged("LockDevices");
                    this.OnLockDevicesChanged();
                }
            }
        }

        public virtual string Expression
        {
            get
            {
                return this._Expression;
            }
            set
            {
                if (this._Expression != value)
                {
                    this.OnExpressionChanging(value);
                    this._Expression = value;
                    this.SendPropertyChanged("Expression");
                    this.OnExpressionChanged();
                }
            }
        }

        public virtual bool AlertIsDisabled
        {
            get
            {
                return this._AlertIsDisabled;
            }
            set
            {
                if (this._AlertIsDisabled != value)
                {
                    this.OnAlertIsDisabledChanging(value);
                    this._AlertIsDisabled = value;
                    this.SendPropertyChanged("AlertIsDisabled");
                    this.OnAlertIsDisabledChanged();
                }
            }
        }

        public virtual decimal ErrorThreshold
        {
            get
            {
                return this._ErrorThreshold;
            }
            set
            {
                if (this._ErrorThreshold != value)
                {
                    this.OnErrorThresholdChanging(value);
                    this._ErrorThreshold = value;
                    this.SendPropertyChanged("ErrorThreshold");
                    this.OnErrorThresholdChanged();
                }
            }
        }

        public virtual bool ResendAlerts
        {
            get
            {
                return this._ResendAlerts;
            }
            set
            {
                if (this._ResendAlerts != value)
                {
                    this.OnResendAlertsChanging(value);
                    this._ResendAlerts = value;
                    this.SendPropertyChanged("ResendAlerts");
                    this.OnResendAlertsChanged();
                }
            }
        }

        public virtual string AlerttMessage
        {
            get
            {
                return this._AlerttMessage;
            }
            set
            {
                if (this._AlerttMessage != value)
                {
                    this.OnAlerttMessageChanging(value);
                    this._AlerttMessage = value;
                    this.SendPropertyChanged("AlerttMessage");
                    this.OnAlerttMessageChanged();
                }
            }
        }

        public virtual bool IsGeneric
        {
            get
            {
                return this._IsGeneric;
            }
            set
            {
                if (this._IsGeneric != value)
                {
                    this.OnIsGenericChanging(value);
                    this._IsGeneric = value;
                    this.SendPropertyChanged("IsGeneric");
                    this.OnIsGenericChanged();
                }
            }
        }

        public virtual int ResendAlertsInterval
        {
            get
            {
                return this._ResendAlertsInterval;
            }
            set
            {
                if (this._ResendAlertsInterval != value)
                {
                    this.OnResendAlertsIntervalChanging(value);
                    this._ResendAlertsInterval = value;
                    this.SendPropertyChanged("ResendAlertsInterval");
                    this.OnResendAlertsIntervalChanged();
                }
            }
        }

        public virtual bool AutoResolve
        {
            get
            {
                return this._AutoResolve;
            }
            set
            {
                if (this._AutoResolve != value)
                {
                    this.OnAutoResolveChanging(value);
                    this._AutoResolve = value;
                    this.SendPropertyChanged("AutoResolve");
                    this.OnAutoResolveChanged();
                }
            }
        }

        public virtual string MethodForResolve
        {
            get
            {
                return this._MethodForResolve;
            }
            set
            {
                if (this._MethodForResolve != value)
                {
                    this.OnMethodForResolveChanging(value);
                    this._MethodForResolve = value;
                    this.SendPropertyChanged("MethodForResolve");
                    this.OnMethodForResolveChanged();
                }
            }
        }

        public virtual IList<SystemEvent> SystemEvents
        {
            get
            {
                return this._SystemEvents;
            }
            set
            {
                if (this._SystemEvents != value)
                {
                    this._SystemEvents = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnAlertDefinitionIdChanging(System.Guid value);
        
        partial void OnAlertDefinitionIdChanged();
        partial void OnNameChanging(string value);
        
        partial void OnNameChanged();
        partial void OnAlertEnumValueChanging(int? value);
        
        partial void OnAlertEnumValueChanged();
        partial void OnIsNozzleAlertChanging(bool value);
        
        partial void OnIsNozzleAlertChanged();
        partial void OnIsDispenserAlertChanging(bool value);
        
        partial void OnIsDispenserAlertChanged();
        partial void OnIsTankAlertChanging(bool value);
        
        partial void OnIsTankAlertChanged();
        partial void OnIsStationAlertChanging(bool value);
        
        partial void OnIsStationAlertChanged();
        partial void OnLockDevicesChanging(bool value);
        
        partial void OnLockDevicesChanged();
        partial void OnExpressionChanging(string value);
        
        partial void OnExpressionChanged();
        partial void OnAlertIsDisabledChanging(bool value);
        
        partial void OnAlertIsDisabledChanged();
        partial void OnErrorThresholdChanging(decimal value);
        
        partial void OnErrorThresholdChanged();
        partial void OnResendAlertsChanging(bool value);
        
        partial void OnResendAlertsChanged();
        partial void OnAlerttMessageChanging(string value);
        
        partial void OnAlerttMessageChanged();
        partial void OnIsGenericChanging(bool value);
        
        partial void OnIsGenericChanged();
        partial void OnResendAlertsIntervalChanging(int value);
        
        partial void OnResendAlertsIntervalChanged();
        partial void OnAutoResolveChanging(bool value);
        
        partial void OnAutoResolveChanged();
        partial void OnMethodForResolveChanging(string value);
        
        partial void OnMethodForResolveChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TankFillingView : EntityBase, INotifyPropertyChanged {

        private System.Guid _ViewId;

        private System.DateTime? _StartTime;

        private System.DateTime? _EndTime;

        private decimal? _LevelStart;

        private decimal? _LevelEnd;

        private decimal? _TempStart;

        private decimal? _TempEnd;

        private decimal? _TFVolume;

        private decimal? _TFVolumeNormalized;

        private decimal? _INVVolume;

        private decimal? _INVVolumeNormalized;

        private decimal? _INVTemp;

        private decimal? _FuelDensity;

        private decimal? _UnitPrice;

        private int? _Number;

        private string _VehiclePlateNumber;

        private string _Description;

        private string _Name;

        private int? _TankNumber;

        private string _UserName;

        public TankFillingView()
        {
            OnCreated();
        }

        public virtual System.Guid ViewId
        {
            get
            {
                return this._ViewId;
            }
            set
            {
                if (this._ViewId != value)
                {
                    this.OnViewIdChanging(value);
                    this._ViewId = value;
                    this.SendPropertyChanged("ViewId");
                    this.OnViewIdChanged();
                }
            }
        }

        public virtual System.DateTime? StartTime
        {
            get
            {
                return this._StartTime;
            }
            set
            {
                if (this._StartTime != value)
                {
                    this.OnStartTimeChanging(value);
                    this._StartTime = value;
                    this.SendPropertyChanged("StartTime");
                    this.OnStartTimeChanged();
                }
            }
        }

        public virtual System.DateTime? EndTime
        {
            get
            {
                return this._EndTime;
            }
            set
            {
                if (this._EndTime != value)
                {
                    this.OnEndTimeChanging(value);
                    this._EndTime = value;
                    this.SendPropertyChanged("EndTime");
                    this.OnEndTimeChanged();
                }
            }
        }

        public virtual decimal? LevelStart
        {
            get
            {
                return this._LevelStart;
            }
            set
            {
                if (this._LevelStart != value)
                {
                    this.OnLevelStartChanging(value);
                    this._LevelStart = value;
                    this.SendPropertyChanged("LevelStart");
                    this.OnLevelStartChanged();
                }
            }
        }

        public virtual decimal? LevelEnd
        {
            get
            {
                return this._LevelEnd;
            }
            set
            {
                if (this._LevelEnd != value)
                {
                    this.OnLevelEndChanging(value);
                    this._LevelEnd = value;
                    this.SendPropertyChanged("LevelEnd");
                    this.OnLevelEndChanged();
                }
            }
        }

        public virtual decimal? TempStart
        {
            get
            {
                return this._TempStart;
            }
            set
            {
                if (this._TempStart != value)
                {
                    this.OnTempStartChanging(value);
                    this._TempStart = value;
                    this.SendPropertyChanged("TempStart");
                    this.OnTempStartChanged();
                }
            }
        }

        public virtual decimal? TempEnd
        {
            get
            {
                return this._TempEnd;
            }
            set
            {
                if (this._TempEnd != value)
                {
                    this.OnTempEndChanging(value);
                    this._TempEnd = value;
                    this.SendPropertyChanged("TempEnd");
                    this.OnTempEndChanged();
                }
            }
        }

        public virtual decimal? TFVolume
        {
            get
            {
                return this._TFVolume;
            }
            set
            {
                if (this._TFVolume != value)
                {
                    this.OnTFVolumeChanging(value);
                    this._TFVolume = value;
                    this.SendPropertyChanged("TFVolume");
                    this.OnTFVolumeChanged();
                }
            }
        }

        public virtual decimal? TFVolumeNormalized
        {
            get
            {
                return this._TFVolumeNormalized;
            }
            set
            {
                if (this._TFVolumeNormalized != value)
                {
                    this.OnTFVolumeNormalizedChanging(value);
                    this._TFVolumeNormalized = value;
                    this.SendPropertyChanged("TFVolumeNormalized");
                    this.OnTFVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal? INVVolume
        {
            get
            {
                return this._INVVolume;
            }
            set
            {
                if (this._INVVolume != value)
                {
                    this.OnINVVolumeChanging(value);
                    this._INVVolume = value;
                    this.SendPropertyChanged("INVVolume");
                    this.OnINVVolumeChanged();
                }
            }
        }

        public virtual decimal? INVVolumeNormalized
        {
            get
            {
                return this._INVVolumeNormalized;
            }
            set
            {
                if (this._INVVolumeNormalized != value)
                {
                    this.OnINVVolumeNormalizedChanging(value);
                    this._INVVolumeNormalized = value;
                    this.SendPropertyChanged("INVVolumeNormalized");
                    this.OnINVVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal? INVTemp
        {
            get
            {
                return this._INVTemp;
            }
            set
            {
                if (this._INVTemp != value)
                {
                    this.OnINVTempChanging(value);
                    this._INVTemp = value;
                    this.SendPropertyChanged("INVTemp");
                    this.OnINVTempChanged();
                }
            }
        }

        public virtual decimal? FuelDensity
        {
            get
            {
                return this._FuelDensity;
            }
            set
            {
                if (this._FuelDensity != value)
                {
                    this.OnFuelDensityChanging(value);
                    this._FuelDensity = value;
                    this.SendPropertyChanged("FuelDensity");
                    this.OnFuelDensityChanged();
                }
            }
        }

        public virtual decimal? UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        public virtual int? Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if (this._Number != value)
                {
                    this.OnNumberChanging(value);
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        public virtual string VehiclePlateNumber
        {
            get
            {
                return this._VehiclePlateNumber;
            }
            set
            {
                if (this._VehiclePlateNumber != value)
                {
                    this.OnVehiclePlateNumberChanging(value);
                    this._VehiclePlateNumber = value;
                    this.SendPropertyChanged("VehiclePlateNumber");
                    this.OnVehiclePlateNumberChanged();
                }
            }
        }

        public virtual string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        public virtual int? TankNumber
        {
            get
            {
                return this._TankNumber;
            }
            set
            {
                if (this._TankNumber != value)
                {
                    this.OnTankNumberChanging(value);
                    this._TankNumber = value;
                    this.SendPropertyChanged("TankNumber");
                    this.OnTankNumberChanged();
                }
            }
        }

        public virtual string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnViewIdChanging(System.Guid value);
        
        partial void OnViewIdChanged();
        partial void OnStartTimeChanging(System.DateTime? value);
        
        partial void OnStartTimeChanged();
        partial void OnEndTimeChanging(System.DateTime? value);
        
        partial void OnEndTimeChanged();
        partial void OnLevelStartChanging(decimal? value);
        
        partial void OnLevelStartChanged();
        partial void OnLevelEndChanging(decimal? value);
        
        partial void OnLevelEndChanged();
        partial void OnTempStartChanging(decimal? value);
        
        partial void OnTempStartChanged();
        partial void OnTempEndChanging(decimal? value);
        
        partial void OnTempEndChanged();
        partial void OnTFVolumeChanging(decimal? value);
        
        partial void OnTFVolumeChanged();
        partial void OnTFVolumeNormalizedChanging(decimal? value);
        
        partial void OnTFVolumeNormalizedChanged();
        partial void OnINVVolumeChanging(decimal? value);
        
        partial void OnINVVolumeChanged();
        partial void OnINVVolumeNormalizedChanging(decimal? value);
        
        partial void OnINVVolumeNormalizedChanged();
        partial void OnINVTempChanging(decimal? value);
        
        partial void OnINVTempChanged();
        partial void OnFuelDensityChanging(decimal? value);
        
        partial void OnFuelDensityChanged();
        partial void OnUnitPriceChanging(decimal? value);
        
        partial void OnUnitPriceChanged();
        partial void OnNumberChanging(int? value);
        
        partial void OnNumberChanged();
        partial void OnVehiclePlateNumberChanging(string value);
        
        partial void OnVehiclePlateNumberChanged();
        partial void OnDescriptionChanging(string value);
        
        partial void OnDescriptionChanged();
        partial void OnNameChanging(string value);
        
        partial void OnNameChanged();
        partial void OnTankNumberChanging(int? value);
        
        partial void OnTankNumberChanged();
        partial void OnUserNameChanging(string value);
        
        partial void OnUserNameChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class SalesView : EntityBase, INotifyPropertyChanged {

        private System.Guid _ViewId;

        private decimal _Volume;

        private decimal _VolumeNormalized;

        private decimal _UnitPrice;

        private decimal _TotalPrice;

        private decimal _TotalizerStart;

        private decimal _TotalizerEnd;

        private string _Name;

        private int _OfficialNozzleNumber;

        private int _OfficialPumpNumber;

        private System.DateTime _TransactionTimeStamp;

        private string _UserName;

        public SalesView()
        {
            OnCreated();
        }

        public virtual System.Guid ViewId
        {
            get
            {
                return this._ViewId;
            }
            set
            {
                if (this._ViewId != value)
                {
                    this.OnViewIdChanging(value);
                    this._ViewId = value;
                    this.SendPropertyChanged("ViewId");
                    this.OnViewIdChanged();
                }
            }
        }

        public virtual decimal Volume
        {
            get
            {
                return this._Volume;
            }
            set
            {
                if (this._Volume != value)
                {
                    this.OnVolumeChanging(value);
                    this._Volume = value;
                    this.SendPropertyChanged("Volume");
                    this.OnVolumeChanged();
                }
            }
        }

        public virtual decimal VolumeNormalized
        {
            get
            {
                return this._VolumeNormalized;
            }
            set
            {
                if (this._VolumeNormalized != value)
                {
                    this.OnVolumeNormalizedChanging(value);
                    this._VolumeNormalized = value;
                    this.SendPropertyChanged("VolumeNormalized");
                    this.OnVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        public virtual decimal TotalPrice
        {
            get
            {
                return this._TotalPrice;
            }
            set
            {
                if (this._TotalPrice != value)
                {
                    this.OnTotalPriceChanging(value);
                    this._TotalPrice = value;
                    this.SendPropertyChanged("TotalPrice");
                    this.OnTotalPriceChanged();
                }
            }
        }

        public virtual decimal TotalizerStart
        {
            get
            {
                return this._TotalizerStart;
            }
            set
            {
                if (this._TotalizerStart != value)
                {
                    this.OnTotalizerStartChanging(value);
                    this._TotalizerStart = value;
                    this.SendPropertyChanged("TotalizerStart");
                    this.OnTotalizerStartChanged();
                }
            }
        }

        public virtual decimal TotalizerEnd
        {
            get
            {
                return this._TotalizerEnd;
            }
            set
            {
                if (this._TotalizerEnd != value)
                {
                    this.OnTotalizerEndChanging(value);
                    this._TotalizerEnd = value;
                    this.SendPropertyChanged("TotalizerEnd");
                    this.OnTotalizerEndChanged();
                }
            }
        }

        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        public virtual int OfficialNozzleNumber
        {
            get
            {
                return this._OfficialNozzleNumber;
            }
            set
            {
                if (this._OfficialNozzleNumber != value)
                {
                    this.OnOfficialNozzleNumberChanging(value);
                    this._OfficialNozzleNumber = value;
                    this.SendPropertyChanged("OfficialNozzleNumber");
                    this.OnOfficialNozzleNumberChanged();
                }
            }
        }

        public virtual int OfficialPumpNumber
        {
            get
            {
                return this._OfficialPumpNumber;
            }
            set
            {
                if (this._OfficialPumpNumber != value)
                {
                    this.OnOfficialPumpNumberChanging(value);
                    this._OfficialPumpNumber = value;
                    this.SendPropertyChanged("OfficialPumpNumber");
                    this.OnOfficialPumpNumberChanged();
                }
            }
        }

        public virtual System.DateTime TransactionTimeStamp
        {
            get
            {
                return this._TransactionTimeStamp;
            }
            set
            {
                if (this._TransactionTimeStamp != value)
                {
                    this.OnTransactionTimeStampChanging(value);
                    this._TransactionTimeStamp = value;
                    this.SendPropertyChanged("TransactionTimeStamp");
                    this.OnTransactionTimeStampChanged();
                }
            }
        }

        public virtual string UserName
        {
            get
            {
                return this._UserName;
            }
            set
            {
                if (this._UserName != value)
                {
                    this.OnUserNameChanging(value);
                    this._UserName = value;
                    this.SendPropertyChanged("UserName");
                    this.OnUserNameChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnViewIdChanging(System.Guid value);
        
        partial void OnViewIdChanged();
        partial void OnVolumeChanging(decimal value);
        
        partial void OnVolumeChanged();
        partial void OnVolumeNormalizedChanging(decimal value);
        
        partial void OnVolumeNormalizedChanged();
        partial void OnUnitPriceChanging(decimal value);
        
        partial void OnUnitPriceChanged();
        partial void OnTotalPriceChanging(decimal value);
        
        partial void OnTotalPriceChanged();
        partial void OnTotalizerStartChanging(decimal value);
        
        partial void OnTotalizerStartChanged();
        partial void OnTotalizerEndChanging(decimal value);
        
        partial void OnTotalizerEndChanged();
        partial void OnNameChanging(string value);
        
        partial void OnNameChanged();
        partial void OnOfficialNozzleNumberChanging(int value);
        
        partial void OnOfficialNozzleNumberChanged();
        partial void OnOfficialPumpNumberChanging(int value);
        
        partial void OnOfficialPumpNumberChanged();
        partial void OnTransactionTimeStampChanging(System.DateTime value);
        
        partial void OnTransactionTimeStampChanged();
        partial void OnUserNameChanging(string value);
        
        partial void OnUserNameChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class Shift : EntityBase, INotifyPropertyChanged {

        private System.Guid _ShiftId;

        private System.Guid _ApplicationUserId;

        private System.DateTime _ShiftBegin;

        private System.DateTime? _ShiftEnd;

        private ApplicationUser _ApplicationUser;

        public Shift()
        {
            OnCreated();
        }

        public virtual System.Guid ShiftId
        {
            get
            {
                return this._ShiftId;
            }
            set
            {
                if (this._ShiftId != value)
                {
                    this.OnShiftIdChanging(value);
                    this._ShiftId = value;
                    this.SendPropertyChanged("ShiftId");
                    this.OnShiftIdChanged();
                }
            }
        }

        public virtual System.Guid ApplicationUserId
        {
            get
            {
                return this._ApplicationUserId;
            }
            set
            {
                if (this._ApplicationUserId != value)
                {
                    this.OnApplicationUserIdChanging(value);
                    this._ApplicationUserId = value;
                    this.SendPropertyChanged("ApplicationUserId");
                    this.OnApplicationUserIdChanged();
                }
            }
        }

        public virtual System.DateTime ShiftBegin
        {
            get
            {
                return this._ShiftBegin;
            }
            set
            {
                if (this._ShiftBegin != value)
                {
                    this.OnShiftBeginChanging(value);
                    this._ShiftBegin = value;
                    this.SendPropertyChanged("ShiftBegin");
                    this.OnShiftBeginChanged();
                }
            }
        }

        public virtual System.DateTime? ShiftEnd
        {
            get
            {
                return this._ShiftEnd;
            }
            set
            {
                if (this._ShiftEnd != value)
                {
                    this.OnShiftEndChanging(value);
                    this._ShiftEnd = value;
                    this.SendPropertyChanged("ShiftEnd");
                    this.OnShiftEndChanged();
                }
            }
        }

        public virtual ApplicationUser ApplicationUser
        {
            get
            {
                return this._ApplicationUser;
            }
            set
            {
                if (this._ApplicationUser != value)
                {
                    this.OnApplicationUserChanging(value);
                    this._ApplicationUser = value;
                    this.SendPropertyChanged("ApplicationUser");
                    this.OnApplicationUserChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnShiftIdChanging(System.Guid value);
        
        partial void OnShiftIdChanged();
        partial void OnApplicationUserIdChanging(System.Guid value);
        
        partial void OnApplicationUserIdChanged();
        partial void OnShiftBeginChanging(System.DateTime value);
        
        partial void OnShiftBeginChanged();
        partial void OnShiftEndChanging(System.DateTime? value);
        
        partial void OnShiftEndChanged();
        partial void OnApplicationUserChanging(ApplicationUser value);

        partial void OnApplicationUserChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class InvoiceGroupView : EntityBase, INotifyPropertyChanged {

        private System.Guid _ViewId;

        private decimal? _VatAmount;

        private int _TransactionType;

        private System.DateTime? _TransactionDate;

        private decimal? _TotalAmount;

        private decimal? _NettoAmount;

        private int? _MinNumber;

        private int? _MaxNumber;

        private string _Description;

        private string _DateString2;

        private string _DateString;

        private bool? _IsInternal;

        private int? _TransactionSign;

        public InvoiceGroupView()
        {
            OnCreated();
        }

        public virtual System.Guid ViewId
        {
            get
            {
                return this._ViewId;
            }
            set
            {
                if (this._ViewId != value)
                {
                    this.OnViewIdChanging(value);
                    this._ViewId = value;
                    this.SendPropertyChanged("ViewId");
                    this.OnViewIdChanged();
                }
            }
        }

        public virtual decimal? VatAmount
        {
            get
            {
                return this._VatAmount;
            }
            set
            {
                if (this._VatAmount != value)
                {
                    this.OnVatAmountChanging(value);
                    this._VatAmount = value;
                    this.SendPropertyChanged("VatAmount");
                    this.OnVatAmountChanged();
                }
            }
        }

        public virtual int TransactionType
        {
            get
            {
                return this._TransactionType;
            }
            set
            {
                if (this._TransactionType != value)
                {
                    this.OnTransactionTypeChanging(value);
                    this._TransactionType = value;
                    this.SendPropertyChanged("TransactionType");
                    this.OnTransactionTypeChanged();
                }
            }
        }

        public virtual System.DateTime? TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

        public virtual decimal? TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        public virtual decimal? NettoAmount
        {
            get
            {
                return this._NettoAmount;
            }
            set
            {
                if (this._NettoAmount != value)
                {
                    this.OnNettoAmountChanging(value);
                    this._NettoAmount = value;
                    this.SendPropertyChanged("NettoAmount");
                    this.OnNettoAmountChanged();
                }
            }
        }

        public virtual int? MinNumber
        {
            get
            {
                return this._MinNumber;
            }
            set
            {
                if (this._MinNumber != value)
                {
                    this.OnMinNumberChanging(value);
                    this._MinNumber = value;
                    this.SendPropertyChanged("MinNumber");
                    this.OnMinNumberChanged();
                }
            }
        }

        public virtual int? MaxNumber
        {
            get
            {
                return this._MaxNumber;
            }
            set
            {
                if (this._MaxNumber != value)
                {
                    this.OnMaxNumberChanging(value);
                    this._MaxNumber = value;
                    this.SendPropertyChanged("MaxNumber");
                    this.OnMaxNumberChanged();
                }
            }
        }

        public virtual string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        public virtual string DateString2
        {
            get
            {
                return this._DateString2;
            }
            set
            {
                if (this._DateString2 != value)
                {
                    this.OnDateString2Changing(value);
                    this._DateString2 = value;
                    this.SendPropertyChanged("DateString2");
                    this.OnDateString2Changed();
                }
            }
        }

        public virtual string DateString
        {
            get
            {
                return this._DateString;
            }
            set
            {
                if (this._DateString != value)
                {
                    this.OnDateStringChanging(value);
                    this._DateString = value;
                    this.SendPropertyChanged("DateString");
                    this.OnDateStringChanged();
                }
            }
        }

        public virtual bool? IsInternal
        {
            get
            {
                return this._IsInternal;
            }
            set
            {
                if (this._IsInternal != value)
                {
                    this.OnIsInternalChanging(value);
                    this._IsInternal = value;
                    this.SendPropertyChanged("IsInternal");
                    this.OnIsInternalChanged();
                }
            }
        }

        public virtual int? TransactionSign
        {
            get
            {
                return this._TransactionSign;
            }
            set
            {
                if (this._TransactionSign != value)
                {
                    this.OnTransactionSignChanging(value);
                    this._TransactionSign = value;
                    this.SendPropertyChanged("TransactionSign");
                    this.OnTransactionSignChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnViewIdChanging(System.Guid value);
        
        partial void OnViewIdChanged();
        partial void OnVatAmountChanging(decimal? value);
        
        partial void OnVatAmountChanged();
        partial void OnTransactionTypeChanging(int value);
        
        partial void OnTransactionTypeChanged();
        partial void OnTransactionDateChanging(System.DateTime? value);
        
        partial void OnTransactionDateChanged();
        partial void OnTotalAmountChanging(decimal? value);
        
        partial void OnTotalAmountChanged();
        partial void OnNettoAmountChanging(decimal? value);
        
        partial void OnNettoAmountChanged();
        partial void OnMinNumberChanging(int? value);
        
        partial void OnMinNumberChanged();
        partial void OnMaxNumberChanging(int? value);
        
        partial void OnMaxNumberChanged();
        partial void OnDescriptionChanging(string value);
        
        partial void OnDescriptionChanged();
        partial void OnDateString2Changing(string value);
        
        partial void OnDateString2Changed();
        partial void OnDateStringChanging(string value);
        
        partial void OnDateStringChanged();
        partial void OnIsInternalChanging(bool? value);
        
        partial void OnIsInternalChanged();
        partial void OnTransactionSignChanging(int? value);
        
        partial void OnTransactionSignChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TankLevelStartView : EntityBase, INotifyPropertyChanged {

        private System.Guid _ViewId;

        private System.DateTime _TansDate;

        private System.Guid _TankId;

        private decimal? _Level;

        public TankLevelStartView()
        {
            OnCreated();
        }

        public virtual System.Guid ViewId
        {
            get
            {
                return this._ViewId;
            }
            set
            {
                if (this._ViewId != value)
                {
                    this.OnViewIdChanging(value);
                    this._ViewId = value;
                    this.SendPropertyChanged("ViewId");
                    this.OnViewIdChanged();
                }
            }
        }

        public virtual System.DateTime TansDate
        {
            get
            {
                return this._TansDate;
            }
            set
            {
                if (this._TansDate != value)
                {
                    this.OnTansDateChanging(value);
                    this._TansDate = value;
                    this.SendPropertyChanged("TansDate");
                    this.OnTansDateChanged();
                }
            }
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual decimal? Level
        {
            get
            {
                return this._Level;
            }
            set
            {
                if (this._Level != value)
                {
                    this.OnLevelChanging(value);
                    this._Level = value;
                    this.SendPropertyChanged("Level");
                    this.OnLevelChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnViewIdChanging(System.Guid value);
        
        partial void OnViewIdChanged();
        partial void OnTansDateChanging(System.DateTime value);
        
        partial void OnTansDateChanged();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnLevelChanging(decimal? value);
        
        partial void OnLevelChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TankLevelEndView : EntityBase, INotifyPropertyChanged {

        private System.Guid _ViewId;

        private System.DateTime _TansDate;

        private System.Guid _TankId;

        private decimal? _Level;

        public TankLevelEndView()
        {
            OnCreated();
        }

        public virtual System.Guid ViewId
        {
            get
            {
                return this._ViewId;
            }
            set
            {
                if (this._ViewId != value)
                {
                    this.OnViewIdChanging(value);
                    this._ViewId = value;
                    this.SendPropertyChanged("ViewId");
                    this.OnViewIdChanged();
                }
            }
        }

        public virtual System.DateTime TansDate
        {
            get
            {
                return this._TansDate;
            }
            set
            {
                if (this._TansDate != value)
                {
                    this.OnTansDateChanging(value);
                    this._TansDate = value;
                    this.SendPropertyChanged("TansDate");
                    this.OnTansDateChanged();
                }
            }
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual decimal? Level
        {
            get
            {
                return this._Level;
            }
            set
            {
                if (this._Level != value)
                {
                    this.OnLevelChanging(value);
                    this._Level = value;
                    this.SendPropertyChanged("Level");
                    this.OnLevelChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnViewIdChanging(System.Guid value);
        
        partial void OnViewIdChanged();
        partial void OnTansDateChanging(System.DateTime value);
        
        partial void OnTansDateChanged();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnLevelChanging(decimal? value);
        
        partial void OnLevelChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TankFillingInvoiceView : EntityBase, INotifyPropertyChanged {

        private System.Guid _ViewId;

        private decimal _VolumeRealNormalized;

        private decimal _VolumeReal;

        private decimal _VolumeNormalized;

        private decimal _Volume;

        private int _TransactionType;

        private System.DateTime _TransactionTimeEnd;

        private System.DateTime _TransactionTime;

        private decimal _TankTemperatureStart;

        private decimal _TankTemperatureEnd;

        private System.Guid _TankId;

        private decimal _LevelStart;

        private decimal _LevelEnd;

        private System.Guid _InvoiceTypeId;

        private decimal _InvoiceVolumeNormalized;

        private decimal _InvoiceVolume;

        public TankFillingInvoiceView()
        {
            OnCreated();
        }

        public virtual System.Guid ViewId
        {
            get
            {
                return this._ViewId;
            }
            set
            {
                if (this._ViewId != value)
                {
                    this.OnViewIdChanging(value);
                    this._ViewId = value;
                    this.SendPropertyChanged("ViewId");
                    this.OnViewIdChanged();
                }
            }
        }

        public virtual decimal VolumeRealNormalized
        {
            get
            {
                return this._VolumeRealNormalized;
            }
            set
            {
                if (this._VolumeRealNormalized != value)
                {
                    this.OnVolumeRealNormalizedChanging(value);
                    this._VolumeRealNormalized = value;
                    this.SendPropertyChanged("VolumeRealNormalized");
                    this.OnVolumeRealNormalizedChanged();
                }
            }
        }

        public virtual decimal VolumeReal
        {
            get
            {
                return this._VolumeReal;
            }
            set
            {
                if (this._VolumeReal != value)
                {
                    this.OnVolumeRealChanging(value);
                    this._VolumeReal = value;
                    this.SendPropertyChanged("VolumeReal");
                    this.OnVolumeRealChanged();
                }
            }
        }

        public virtual decimal VolumeNormalized
        {
            get
            {
                return this._VolumeNormalized;
            }
            set
            {
                if (this._VolumeNormalized != value)
                {
                    this.OnVolumeNormalizedChanging(value);
                    this._VolumeNormalized = value;
                    this.SendPropertyChanged("VolumeNormalized");
                    this.OnVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal Volume
        {
            get
            {
                return this._Volume;
            }
            set
            {
                if (this._Volume != value)
                {
                    this.OnVolumeChanging(value);
                    this._Volume = value;
                    this.SendPropertyChanged("Volume");
                    this.OnVolumeChanged();
                }
            }
        }

        public virtual int TransactionType
        {
            get
            {
                return this._TransactionType;
            }
            set
            {
                if (this._TransactionType != value)
                {
                    this.OnTransactionTypeChanging(value);
                    this._TransactionType = value;
                    this.SendPropertyChanged("TransactionType");
                    this.OnTransactionTypeChanged();
                }
            }
        }

        public virtual System.DateTime TransactionTimeEnd
        {
            get
            {
                return this._TransactionTimeEnd;
            }
            set
            {
                if (this._TransactionTimeEnd != value)
                {
                    this.OnTransactionTimeEndChanging(value);
                    this._TransactionTimeEnd = value;
                    this.SendPropertyChanged("TransactionTimeEnd");
                    this.OnTransactionTimeEndChanged();
                }
            }
        }

        public virtual System.DateTime TransactionTime
        {
            get
            {
                return this._TransactionTime;
            }
            set
            {
                if (this._TransactionTime != value)
                {
                    this.OnTransactionTimeChanging(value);
                    this._TransactionTime = value;
                    this.SendPropertyChanged("TransactionTime");
                    this.OnTransactionTimeChanged();
                }
            }
        }

        public virtual decimal TankTemperatureStart
        {
            get
            {
                return this._TankTemperatureStart;
            }
            set
            {
                if (this._TankTemperatureStart != value)
                {
                    this.OnTankTemperatureStartChanging(value);
                    this._TankTemperatureStart = value;
                    this.SendPropertyChanged("TankTemperatureStart");
                    this.OnTankTemperatureStartChanged();
                }
            }
        }

        public virtual decimal TankTemperatureEnd
        {
            get
            {
                return this._TankTemperatureEnd;
            }
            set
            {
                if (this._TankTemperatureEnd != value)
                {
                    this.OnTankTemperatureEndChanging(value);
                    this._TankTemperatureEnd = value;
                    this.SendPropertyChanged("TankTemperatureEnd");
                    this.OnTankTemperatureEndChanged();
                }
            }
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual decimal LevelStart
        {
            get
            {
                return this._LevelStart;
            }
            set
            {
                if (this._LevelStart != value)
                {
                    this.OnLevelStartChanging(value);
                    this._LevelStart = value;
                    this.SendPropertyChanged("LevelStart");
                    this.OnLevelStartChanged();
                }
            }
        }

        public virtual decimal LevelEnd
        {
            get
            {
                return this._LevelEnd;
            }
            set
            {
                if (this._LevelEnd != value)
                {
                    this.OnLevelEndChanging(value);
                    this._LevelEnd = value;
                    this.SendPropertyChanged("LevelEnd");
                    this.OnLevelEndChanged();
                }
            }
        }

        public virtual System.Guid InvoiceTypeId
        {
            get
            {
                return this._InvoiceTypeId;
            }
            set
            {
                if (this._InvoiceTypeId != value)
                {
                    this.OnInvoiceTypeIdChanging(value);
                    this._InvoiceTypeId = value;
                    this.SendPropertyChanged("InvoiceTypeId");
                    this.OnInvoiceTypeIdChanged();
                }
            }
        }

        public virtual decimal InvoiceVolumeNormalized
        {
            get
            {
                return this._InvoiceVolumeNormalized;
            }
            set
            {
                if (this._InvoiceVolumeNormalized != value)
                {
                    this.OnInvoiceVolumeNormalizedChanging(value);
                    this._InvoiceVolumeNormalized = value;
                    this.SendPropertyChanged("InvoiceVolumeNormalized");
                    this.OnInvoiceVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal InvoiceVolume
        {
            get
            {
                return this._InvoiceVolume;
            }
            set
            {
                if (this._InvoiceVolume != value)
                {
                    this.OnInvoiceVolumeChanging(value);
                    this._InvoiceVolume = value;
                    this.SendPropertyChanged("InvoiceVolume");
                    this.OnInvoiceVolumeChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnViewIdChanging(System.Guid value);
        
        partial void OnViewIdChanged();
        partial void OnVolumeRealNormalizedChanging(decimal value);
        
        partial void OnVolumeRealNormalizedChanged();
        partial void OnVolumeRealChanging(decimal value);
        
        partial void OnVolumeRealChanged();
        partial void OnVolumeNormalizedChanging(decimal value);
        
        partial void OnVolumeNormalizedChanged();
        partial void OnVolumeChanging(decimal value);
        
        partial void OnVolumeChanged();
        partial void OnTransactionTypeChanging(int value);
        
        partial void OnTransactionTypeChanged();
        partial void OnTransactionTimeEndChanging(System.DateTime value);
        
        partial void OnTransactionTimeEndChanged();
        partial void OnTransactionTimeChanging(System.DateTime value);
        
        partial void OnTransactionTimeChanged();
        partial void OnTankTemperatureStartChanging(decimal value);
        
        partial void OnTankTemperatureStartChanged();
        partial void OnTankTemperatureEndChanging(decimal value);
        
        partial void OnTankTemperatureEndChanged();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnLevelStartChanging(decimal value);
        
        partial void OnLevelStartChanged();
        partial void OnLevelEndChanging(decimal value);
        
        partial void OnLevelEndChanged();
        partial void OnInvoiceTypeIdChanging(System.Guid value);
        
        partial void OnInvoiceTypeIdChanged();
        partial void OnInvoiceVolumeNormalizedChanging(decimal value);
        
        partial void OnInvoiceVolumeNormalizedChanged();
        partial void OnInvoiceVolumeChanging(decimal value);
        
        partial void OnInvoiceVolumeChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class InvoicePrintView : EntityBase, INotifyPropertyChanged {

        private System.Guid _InvoiceLineId;

        private decimal _VolumeNormalized;

        private decimal _Volume;

        private string _VehicleNumber;

        private decimal? _VatAmount;

        private decimal _UnitPrice;

        private System.DateTime _TransactionDate;

        private string _TraderTin;

        private string _TraderName;

        private decimal? _TotalAmount;

        private decimal _Temperature;

        private string _Series;

        private int _Number;

        private decimal? _NettoAmount;

        private string _Name;

        private System.Guid _InvoiceId;

        private string _Description;

        private string _CompanyTIN;

        private string _CompanyTaxOffice;

        private string _CompanyPhone;

        private string _CompanyOccupation;

        private string _CompanyName;

        private string _CompanyFax;

        private string _CompanyCity;

        private string _CompanyAddress;

        private string _Code;

        private int _OfficialPumpNumber;

        private int _OfficialNozzleNumber;

        private string _InvoiceSignature;

        public InvoicePrintView()
        {
            OnCreated();
        }

        public virtual System.Guid InvoiceLineId
        {
            get
            {
                return this._InvoiceLineId;
            }
            set
            {
                if (this._InvoiceLineId != value)
                {
                    this.OnInvoiceLineIdChanging(value);
                    this._InvoiceLineId = value;
                    this.SendPropertyChanged("InvoiceLineId");
                    this.OnInvoiceLineIdChanged();
                }
            }
        }

        public virtual decimal VolumeNormalized
        {
            get
            {
                return this._VolumeNormalized;
            }
            set
            {
                if (this._VolumeNormalized != value)
                {
                    this.OnVolumeNormalizedChanging(value);
                    this._VolumeNormalized = value;
                    this.SendPropertyChanged("VolumeNormalized");
                    this.OnVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal Volume
        {
            get
            {
                return this._Volume;
            }
            set
            {
                if (this._Volume != value)
                {
                    this.OnVolumeChanging(value);
                    this._Volume = value;
                    this.SendPropertyChanged("Volume");
                    this.OnVolumeChanged();
                }
            }
        }

        public virtual string VehicleNumber
        {
            get
            {
                return this._VehicleNumber;
            }
            set
            {
                if (this._VehicleNumber != value)
                {
                    this.OnVehicleNumberChanging(value);
                    this._VehicleNumber = value;
                    this.SendPropertyChanged("VehicleNumber");
                    this.OnVehicleNumberChanged();
                }
            }
        }

        public virtual decimal? VatAmount
        {
            get
            {
                return this._VatAmount;
            }
            set
            {
                if (this._VatAmount != value)
                {
                    this.OnVatAmountChanging(value);
                    this._VatAmount = value;
                    this.SendPropertyChanged("VatAmount");
                    this.OnVatAmountChanged();
                }
            }
        }

        public virtual decimal UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        public virtual System.DateTime TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

        public virtual string TraderTin
        {
            get
            {
                return this._TraderTin;
            }
            set
            {
                if (this._TraderTin != value)
                {
                    this.OnTraderTinChanging(value);
                    this._TraderTin = value;
                    this.SendPropertyChanged("TraderTin");
                    this.OnTraderTinChanged();
                }
            }
        }

        public virtual string TraderName
        {
            get
            {
                return this._TraderName;
            }
            set
            {
                if (this._TraderName != value)
                {
                    this.OnTraderNameChanging(value);
                    this._TraderName = value;
                    this.SendPropertyChanged("TraderName");
                    this.OnTraderNameChanged();
                }
            }
        }

        public virtual decimal? TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        public virtual decimal Temperature
        {
            get
            {
                return this._Temperature;
            }
            set
            {
                if (this._Temperature != value)
                {
                    this.OnTemperatureChanging(value);
                    this._Temperature = value;
                    this.SendPropertyChanged("Temperature");
                    this.OnTemperatureChanged();
                }
            }
        }

        public virtual string Series
        {
            get
            {
                return this._Series;
            }
            set
            {
                if (this._Series != value)
                {
                    this.OnSeriesChanging(value);
                    this._Series = value;
                    this.SendPropertyChanged("Series");
                    this.OnSeriesChanged();
                }
            }
        }

        public virtual int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if (this._Number != value)
                {
                    this.OnNumberChanging(value);
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        public virtual decimal? NettoAmount
        {
            get
            {
                return this._NettoAmount;
            }
            set
            {
                if (this._NettoAmount != value)
                {
                    this.OnNettoAmountChanging(value);
                    this._NettoAmount = value;
                    this.SendPropertyChanged("NettoAmount");
                    this.OnNettoAmountChanged();
                }
            }
        }

        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        public virtual System.Guid InvoiceId
        {
            get
            {
                return this._InvoiceId;
            }
            set
            {
                if (this._InvoiceId != value)
                {
                    this.OnInvoiceIdChanging(value);
                    this._InvoiceId = value;
                    this.SendPropertyChanged("InvoiceId");
                    this.OnInvoiceIdChanged();
                }
            }
        }

        public virtual string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        public virtual string CompanyTIN
        {
            get
            {
                return this._CompanyTIN;
            }
            set
            {
                if (this._CompanyTIN != value)
                {
                    this.OnCompanyTINChanging(value);
                    this._CompanyTIN = value;
                    this.SendPropertyChanged("CompanyTIN");
                    this.OnCompanyTINChanged();
                }
            }
        }

        public virtual string CompanyTaxOffice
        {
            get
            {
                return this._CompanyTaxOffice;
            }
            set
            {
                if (this._CompanyTaxOffice != value)
                {
                    this.OnCompanyTaxOfficeChanging(value);
                    this._CompanyTaxOffice = value;
                    this.SendPropertyChanged("CompanyTaxOffice");
                    this.OnCompanyTaxOfficeChanged();
                }
            }
        }

        public virtual string CompanyPhone
        {
            get
            {
                return this._CompanyPhone;
            }
            set
            {
                if (this._CompanyPhone != value)
                {
                    this.OnCompanyPhoneChanging(value);
                    this._CompanyPhone = value;
                    this.SendPropertyChanged("CompanyPhone");
                    this.OnCompanyPhoneChanged();
                }
            }
        }

        public virtual string CompanyOccupation
        {
            get
            {
                return this._CompanyOccupation;
            }
            set
            {
                if (this._CompanyOccupation != value)
                {
                    this.OnCompanyOccupationChanging(value);
                    this._CompanyOccupation = value;
                    this.SendPropertyChanged("CompanyOccupation");
                    this.OnCompanyOccupationChanged();
                }
            }
        }

        public virtual string CompanyName
        {
            get
            {
                return this._CompanyName;
            }
            set
            {
                if (this._CompanyName != value)
                {
                    this.OnCompanyNameChanging(value);
                    this._CompanyName = value;
                    this.SendPropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }

        public virtual string CompanyFax
        {
            get
            {
                return this._CompanyFax;
            }
            set
            {
                if (this._CompanyFax != value)
                {
                    this.OnCompanyFaxChanging(value);
                    this._CompanyFax = value;
                    this.SendPropertyChanged("CompanyFax");
                    this.OnCompanyFaxChanged();
                }
            }
        }

        public virtual string CompanyCity
        {
            get
            {
                return this._CompanyCity;
            }
            set
            {
                if (this._CompanyCity != value)
                {
                    this.OnCompanyCityChanging(value);
                    this._CompanyCity = value;
                    this.SendPropertyChanged("CompanyCity");
                    this.OnCompanyCityChanged();
                }
            }
        }

        public virtual string CompanyAddress
        {
            get
            {
                return this._CompanyAddress;
            }
            set
            {
                if (this._CompanyAddress != value)
                {
                    this.OnCompanyAddressChanging(value);
                    this._CompanyAddress = value;
                    this.SendPropertyChanged("CompanyAddress");
                    this.OnCompanyAddressChanged();
                }
            }
        }

        public virtual string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if (this._Code != value)
                {
                    this.OnCodeChanging(value);
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }

        public virtual int OfficialPumpNumber
        {
            get
            {
                return this._OfficialPumpNumber;
            }
            set
            {
                if (this._OfficialPumpNumber != value)
                {
                    this.OnOfficialPumpNumberChanging(value);
                    this._OfficialPumpNumber = value;
                    this.SendPropertyChanged("OfficialPumpNumber");
                    this.OnOfficialPumpNumberChanged();
                }
            }
        }

        public virtual int OfficialNozzleNumber
        {
            get
            {
                return this._OfficialNozzleNumber;
            }
            set
            {
                if (this._OfficialNozzleNumber != value)
                {
                    this.OnOfficialNozzleNumberChanging(value);
                    this._OfficialNozzleNumber = value;
                    this.SendPropertyChanged("OfficialNozzleNumber");
                    this.OnOfficialNozzleNumberChanged();
                }
            }
        }

        public virtual string InvoiceSignature
        {
            get
            {
                return this._InvoiceSignature;
            }
            set
            {
                if (this._InvoiceSignature != value)
                {
                    this.OnInvoiceSignatureChanging(value);
                    this._InvoiceSignature = value;
                    this.SendPropertyChanged("InvoiceSignature");
                    this.OnInvoiceSignatureChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnInvoiceLineIdChanging(System.Guid value);
        
        partial void OnInvoiceLineIdChanged();
        partial void OnVolumeNormalizedChanging(decimal value);
        
        partial void OnVolumeNormalizedChanged();
        partial void OnVolumeChanging(decimal value);
        
        partial void OnVolumeChanged();
        partial void OnVehicleNumberChanging(string value);
        
        partial void OnVehicleNumberChanged();
        partial void OnVatAmountChanging(decimal? value);
        
        partial void OnVatAmountChanged();
        partial void OnUnitPriceChanging(decimal value);
        
        partial void OnUnitPriceChanged();
        partial void OnTransactionDateChanging(System.DateTime value);
        
        partial void OnTransactionDateChanged();
        partial void OnTraderTinChanging(string value);
        
        partial void OnTraderTinChanged();
        partial void OnTraderNameChanging(string value);
        
        partial void OnTraderNameChanged();
        partial void OnTotalAmountChanging(decimal? value);
        
        partial void OnTotalAmountChanged();
        partial void OnTemperatureChanging(decimal value);
        
        partial void OnTemperatureChanged();
        partial void OnSeriesChanging(string value);
        
        partial void OnSeriesChanged();
        partial void OnNumberChanging(int value);
        
        partial void OnNumberChanged();
        partial void OnNettoAmountChanging(decimal? value);
        
        partial void OnNettoAmountChanged();
        partial void OnNameChanging(string value);
        
        partial void OnNameChanged();
        partial void OnInvoiceIdChanging(System.Guid value);
        
        partial void OnInvoiceIdChanged();
        partial void OnDescriptionChanging(string value);
        
        partial void OnDescriptionChanged();
        partial void OnCompanyTINChanging(string value);
        
        partial void OnCompanyTINChanged();
        partial void OnCompanyTaxOfficeChanging(string value);
        
        partial void OnCompanyTaxOfficeChanged();
        partial void OnCompanyPhoneChanging(string value);
        
        partial void OnCompanyPhoneChanged();
        partial void OnCompanyOccupationChanging(string value);
        
        partial void OnCompanyOccupationChanged();
        partial void OnCompanyNameChanging(string value);
        
        partial void OnCompanyNameChanged();
        partial void OnCompanyFaxChanging(string value);
        
        partial void OnCompanyFaxChanged();
        partial void OnCompanyCityChanging(string value);
        
        partial void OnCompanyCityChanged();
        partial void OnCompanyAddressChanging(string value);
        
        partial void OnCompanyAddressChanged();
        partial void OnCodeChanging(string value);
        
        partial void OnCodeChanged();
        partial void OnOfficialPumpNumberChanging(int value);
        
        partial void OnOfficialPumpNumberChanged();
        partial void OnOfficialNozzleNumberChanging(int value);
        
        partial void OnOfficialNozzleNumberChanged();
        partial void OnInvoiceSignatureChanging(string value);
        
        partial void OnInvoiceSignatureChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TankSaleView : EntityBase, INotifyPropertyChanged {

        private System.Guid _ViewId;

        private decimal _VolumeNormalized;

        private decimal _Volume;

        private decimal _UnitPrice;

        private System.DateTime _TransactionTimeStamp;

        private decimal _TotalPrice;

        private System.Guid _TankSaleId;

        private System.Guid _TankId;

        private decimal _StartVolumeNormalized;

        private decimal _StartVolume;

        private decimal? _StartTemperature;

        private decimal _StartLevel;

        private System.Guid _SalesTransactionId;

        private System.Guid _NozzleId;

        private decimal _FuelDensity;

        private decimal? _EndVolumeNormalized;

        private decimal? _EndVolume;

        private decimal _EndTemperature;

        private decimal? _EndLevel;

        private long _CRC;

        public TankSaleView()
        {
            OnCreated();
        }

        public virtual System.Guid ViewId
        {
            get
            {
                return this._ViewId;
            }
            set
            {
                if (this._ViewId != value)
                {
                    this.OnViewIdChanging(value);
                    this._ViewId = value;
                    this.SendPropertyChanged("ViewId");
                    this.OnViewIdChanged();
                }
            }
        }

        public virtual decimal VolumeNormalized
        {
            get
            {
                return this._VolumeNormalized;
            }
            set
            {
                if (this._VolumeNormalized != value)
                {
                    this.OnVolumeNormalizedChanging(value);
                    this._VolumeNormalized = value;
                    this.SendPropertyChanged("VolumeNormalized");
                    this.OnVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal Volume
        {
            get
            {
                return this._Volume;
            }
            set
            {
                if (this._Volume != value)
                {
                    this.OnVolumeChanging(value);
                    this._Volume = value;
                    this.SendPropertyChanged("Volume");
                    this.OnVolumeChanged();
                }
            }
        }

        public virtual decimal UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        public virtual System.DateTime TransactionTimeStamp
        {
            get
            {
                return this._TransactionTimeStamp;
            }
            set
            {
                if (this._TransactionTimeStamp != value)
                {
                    this.OnTransactionTimeStampChanging(value);
                    this._TransactionTimeStamp = value;
                    this.SendPropertyChanged("TransactionTimeStamp");
                    this.OnTransactionTimeStampChanged();
                }
            }
        }

        public virtual decimal TotalPrice
        {
            get
            {
                return this._TotalPrice;
            }
            set
            {
                if (this._TotalPrice != value)
                {
                    this.OnTotalPriceChanging(value);
                    this._TotalPrice = value;
                    this.SendPropertyChanged("TotalPrice");
                    this.OnTotalPriceChanged();
                }
            }
        }

        public virtual System.Guid TankSaleId
        {
            get
            {
                return this._TankSaleId;
            }
            set
            {
                if (this._TankSaleId != value)
                {
                    this.OnTankSaleIdChanging(value);
                    this._TankSaleId = value;
                    this.SendPropertyChanged("TankSaleId");
                    this.OnTankSaleIdChanged();
                }
            }
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual decimal StartVolumeNormalized
        {
            get
            {
                return this._StartVolumeNormalized;
            }
            set
            {
                if (this._StartVolumeNormalized != value)
                {
                    this.OnStartVolumeNormalizedChanging(value);
                    this._StartVolumeNormalized = value;
                    this.SendPropertyChanged("StartVolumeNormalized");
                    this.OnStartVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal StartVolume
        {
            get
            {
                return this._StartVolume;
            }
            set
            {
                if (this._StartVolume != value)
                {
                    this.OnStartVolumeChanging(value);
                    this._StartVolume = value;
                    this.SendPropertyChanged("StartVolume");
                    this.OnStartVolumeChanged();
                }
            }
        }

        public virtual decimal? StartTemperature
        {
            get
            {
                return this._StartTemperature;
            }
            set
            {
                if (this._StartTemperature != value)
                {
                    this.OnStartTemperatureChanging(value);
                    this._StartTemperature = value;
                    this.SendPropertyChanged("StartTemperature");
                    this.OnStartTemperatureChanged();
                }
            }
        }

        public virtual decimal StartLevel
        {
            get
            {
                return this._StartLevel;
            }
            set
            {
                if (this._StartLevel != value)
                {
                    this.OnStartLevelChanging(value);
                    this._StartLevel = value;
                    this.SendPropertyChanged("StartLevel");
                    this.OnStartLevelChanged();
                }
            }
        }

        public virtual System.Guid SalesTransactionId
        {
            get
            {
                return this._SalesTransactionId;
            }
            set
            {
                if (this._SalesTransactionId != value)
                {
                    this.OnSalesTransactionIdChanging(value);
                    this._SalesTransactionId = value;
                    this.SendPropertyChanged("SalesTransactionId");
                    this.OnSalesTransactionIdChanged();
                }
            }
        }

        public virtual System.Guid NozzleId
        {
            get
            {
                return this._NozzleId;
            }
            set
            {
                if (this._NozzleId != value)
                {
                    this.OnNozzleIdChanging(value);
                    this._NozzleId = value;
                    this.SendPropertyChanged("NozzleId");
                    this.OnNozzleIdChanged();
                }
            }
        }

        public virtual decimal FuelDensity
        {
            get
            {
                return this._FuelDensity;
            }
            set
            {
                if (this._FuelDensity != value)
                {
                    this.OnFuelDensityChanging(value);
                    this._FuelDensity = value;
                    this.SendPropertyChanged("FuelDensity");
                    this.OnFuelDensityChanged();
                }
            }
        }

        public virtual decimal? EndVolumeNormalized
        {
            get
            {
                return this._EndVolumeNormalized;
            }
            set
            {
                if (this._EndVolumeNormalized != value)
                {
                    this.OnEndVolumeNormalizedChanging(value);
                    this._EndVolumeNormalized = value;
                    this.SendPropertyChanged("EndVolumeNormalized");
                    this.OnEndVolumeNormalizedChanged();
                }
            }
        }

        public virtual decimal? EndVolume
        {
            get
            {
                return this._EndVolume;
            }
            set
            {
                if (this._EndVolume != value)
                {
                    this.OnEndVolumeChanging(value);
                    this._EndVolume = value;
                    this.SendPropertyChanged("EndVolume");
                    this.OnEndVolumeChanged();
                }
            }
        }

        public virtual decimal EndTemperature
        {
            get
            {
                return this._EndTemperature;
            }
            set
            {
                if (this._EndTemperature != value)
                {
                    this.OnEndTemperatureChanging(value);
                    this._EndTemperature = value;
                    this.SendPropertyChanged("EndTemperature");
                    this.OnEndTemperatureChanged();
                }
            }
        }

        public virtual decimal? EndLevel
        {
            get
            {
                return this._EndLevel;
            }
            set
            {
                if (this._EndLevel != value)
                {
                    this.OnEndLevelChanging(value);
                    this._EndLevel = value;
                    this.SendPropertyChanged("EndLevel");
                    this.OnEndLevelChanged();
                }
            }
        }

        public virtual long CRC
        {
            get
            {
                return this._CRC;
            }
            set
            {
                if (this._CRC != value)
                {
                    this.OnCRCChanging(value);
                    this._CRC = value;
                    this.SendPropertyChanged("CRC");
                    this.OnCRCChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnViewIdChanging(System.Guid value);
        
        partial void OnViewIdChanged();
        partial void OnVolumeNormalizedChanging(decimal value);
        
        partial void OnVolumeNormalizedChanged();
        partial void OnVolumeChanging(decimal value);
        
        partial void OnVolumeChanged();
        partial void OnUnitPriceChanging(decimal value);
        
        partial void OnUnitPriceChanged();
        partial void OnTransactionTimeStampChanging(System.DateTime value);
        
        partial void OnTransactionTimeStampChanged();
        partial void OnTotalPriceChanging(decimal value);
        
        partial void OnTotalPriceChanged();
        partial void OnTankSaleIdChanging(System.Guid value);
        
        partial void OnTankSaleIdChanged();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnStartVolumeNormalizedChanging(decimal value);
        
        partial void OnStartVolumeNormalizedChanged();
        partial void OnStartVolumeChanging(decimal value);
        
        partial void OnStartVolumeChanged();
        partial void OnStartTemperatureChanging(decimal? value);
        
        partial void OnStartTemperatureChanged();
        partial void OnStartLevelChanging(decimal value);
        
        partial void OnStartLevelChanged();
        partial void OnSalesTransactionIdChanging(System.Guid value);
        
        partial void OnSalesTransactionIdChanged();
        partial void OnNozzleIdChanging(System.Guid value);
        
        partial void OnNozzleIdChanged();
        partial void OnFuelDensityChanging(decimal value);
        
        partial void OnFuelDensityChanged();
        partial void OnEndVolumeNormalizedChanging(decimal? value);
        
        partial void OnEndVolumeNormalizedChanged();
        partial void OnEndVolumeChanging(decimal? value);
        
        partial void OnEndVolumeChanged();
        partial void OnEndTemperatureChanging(decimal value);
        
        partial void OnEndTemperatureChanged();
        partial void OnEndLevelChanging(decimal? value);
        
        partial void OnEndLevelChanged();
        partial void OnCRCChanging(long value);
        
        partial void OnCRCChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class OutdoorPaymentTerminalTimeSchedule : EntityBase, INotifyPropertyChanged {

        private System.Guid _OutdoorPaymentTerminalTimeScheduleId;

        private System.Guid _OutdoorPaymentTerminalScheduleId;

        private System.DateTime _TimeFrom;

        private int _Duration;

        private OutdoorPaymentTerminalSchedule _OutdoorPaymentTerminalSchedule;

        public OutdoorPaymentTerminalTimeSchedule()
        {
            OnCreated();
        }

        public virtual System.Guid OutdoorPaymentTerminalTimeScheduleId
        {
            get
            {
                return this._OutdoorPaymentTerminalTimeScheduleId;
            }
            set
            {
                if (this._OutdoorPaymentTerminalTimeScheduleId != value)
                {
                    this.OnOutdoorPaymentTerminalTimeScheduleIdChanging(value);
                    this._OutdoorPaymentTerminalTimeScheduleId = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalTimeScheduleId");
                    this.OnOutdoorPaymentTerminalTimeScheduleIdChanged();
                }
            }
        }

        public virtual System.Guid OutdoorPaymentTerminalScheduleId
        {
            get
            {
                return this._OutdoorPaymentTerminalScheduleId;
            }
            set
            {
                if (this._OutdoorPaymentTerminalScheduleId != value)
                {
                    this.OnOutdoorPaymentTerminalScheduleIdChanging(value);
                    this._OutdoorPaymentTerminalScheduleId = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalScheduleId");
                    this.OnOutdoorPaymentTerminalScheduleIdChanged();
                }
            }
        }

        public virtual System.DateTime TimeFrom
        {
            get
            {
                return this._TimeFrom;
            }
            set
            {
                if (this._TimeFrom != value)
                {
                    this.OnTimeFromChanging(value);
                    this._TimeFrom = value;
                    this.SendPropertyChanged("TimeFrom");
                    this.OnTimeFromChanged();
                }
            }
        }

        public virtual int Duration
        {
            get
            {
                return this._Duration;
            }
            set
            {
                if (this._Duration != value)
                {
                    this.OnDurationChanging(value);
                    this._Duration = value;
                    this.SendPropertyChanged("Duration");
                    this.OnDurationChanged();
                }
            }
        }

        public virtual OutdoorPaymentTerminalSchedule OutdoorPaymentTerminalSchedule
        {
            get
            {
                return this._OutdoorPaymentTerminalSchedule;
            }
            set
            {
                if (this._OutdoorPaymentTerminalSchedule != value)
                {
                    this.OnOutdoorPaymentTerminalScheduleChanging(value);
                    this._OutdoorPaymentTerminalSchedule = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalSchedule");
                    this.OnOutdoorPaymentTerminalScheduleChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnOutdoorPaymentTerminalTimeScheduleIdChanging(System.Guid value);
        
        partial void OnOutdoorPaymentTerminalTimeScheduleIdChanged();
        partial void OnOutdoorPaymentTerminalScheduleIdChanging(System.Guid value);
        
        partial void OnOutdoorPaymentTerminalScheduleIdChanged();
        partial void OnTimeFromChanging(System.DateTime value);
        
        partial void OnTimeFromChanged();
        partial void OnDurationChanging(int value);
        
        partial void OnDurationChanged();
        partial void OnOutdoorPaymentTerminalScheduleChanging(OutdoorPaymentTerminalSchedule value);

        partial void OnOutdoorPaymentTerminalScheduleChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class OutdoorPaymentTerminalSchedule : EntityBase, INotifyPropertyChanged {

        private System.Guid _OutdoorPaymentTerminalScheduleId;

        private System.Guid _OutdoorPaymentTerminalId;

        private int? _DayOfWeek;

        private bool? _IsDayOff;

        private System.DateTime? _ScheduleDate;

        private int _ScheduleType;

        private System.Guid? _OutdoorPaymentTerminalNozzleId;

        private IList<OutdoorPaymentTerminalTimeSchedule> _OutdoorPaymentTerminalTimeSchedules;

        private OutdoorPaymentTerminalNozzle _OutdoorPaymentTerminalNozzle;

        private OutdoorPaymentTerminal _OutdoorPaymentTerminal;

        public OutdoorPaymentTerminalSchedule()
        {
            this._OutdoorPaymentTerminalTimeSchedules = new List<OutdoorPaymentTerminalTimeSchedule>();
            OnCreated();
        }

        public virtual System.Guid OutdoorPaymentTerminalScheduleId
        {
            get
            {
                return this._OutdoorPaymentTerminalScheduleId;
            }
            set
            {
                if (this._OutdoorPaymentTerminalScheduleId != value)
                {
                    this.OnOutdoorPaymentTerminalScheduleIdChanging(value);
                    this._OutdoorPaymentTerminalScheduleId = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalScheduleId");
                    this.OnOutdoorPaymentTerminalScheduleIdChanged();
                }
            }
        }

        public virtual System.Guid OutdoorPaymentTerminalId
        {
            get
            {
                return this._OutdoorPaymentTerminalId;
            }
            set
            {
                if (this._OutdoorPaymentTerminalId != value)
                {
                    this.OnOutdoorPaymentTerminalIdChanging(value);
                    this._OutdoorPaymentTerminalId = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalId");
                    this.OnOutdoorPaymentTerminalIdChanged();
                }
            }
        }

        public virtual int? DayOfWeek
        {
            get
            {
                return this._DayOfWeek;
            }
            set
            {
                if (this._DayOfWeek != value)
                {
                    this.OnDayOfWeekChanging(value);
                    this._DayOfWeek = value;
                    this.SendPropertyChanged("DayOfWeek");
                    this.OnDayOfWeekChanged();
                }
            }
        }

        public virtual bool? IsDayOff
        {
            get
            {
                return this._IsDayOff;
            }
            set
            {
                if (this._IsDayOff != value)
                {
                    this.OnIsDayOffChanging(value);
                    this._IsDayOff = value;
                    this.SendPropertyChanged("IsDayOff");
                    this.OnIsDayOffChanged();
                }
            }
        }

        public virtual System.DateTime? ScheduleDate
        {
            get
            {
                return this._ScheduleDate;
            }
            set
            {
                if (this._ScheduleDate != value)
                {
                    this.OnScheduleDateChanging(value);
                    this._ScheduleDate = value;
                    this.SendPropertyChanged("ScheduleDate");
                    this.OnScheduleDateChanged();
                }
            }
        }

        public virtual int ScheduleType
        {
            get
            {
                return this._ScheduleType;
            }
            set
            {
                if (this._ScheduleType != value)
                {
                    this.OnScheduleTypeChanging(value);
                    this._ScheduleType = value;
                    this.SendPropertyChanged("ScheduleType");
                    this.OnScheduleTypeChanged();
                }
            }
        }

        public virtual System.Guid? OutdoorPaymentTerminalNozzleId
        {
            get
            {
                return this._OutdoorPaymentTerminalNozzleId;
            }
            set
            {
                if (this._OutdoorPaymentTerminalNozzleId != value)
                {
                    this.OnOutdoorPaymentTerminalNozzleIdChanging(value);
                    this._OutdoorPaymentTerminalNozzleId = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalNozzleId");
                    this.OnOutdoorPaymentTerminalNozzleIdChanged();
                }
            }
        }

        public virtual IList<OutdoorPaymentTerminalTimeSchedule> OutdoorPaymentTerminalTimeSchedules
        {
            get
            {
                return this._OutdoorPaymentTerminalTimeSchedules;
            }
            set
            {
                if (this._OutdoorPaymentTerminalTimeSchedules != value)
                {
                    this._OutdoorPaymentTerminalTimeSchedules = value;
                }
            }
        }

        public virtual OutdoorPaymentTerminalNozzle OutdoorPaymentTerminalNozzle
        {
            get
            {
                return this._OutdoorPaymentTerminalNozzle;
            }
            set
            {
                if (this._OutdoorPaymentTerminalNozzle != value)
                {
                    this.OnOutdoorPaymentTerminalNozzleChanging(value);
                    this._OutdoorPaymentTerminalNozzle = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalNozzle");
                    this.OnOutdoorPaymentTerminalNozzleChanged();
                }
            }
        }

        public virtual OutdoorPaymentTerminal OutdoorPaymentTerminal
        {
            get
            {
                return this._OutdoorPaymentTerminal;
            }
            set
            {
                if (this._OutdoorPaymentTerminal != value)
                {
                    this.OnOutdoorPaymentTerminalChanging(value);
                    this._OutdoorPaymentTerminal = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminal");
                    this.OnOutdoorPaymentTerminalChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnOutdoorPaymentTerminalScheduleIdChanging(System.Guid value);
        
        partial void OnOutdoorPaymentTerminalScheduleIdChanged();
        partial void OnOutdoorPaymentTerminalIdChanging(System.Guid value);
        
        partial void OnOutdoorPaymentTerminalIdChanged();
        partial void OnDayOfWeekChanging(int? value);
        
        partial void OnDayOfWeekChanged();
        partial void OnIsDayOffChanging(bool? value);
        
        partial void OnIsDayOffChanged();
        partial void OnScheduleDateChanging(System.DateTime? value);
        
        partial void OnScheduleDateChanged();
        partial void OnScheduleTypeChanging(int value);
        
        partial void OnScheduleTypeChanged();
        partial void OnOutdoorPaymentTerminalNozzleIdChanging(System.Guid? value);
        
        partial void OnOutdoorPaymentTerminalNozzleIdChanged();
        partial void OnOutdoorPaymentTerminalNozzleChanging(OutdoorPaymentTerminalNozzle value);

        partial void OnOutdoorPaymentTerminalNozzleChanged();
        partial void OnOutdoorPaymentTerminalChanging(OutdoorPaymentTerminal value);

        partial void OnOutdoorPaymentTerminalChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class OutdoorPaymentTerminalNozzle : EntityBase, INotifyPropertyChanged {

        private System.Guid _OutdoorPaymentTerminalNozzleId;

        private System.Guid? _OutdoorPaymentTerminalId;

        private System.Guid? _NozzleId;

        private bool _IsDisabled;

        private Nozzle _Nozzle;

        private IList<OutdoorPaymentTerminalSchedule> _OutdoorPaymentTerminalSchedules;

        private OutdoorPaymentTerminal _OutdoorPaymentTerminal;

        public OutdoorPaymentTerminalNozzle()
        {
            this._OutdoorPaymentTerminalSchedules = new List<OutdoorPaymentTerminalSchedule>();
            OnCreated();
        }

        public virtual System.Guid OutdoorPaymentTerminalNozzleId
        {
            get
            {
                return this._OutdoorPaymentTerminalNozzleId;
            }
            set
            {
                if (this._OutdoorPaymentTerminalNozzleId != value)
                {
                    this.OnOutdoorPaymentTerminalNozzleIdChanging(value);
                    this._OutdoorPaymentTerminalNozzleId = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalNozzleId");
                    this.OnOutdoorPaymentTerminalNozzleIdChanged();
                }
            }
        }

        public virtual System.Guid? OutdoorPaymentTerminalId
        {
            get
            {
                return this._OutdoorPaymentTerminalId;
            }
            set
            {
                if (this._OutdoorPaymentTerminalId != value)
                {
                    this.OnOutdoorPaymentTerminalIdChanging(value);
                    this._OutdoorPaymentTerminalId = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalId");
                    this.OnOutdoorPaymentTerminalIdChanged();
                }
            }
        }

        public virtual System.Guid? NozzleId
        {
            get
            {
                return this._NozzleId;
            }
            set
            {
                if (this._NozzleId != value)
                {
                    this.OnNozzleIdChanging(value);
                    this._NozzleId = value;
                    this.SendPropertyChanged("NozzleId");
                    this.OnNozzleIdChanged();
                }
            }
        }

        public virtual bool IsDisabled
        {
            get
            {
                return this._IsDisabled;
            }
            set
            {
                if (this._IsDisabled != value)
                {
                    this.OnIsDisabledChanging(value);
                    this._IsDisabled = value;
                    this.SendPropertyChanged("IsDisabled");
                    this.OnIsDisabledChanged();
                }
            }
        }

        public virtual Nozzle Nozzle
        {
            get
            {
                return this._Nozzle;
            }
            set
            {
                if (this._Nozzle != value)
                {
                    this.OnNozzleChanging(value);
                    this._Nozzle = value;
                    this.SendPropertyChanged("Nozzle");
                    this.OnNozzleChanged();
                }
            }
        }

        public virtual IList<OutdoorPaymentTerminalSchedule> OutdoorPaymentTerminalSchedules
        {
            get
            {
                return this._OutdoorPaymentTerminalSchedules;
            }
            set
            {
                if (this._OutdoorPaymentTerminalSchedules != value)
                {
                    this._OutdoorPaymentTerminalSchedules = value;
                }
            }
        }

        public virtual OutdoorPaymentTerminal OutdoorPaymentTerminal
        {
            get
            {
                return this._OutdoorPaymentTerminal;
            }
            set
            {
                if (this._OutdoorPaymentTerminal != value)
                {
                    this.OnOutdoorPaymentTerminalChanging(value);
                    this._OutdoorPaymentTerminal = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminal");
                    this.OnOutdoorPaymentTerminalChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnOutdoorPaymentTerminalNozzleIdChanging(System.Guid value);
        
        partial void OnOutdoorPaymentTerminalNozzleIdChanged();
        partial void OnOutdoorPaymentTerminalIdChanging(System.Guid? value);
        
        partial void OnOutdoorPaymentTerminalIdChanged();
        partial void OnNozzleIdChanging(System.Guid? value);
        
        partial void OnNozzleIdChanged();
        partial void OnIsDisabledChanging(bool value);
        
        partial void OnIsDisabledChanged();
        partial void OnNozzleChanging(Nozzle value);

        partial void OnNozzleChanged();
        partial void OnOutdoorPaymentTerminalChanging(OutdoorPaymentTerminal value);

        partial void OnOutdoorPaymentTerminalChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class OutdoorPaymentTerminal : EntityBase, INotifyPropertyChanged {

        private System.Guid _OutdoorPaymentTerminalId;

        private string _ServerIp;

        private int _ServerPort;

        private string _ClientIp;

        private int _ClientPort;

        private string _Name;

        private int _TerminalId;

        private string _TerminalAssembly;

        private bool _IsDisabled;

        private int _TerminalType;

        private int _ConnectionType;

        private IList<OutdoorPaymentTerminalSchedule> _OutdoorPaymentTerminalSchedules;

        private IList<OutdoorPaymentTerminalNozzle> _OutdoorPaymentTerminalNozzles;

        private IList<OutdoorPaymentTerminalController> _OutdoorPaymentTerminalControllers;

        public OutdoorPaymentTerminal()
        {
            this._OutdoorPaymentTerminalSchedules = new List<OutdoorPaymentTerminalSchedule>();
            this._OutdoorPaymentTerminalNozzles = new List<OutdoorPaymentTerminalNozzle>();
            this._OutdoorPaymentTerminalControllers = new List<OutdoorPaymentTerminalController>();
            OnCreated();
        }

        public virtual System.Guid OutdoorPaymentTerminalId
        {
            get
            {
                return this._OutdoorPaymentTerminalId;
            }
            set
            {
                if (this._OutdoorPaymentTerminalId != value)
                {
                    this.OnOutdoorPaymentTerminalIdChanging(value);
                    this._OutdoorPaymentTerminalId = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalId");
                    this.OnOutdoorPaymentTerminalIdChanged();
                }
            }
        }

        public virtual string ServerIp
        {
            get
            {
                return this._ServerIp;
            }
            set
            {
                if (this._ServerIp != value)
                {
                    this.OnServerIpChanging(value);
                    this._ServerIp = value;
                    this.SendPropertyChanged("ServerIp");
                    this.OnServerIpChanged();
                }
            }
        }

        public virtual int ServerPort
        {
            get
            {
                return this._ServerPort;
            }
            set
            {
                if (this._ServerPort != value)
                {
                    this.OnServerPortChanging(value);
                    this._ServerPort = value;
                    this.SendPropertyChanged("ServerPort");
                    this.OnServerPortChanged();
                }
            }
        }

        public virtual string ClientIp
        {
            get
            {
                return this._ClientIp;
            }
            set
            {
                if (this._ClientIp != value)
                {
                    this.OnClientIpChanging(value);
                    this._ClientIp = value;
                    this.SendPropertyChanged("ClientIp");
                    this.OnClientIpChanged();
                }
            }
        }

        public virtual int ClientPort
        {
            get
            {
                return this._ClientPort;
            }
            set
            {
                if (this._ClientPort != value)
                {
                    this.OnClientPortChanging(value);
                    this._ClientPort = value;
                    this.SendPropertyChanged("ClientPort");
                    this.OnClientPortChanged();
                }
            }
        }

        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        public virtual int TerminalId
        {
            get
            {
                return this._TerminalId;
            }
            set
            {
                if (this._TerminalId != value)
                {
                    this.OnTerminalIdChanging(value);
                    this._TerminalId = value;
                    this.SendPropertyChanged("TerminalId");
                    this.OnTerminalIdChanged();
                }
            }
        }

        public virtual string TerminalAssembly
        {
            get
            {
                return this._TerminalAssembly;
            }
            set
            {
                if (this._TerminalAssembly != value)
                {
                    this.OnTerminalAssemblyChanging(value);
                    this._TerminalAssembly = value;
                    this.SendPropertyChanged("TerminalAssembly");
                    this.OnTerminalAssemblyChanged();
                }
            }
        }

        public virtual bool IsDisabled
        {
            get
            {
                return this._IsDisabled;
            }
            set
            {
                if (this._IsDisabled != value)
                {
                    this.OnIsDisabledChanging(value);
                    this._IsDisabled = value;
                    this.SendPropertyChanged("IsDisabled");
                    this.OnIsDisabledChanged();
                }
            }
        }

        public virtual int TerminalType
        {
            get
            {
                return this._TerminalType;
            }
            set
            {
                if (this._TerminalType != value)
                {
                    this.OnTerminalTypeChanging(value);
                    this._TerminalType = value;
                    this.SendPropertyChanged("TerminalType");
                    this.OnTerminalTypeChanged();
                }
            }
        }

        public virtual int ConnectionType
        {
            get
            {
                return this._ConnectionType;
            }
            set
            {
                if (this._ConnectionType != value)
                {
                    this.OnConnectionTypeChanging(value);
                    this._ConnectionType = value;
                    this.SendPropertyChanged("ConnectionType");
                    this.OnConnectionTypeChanged();
                }
            }
        }

        public virtual IList<OutdoorPaymentTerminalSchedule> OutdoorPaymentTerminalSchedules
        {
            get
            {
                return this._OutdoorPaymentTerminalSchedules;
            }
            set
            {
                if (this._OutdoorPaymentTerminalSchedules != value)
                {
                    this._OutdoorPaymentTerminalSchedules = value;
                }
            }
        }

        public virtual IList<OutdoorPaymentTerminalNozzle> OutdoorPaymentTerminalNozzles
        {
            get
            {
                return this._OutdoorPaymentTerminalNozzles;
            }
            set
            {
                if (this._OutdoorPaymentTerminalNozzles != value)
                {
                    this._OutdoorPaymentTerminalNozzles = value;
                }
            }
        }

        public virtual IList<OutdoorPaymentTerminalController> OutdoorPaymentTerminalControllers
        {
            get
            {
                return this._OutdoorPaymentTerminalControllers;
            }
            set
            {
                if (this._OutdoorPaymentTerminalControllers != value)
                {
                    this._OutdoorPaymentTerminalControllers = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnOutdoorPaymentTerminalIdChanging(System.Guid value);
        
        partial void OnOutdoorPaymentTerminalIdChanged();
        partial void OnServerIpChanging(string value);
        
        partial void OnServerIpChanged();
        partial void OnServerPortChanging(int value);
        
        partial void OnServerPortChanged();
        partial void OnClientIpChanging(string value);
        
        partial void OnClientIpChanged();
        partial void OnClientPortChanging(int value);
        
        partial void OnClientPortChanged();
        partial void OnNameChanging(string value);
        
        partial void OnNameChanged();
        partial void OnTerminalIdChanging(int value);
        
        partial void OnTerminalIdChanged();
        partial void OnTerminalAssemblyChanging(string value);
        
        partial void OnTerminalAssemblyChanged();
        partial void OnIsDisabledChanging(bool value);
        
        partial void OnIsDisabledChanged();
        partial void OnTerminalTypeChanging(int value);
        
        partial void OnTerminalTypeChanged();
        partial void OnConnectionTypeChanging(int value);
        
        partial void OnConnectionTypeChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class OutdoorPaymentTerminalController : EntityBase, INotifyPropertyChanged {

        private System.Guid _OutdoorPaymentTerminalControllerId;

        private System.Guid _OutdoorPaymentTerminalId;

        private System.Guid _CommunicationControllerId;

        private CommunicationController _CommunicationController;

        private OutdoorPaymentTerminal _OutdoorPaymentTerminal;

        public OutdoorPaymentTerminalController()
        {
            OnCreated();
        }

        public virtual System.Guid OutdoorPaymentTerminalControllerId
        {
            get
            {
                return this._OutdoorPaymentTerminalControllerId;
            }
            set
            {
                if (this._OutdoorPaymentTerminalControllerId != value)
                {
                    this.OnOutdoorPaymentTerminalControllerIdChanging(value);
                    this._OutdoorPaymentTerminalControllerId = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalControllerId");
                    this.OnOutdoorPaymentTerminalControllerIdChanged();
                }
            }
        }

        public virtual System.Guid OutdoorPaymentTerminalId
        {
            get
            {
                return this._OutdoorPaymentTerminalId;
            }
            set
            {
                if (this._OutdoorPaymentTerminalId != value)
                {
                    this.OnOutdoorPaymentTerminalIdChanging(value);
                    this._OutdoorPaymentTerminalId = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminalId");
                    this.OnOutdoorPaymentTerminalIdChanged();
                }
            }
        }

        public virtual System.Guid CommunicationControllerId
        {
            get
            {
                return this._CommunicationControllerId;
            }
            set
            {
                if (this._CommunicationControllerId != value)
                {
                    this.OnCommunicationControllerIdChanging(value);
                    this._CommunicationControllerId = value;
                    this.SendPropertyChanged("CommunicationControllerId");
                    this.OnCommunicationControllerIdChanged();
                }
            }
        }

        public virtual CommunicationController CommunicationController
        {
            get
            {
                return this._CommunicationController;
            }
            set
            {
                if (this._CommunicationController != value)
                {
                    this.OnCommunicationControllerChanging(value);
                    this._CommunicationController = value;
                    this.SendPropertyChanged("CommunicationController");
                    this.OnCommunicationControllerChanged();
                }
            }
        }

        public virtual OutdoorPaymentTerminal OutdoorPaymentTerminal
        {
            get
            {
                return this._OutdoorPaymentTerminal;
            }
            set
            {
                if (this._OutdoorPaymentTerminal != value)
                {
                    this.OnOutdoorPaymentTerminalChanging(value);
                    this._OutdoorPaymentTerminal = value;
                    this.SendPropertyChanged("OutdoorPaymentTerminal");
                    this.OnOutdoorPaymentTerminalChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnOutdoorPaymentTerminalControllerIdChanging(System.Guid value);
        
        partial void OnOutdoorPaymentTerminalControllerIdChanged();
        partial void OnOutdoorPaymentTerminalIdChanging(System.Guid value);
        
        partial void OnOutdoorPaymentTerminalIdChanged();
        partial void OnCommunicationControllerIdChanging(System.Guid value);
        
        partial void OnCommunicationControllerIdChanged();
        partial void OnCommunicationControllerChanging(CommunicationController value);

        partial void OnCommunicationControllerChanged();
        partial void OnOutdoorPaymentTerminalChanging(OutdoorPaymentTerminal value);

        partial void OnOutdoorPaymentTerminalChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class TankCheck : EntityBase, INotifyPropertyChanged {

        private System.Guid _TankCheckId;

        private System.Guid _TankId;

        private decimal _TankLevel;

        private System.DateTime _CheckDate;

        private decimal? _Temperature;

        private System.DateTime? _SentDatetime;

        private Tank _Tank;

        public TankCheck()
        {
            OnCreated();
        }

        public virtual System.Guid TankCheckId
        {
            get
            {
                return this._TankCheckId;
            }
            set
            {
                if (this._TankCheckId != value)
                {
                    this.OnTankCheckIdChanging(value);
                    this._TankCheckId = value;
                    this.SendPropertyChanged("TankCheckId");
                    this.OnTankCheckIdChanged();
                }
            }
        }

        public virtual System.Guid TankId
        {
            get
            {
                return this._TankId;
            }
            set
            {
                if (this._TankId != value)
                {
                    this.OnTankIdChanging(value);
                    this._TankId = value;
                    this.SendPropertyChanged("TankId");
                    this.OnTankIdChanged();
                }
            }
        }

        public virtual decimal TankLevel
        {
            get
            {
                return this._TankLevel;
            }
            set
            {
                if (this._TankLevel != value)
                {
                    this.OnTankLevelChanging(value);
                    this._TankLevel = value;
                    this.SendPropertyChanged("TankLevel");
                    this.OnTankLevelChanged();
                }
            }
        }

        public virtual System.DateTime CheckDate
        {
            get
            {
                return this._CheckDate;
            }
            set
            {
                if (this._CheckDate != value)
                {
                    this.OnCheckDateChanging(value);
                    this._CheckDate = value;
                    this.SendPropertyChanged("CheckDate");
                    this.OnCheckDateChanged();
                }
            }
        }

        public virtual decimal? Temperature
        {
            get
            {
                return this._Temperature;
            }
            set
            {
                if (this._Temperature != value)
                {
                    this.OnTemperatureChanging(value);
                    this._Temperature = value;
                    this.SendPropertyChanged("Temperature");
                    this.OnTemperatureChanged();
                }
            }
        }

        public virtual System.DateTime? SentDatetime
        {
            get
            {
                return this._SentDatetime;
            }
            set
            {
                if (this._SentDatetime != value)
                {
                    this.OnSentDatetimeChanging(value);
                    this._SentDatetime = value;
                    this.SendPropertyChanged("SentDatetime");
                    this.OnSentDatetimeChanged();
                }
            }
        }

        public virtual Tank Tank
        {
            get
            {
                return this._Tank;
            }
            set
            {
                if (this._Tank != value)
                {
                    this.OnTankChanging(value);
                    this._Tank = value;
                    this.SendPropertyChanged("Tank");
                    this.OnTankChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnTankCheckIdChanging(System.Guid value);
        
        partial void OnTankCheckIdChanged();
        partial void OnTankIdChanging(System.Guid value);
        
        partial void OnTankIdChanged();
        partial void OnTankLevelChanging(decimal value);
        
        partial void OnTankLevelChanged();
        partial void OnCheckDateChanging(System.DateTime value);
        
        partial void OnCheckDateChanged();
        partial void OnTemperatureChanging(decimal? value);
        
        partial void OnTemperatureChanged();
        partial void OnSentDatetimeChanging(System.DateTime? value);
        
        partial void OnSentDatetimeChanged();
        partial void OnTankChanging(Tank value);

        partial void OnTankChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class ChangeLog : EntityBase, INotifyPropertyChanged {

        private System.Guid _ChangeLogId;

        private System.DateTime _DateTimeStamp;

        private string _TableName;

        private string _ColumnName;

        private string _AdditionalDescription;

        private string _OldValue;

        private string _NewValue;

        private string _ApplicationUserName;

        private string _PrimaryKey;

        public ChangeLog()
        {
            OnCreated();
        }

        public virtual System.Guid ChangeLogId
        {
            get
            {
                return this._ChangeLogId;
            }
            set
            {
                if (this._ChangeLogId != value)
                {
                    this.OnChangeLogIdChanging(value);
                    this._ChangeLogId = value;
                    this.SendPropertyChanged("ChangeLogId");
                    this.OnChangeLogIdChanged();
                }
            }
        }

        public virtual System.DateTime DateTimeStamp
        {
            get
            {
                return this._DateTimeStamp;
            }
            set
            {
                if (this._DateTimeStamp != value)
                {
                    this.OnDateTimeStampChanging(value);
                    this._DateTimeStamp = value;
                    this.SendPropertyChanged("DateTimeStamp");
                    this.OnDateTimeStampChanged();
                }
            }
        }

        public virtual string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if (this._TableName != value)
                {
                    this.OnTableNameChanging(value);
                    this._TableName = value;
                    this.SendPropertyChanged("TableName");
                    this.OnTableNameChanged();
                }
            }
        }

        public virtual string ColumnName
        {
            get
            {
                return this._ColumnName;
            }
            set
            {
                if (this._ColumnName != value)
                {
                    this.OnColumnNameChanging(value);
                    this._ColumnName = value;
                    this.SendPropertyChanged("ColumnName");
                    this.OnColumnNameChanged();
                }
            }
        }

        public virtual string AdditionalDescription
        {
            get
            {
                return this._AdditionalDescription;
            }
            set
            {
                if (this._AdditionalDescription != value)
                {
                    this.OnAdditionalDescriptionChanging(value);
                    this._AdditionalDescription = value;
                    this.SendPropertyChanged("AdditionalDescription");
                    this.OnAdditionalDescriptionChanged();
                }
            }
        }

        public virtual string OldValue
        {
            get
            {
                return this._OldValue;
            }
            set
            {
                if (this._OldValue != value)
                {
                    this.OnOldValueChanging(value);
                    this._OldValue = value;
                    this.SendPropertyChanged("OldValue");
                    this.OnOldValueChanged();
                }
            }
        }

        public virtual string NewValue
        {
            get
            {
                return this._NewValue;
            }
            set
            {
                if (this._NewValue != value)
                {
                    this.OnNewValueChanging(value);
                    this._NewValue = value;
                    this.SendPropertyChanged("NewValue");
                    this.OnNewValueChanged();
                }
            }
        }

        public virtual string ApplicationUserName
        {
            get
            {
                return this._ApplicationUserName;
            }
            set
            {
                if (this._ApplicationUserName != value)
                {
                    this.OnApplicationUserNameChanging(value);
                    this._ApplicationUserName = value;
                    this.SendPropertyChanged("ApplicationUserName");
                    this.OnApplicationUserNameChanged();
                }
            }
        }

        public virtual string PrimaryKey
        {
            get
            {
                return this._PrimaryKey;
            }
            set
            {
                if (this._PrimaryKey != value)
                {
                    this.OnPrimaryKeyChanging(value);
                    this._PrimaryKey = value;
                    this.SendPropertyChanged("PrimaryKey");
                    this.OnPrimaryKeyChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnChangeLogIdChanging(System.Guid value);
        
        partial void OnChangeLogIdChanged();
        partial void OnDateTimeStampChanging(System.DateTime value);
        
        partial void OnDateTimeStampChanged();
        partial void OnTableNameChanging(string value);
        
        partial void OnTableNameChanged();
        partial void OnColumnNameChanging(string value);
        
        partial void OnColumnNameChanged();
        partial void OnAdditionalDescriptionChanging(string value);
        
        partial void OnAdditionalDescriptionChanged();
        partial void OnOldValueChanging(string value);
        
        partial void OnOldValueChanged();
        partial void OnNewValueChanging(string value);
        
        partial void OnNewValueChanged();
        partial void OnApplicationUserNameChanging(string value);
        
        partial void OnApplicationUserNameChanged();
        partial void OnPrimaryKeyChanging(string value);
        
        partial void OnPrimaryKeyChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class SaleDataView : EntityBase, INotifyPropertyChanged {

        private System.Guid _ViewId;

        private decimal _Volume;

        private decimal? _VatAmount;

        private decimal _UnitPrice;

        private System.DateTime _TransactionTimeStamp;

        private decimal _TotalPrice;

        private decimal _TotalizerStart;

        private decimal _TotalizerEnd;

        private decimal? _TotalAmount;

        private decimal _StartVolume;

        private decimal _StartLevel;

        private int _Number;

        private decimal? _NettoAmount;

        private decimal _InvoiceLineVolume;

        private System.Guid _InvoiceLineId;

        private decimal? _EndVolume;

        private decimal? _EndLevel;

        public SaleDataView()
        {
            OnCreated();
        }

        public virtual System.Guid ViewId
        {
            get
            {
                return this._ViewId;
            }
            set
            {
                if (this._ViewId != value)
                {
                    this.OnViewIdChanging(value);
                    this._ViewId = value;
                    this.SendPropertyChanged("ViewId");
                    this.OnViewIdChanged();
                }
            }
        }

        public virtual decimal Volume
        {
            get
            {
                return this._Volume;
            }
            set
            {
                if (this._Volume != value)
                {
                    this.OnVolumeChanging(value);
                    this._Volume = value;
                    this.SendPropertyChanged("Volume");
                    this.OnVolumeChanged();
                }
            }
        }

        public virtual decimal? VatAmount
        {
            get
            {
                return this._VatAmount;
            }
            set
            {
                if (this._VatAmount != value)
                {
                    this.OnVatAmountChanging(value);
                    this._VatAmount = value;
                    this.SendPropertyChanged("VatAmount");
                    this.OnVatAmountChanged();
                }
            }
        }

        public virtual decimal UnitPrice
        {
            get
            {
                return this._UnitPrice;
            }
            set
            {
                if (this._UnitPrice != value)
                {
                    this.OnUnitPriceChanging(value);
                    this._UnitPrice = value;
                    this.SendPropertyChanged("UnitPrice");
                    this.OnUnitPriceChanged();
                }
            }
        }

        public virtual System.DateTime TransactionTimeStamp
        {
            get
            {
                return this._TransactionTimeStamp;
            }
            set
            {
                if (this._TransactionTimeStamp != value)
                {
                    this.OnTransactionTimeStampChanging(value);
                    this._TransactionTimeStamp = value;
                    this.SendPropertyChanged("TransactionTimeStamp");
                    this.OnTransactionTimeStampChanged();
                }
            }
        }

        public virtual decimal TotalPrice
        {
            get
            {
                return this._TotalPrice;
            }
            set
            {
                if (this._TotalPrice != value)
                {
                    this.OnTotalPriceChanging(value);
                    this._TotalPrice = value;
                    this.SendPropertyChanged("TotalPrice");
                    this.OnTotalPriceChanged();
                }
            }
        }

        public virtual decimal TotalizerStart
        {
            get
            {
                return this._TotalizerStart;
            }
            set
            {
                if (this._TotalizerStart != value)
                {
                    this.OnTotalizerStartChanging(value);
                    this._TotalizerStart = value;
                    this.SendPropertyChanged("TotalizerStart");
                    this.OnTotalizerStartChanged();
                }
            }
        }

        public virtual decimal TotalizerEnd
        {
            get
            {
                return this._TotalizerEnd;
            }
            set
            {
                if (this._TotalizerEnd != value)
                {
                    this.OnTotalizerEndChanging(value);
                    this._TotalizerEnd = value;
                    this.SendPropertyChanged("TotalizerEnd");
                    this.OnTotalizerEndChanged();
                }
            }
        }

        public virtual decimal? TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        public virtual decimal StartVolume
        {
            get
            {
                return this._StartVolume;
            }
            set
            {
                if (this._StartVolume != value)
                {
                    this.OnStartVolumeChanging(value);
                    this._StartVolume = value;
                    this.SendPropertyChanged("StartVolume");
                    this.OnStartVolumeChanged();
                }
            }
        }

        public virtual decimal StartLevel
        {
            get
            {
                return this._StartLevel;
            }
            set
            {
                if (this._StartLevel != value)
                {
                    this.OnStartLevelChanging(value);
                    this._StartLevel = value;
                    this.SendPropertyChanged("StartLevel");
                    this.OnStartLevelChanged();
                }
            }
        }

        public virtual int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if (this._Number != value)
                {
                    this.OnNumberChanging(value);
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        public virtual decimal? NettoAmount
        {
            get
            {
                return this._NettoAmount;
            }
            set
            {
                if (this._NettoAmount != value)
                {
                    this.OnNettoAmountChanging(value);
                    this._NettoAmount = value;
                    this.SendPropertyChanged("NettoAmount");
                    this.OnNettoAmountChanged();
                }
            }
        }

        public virtual decimal InvoiceLineVolume
        {
            get
            {
                return this._InvoiceLineVolume;
            }
            set
            {
                if (this._InvoiceLineVolume != value)
                {
                    this.OnInvoiceLineVolumeChanging(value);
                    this._InvoiceLineVolume = value;
                    this.SendPropertyChanged("InvoiceLineVolume");
                    this.OnInvoiceLineVolumeChanged();
                }
            }
        }

        public virtual System.Guid InvoiceLineId
        {
            get
            {
                return this._InvoiceLineId;
            }
            set
            {
                if (this._InvoiceLineId != value)
                {
                    this.OnInvoiceLineIdChanging(value);
                    this._InvoiceLineId = value;
                    this.SendPropertyChanged("InvoiceLineId");
                    this.OnInvoiceLineIdChanged();
                }
            }
        }

        public virtual decimal? EndVolume
        {
            get
            {
                return this._EndVolume;
            }
            set
            {
                if (this._EndVolume != value)
                {
                    this.OnEndVolumeChanging(value);
                    this._EndVolume = value;
                    this.SendPropertyChanged("EndVolume");
                    this.OnEndVolumeChanged();
                }
            }
        }

        public virtual decimal? EndLevel
        {
            get
            {
                return this._EndLevel;
            }
            set
            {
                if (this._EndLevel != value)
                {
                    this.OnEndLevelChanging(value);
                    this._EndLevel = value;
                    this.SendPropertyChanged("EndLevel");
                    this.OnEndLevelChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnViewIdChanging(System.Guid value);
        
        partial void OnViewIdChanged();
        partial void OnVolumeChanging(decimal value);
        
        partial void OnVolumeChanged();
        partial void OnVatAmountChanging(decimal? value);
        
        partial void OnVatAmountChanged();
        partial void OnUnitPriceChanging(decimal value);
        
        partial void OnUnitPriceChanged();
        partial void OnTransactionTimeStampChanging(System.DateTime value);
        
        partial void OnTransactionTimeStampChanged();
        partial void OnTotalPriceChanging(decimal value);
        
        partial void OnTotalPriceChanged();
        partial void OnTotalizerStartChanging(decimal value);
        
        partial void OnTotalizerStartChanged();
        partial void OnTotalizerEndChanging(decimal value);
        
        partial void OnTotalizerEndChanged();
        partial void OnTotalAmountChanging(decimal? value);
        
        partial void OnTotalAmountChanged();
        partial void OnStartVolumeChanging(decimal value);
        
        partial void OnStartVolumeChanged();
        partial void OnStartLevelChanging(decimal value);
        
        partial void OnStartLevelChanged();
        partial void OnNumberChanging(int value);
        
        partial void OnNumberChanged();
        partial void OnNettoAmountChanging(decimal? value);
        
        partial void OnNettoAmountChanged();
        partial void OnInvoiceLineVolumeChanging(decimal value);
        
        partial void OnInvoiceLineVolumeChanged();
        partial void OnInvoiceLineIdChanging(System.Guid value);
        
        partial void OnInvoiceLineIdChanged();
        partial void OnEndVolumeChanging(decimal? value);
        
        partial void OnEndVolumeChanged();
        partial void OnEndLevelChanging(decimal? value);
        
        partial void OnEndLevelChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class DeviceSetting : EntityBase, INotifyPropertyChanged {

        private System.Guid _DeviceSettingId;

        private System.Guid _DeviceId;

        private string _DeviceType;

        private string _SettingKey;

        private string _SettingValue;

        private string _Description;

        private bool _IsSerialNumber;

        public DeviceSetting()
        {
            OnCreated();
        }

        public virtual System.Guid DeviceSettingId
        {
            get
            {
                return this._DeviceSettingId;
            }
            set
            {
                if (this._DeviceSettingId != value)
                {
                    this.OnDeviceSettingIdChanging(value);
                    this._DeviceSettingId = value;
                    this.SendPropertyChanged("DeviceSettingId");
                    this.OnDeviceSettingIdChanged();
                }
            }
        }

        public virtual System.Guid DeviceId
        {
            get
            {
                return this._DeviceId;
            }
            set
            {
                if (this._DeviceId != value)
                {
                    this.OnDeviceIdChanging(value);
                    this._DeviceId = value;
                    this.SendPropertyChanged("DeviceId");
                    this.OnDeviceIdChanged();
                }
            }
        }

        public virtual string DeviceType
        {
            get
            {
                return this._DeviceType;
            }
            set
            {
                if (this._DeviceType != value)
                {
                    this.OnDeviceTypeChanging(value);
                    this._DeviceType = value;
                    this.SendPropertyChanged("DeviceType");
                    this.OnDeviceTypeChanged();
                }
            }
        }

        public virtual string SettingKey
        {
            get
            {
                return this._SettingKey;
            }
            set
            {
                if (this._SettingKey != value)
                {
                    this.OnSettingKeyChanging(value);
                    this._SettingKey = value;
                    this.SendPropertyChanged("SettingKey");
                    this.OnSettingKeyChanged();
                }
            }
        }

        public virtual string SettingValue
        {
            get
            {
                return this._SettingValue;
            }
            set
            {
                if (this._SettingValue != value)
                {
                    this.OnSettingValueChanging(value);
                    this._SettingValue = value;
                    this.SendPropertyChanged("SettingValue");
                    this.OnSettingValueChanged();
                }
            }
        }

        public virtual string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

        public virtual bool IsSerialNumber
        {
            get
            {
                return this._IsSerialNumber;
            }
            set
            {
                if (this._IsSerialNumber != value)
                {
                    this.OnIsSerialNumberChanging(value);
                    this._IsSerialNumber = value;
                    this.SendPropertyChanged("IsSerialNumber");
                    this.OnIsSerialNumberChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnDeviceSettingIdChanging(System.Guid value);
        
        partial void OnDeviceSettingIdChanged();
        partial void OnDeviceIdChanging(System.Guid value);
        
        partial void OnDeviceIdChanged();
        partial void OnDeviceTypeChanging(string value);
        
        partial void OnDeviceTypeChanged();
        partial void OnSettingKeyChanging(string value);
        
        partial void OnSettingKeyChanged();
        partial void OnSettingValueChanging(string value);
        
        partial void OnSettingValueChanged();
        partial void OnDescriptionChanging(string value);
        
        partial void OnDescriptionChanged();
        partial void OnIsSerialNumberChanging(bool value);
        
        partial void OnIsSerialNumberChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class FinancialTransaction : EntityBase, INotifyPropertyChanged {

        private System.Guid _FinancialTransactionId;

        private System.Guid _InvoiceId;

        private System.DateTime _TransactionDate;

        private decimal _Amount;

        private int _TransactionTYpe;

        private string _Notes;

        public FinancialTransaction()
        {
            OnCreated();
        }

        public virtual System.Guid FinancialTransactionId
        {
            get
            {
                return this._FinancialTransactionId;
            }
            set
            {
                if (this._FinancialTransactionId != value)
                {
                    this.OnFinancialTransactionIdChanging(value);
                    this._FinancialTransactionId = value;
                    this.SendPropertyChanged("FinancialTransactionId");
                    this.OnFinancialTransactionIdChanged();
                }
            }
        }

        public virtual System.Guid InvoiceId
        {
            get
            {
                return this._InvoiceId;
            }
            set
            {
                if (this._InvoiceId != value)
                {
                    this.OnInvoiceIdChanging(value);
                    this._InvoiceId = value;
                    this.SendPropertyChanged("InvoiceId");
                    this.OnInvoiceIdChanged();
                }
            }
        }

        public virtual System.DateTime TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

        public virtual decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        public virtual int TransactionTYpe
        {
            get
            {
                return this._TransactionTYpe;
            }
            set
            {
                if (this._TransactionTYpe != value)
                {
                    this.OnTransactionTYpeChanging(value);
                    this._TransactionTYpe = value;
                    this.SendPropertyChanged("TransactionTYpe");
                    this.OnTransactionTYpeChanged();
                }
            }
        }

        public virtual string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnFinancialTransactionIdChanging(System.Guid value);
        
        partial void OnFinancialTransactionIdChanged();
        partial void OnInvoiceIdChanging(System.Guid value);
        
        partial void OnInvoiceIdChanged();
        partial void OnTransactionDateChanging(System.DateTime value);
        
        partial void OnTransactionDateChanged();
        partial void OnAmountChanging(decimal value);
        
        partial void OnAmountChanged();
        partial void OnTransactionTYpeChanging(int value);
        
        partial void OnTransactionTYpeChanged();
        partial void OnNotesChanging(string value);
        
        partial void OnNotesChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class OilCompany : EntityBase, INotifyPropertyChanged {

        private System.Guid _OilCompanyId;

        private string _Name;

        private byte[] _Logo;

        public OilCompany()
        {
            OnCreated();
        }

        public virtual System.Guid OilCompanyId
        {
            get
            {
                return this._OilCompanyId;
            }
            set
            {
                if (this._OilCompanyId != value)
                {
                    this.OnOilCompanyIdChanging(value);
                    this._OilCompanyId = value;
                    this.SendPropertyChanged("OilCompanyId");
                    this.OnOilCompanyIdChanged();
                }
            }
        }

        public virtual string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

        public virtual byte[] Logo
        {
            get
            {
                return this._Logo;
            }
            set
            {
                if (this._Logo != value)
                {
                    this.OnLogoChanging(value);
                    this._Logo = value;
                    this.SendPropertyChanged("Logo");
                    this.OnLogoChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnOilCompanyIdChanging(System.Guid value);
        
        partial void OnOilCompanyIdChanged();
        partial void OnNameChanging(string value);
        
        partial void OnNameChanged();
        partial void OnLogoChanging(byte[] value);
        
        partial void OnLogoChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class FleetManagmentSchedule : EntityBase, INotifyPropertyChanged {

        private System.Guid _FleetManagmentScheduleId;

        private System.Guid _FleetManagerDispenserId;

        private int _TimeFrom;

        private int _TimeTo;

        private int _DayMask;

        private FleetManagerDispenser _FleetManagerDispenser;

        public FleetManagmentSchedule()
        {
            OnCreated();
        }

        public virtual System.Guid FleetManagmentScheduleId
        {
            get
            {
                return this._FleetManagmentScheduleId;
            }
            set
            {
                if (this._FleetManagmentScheduleId != value)
                {
                    this.OnFleetManagmentScheduleIdChanging(value);
                    this._FleetManagmentScheduleId = value;
                    this.SendPropertyChanged("FleetManagmentScheduleId");
                    this.OnFleetManagmentScheduleIdChanged();
                }
            }
        }

        public virtual System.Guid FleetManagerDispenserId
        {
            get
            {
                return this._FleetManagerDispenserId;
            }
            set
            {
                if (this._FleetManagerDispenserId != value)
                {
                    this.OnFleetManagerDispenserIdChanging(value);
                    this._FleetManagerDispenserId = value;
                    this.SendPropertyChanged("FleetManagerDispenserId");
                    this.OnFleetManagerDispenserIdChanged();
                }
            }
        }

        public virtual int TimeFrom
        {
            get
            {
                return this._TimeFrom;
            }
            set
            {
                if (this._TimeFrom != value)
                {
                    this.OnTimeFromChanging(value);
                    this._TimeFrom = value;
                    this.SendPropertyChanged("TimeFrom");
                    this.OnTimeFromChanged();
                }
            }
        }

        public virtual int TimeTo
        {
            get
            {
                return this._TimeTo;
            }
            set
            {
                if (this._TimeTo != value)
                {
                    this.OnTimeToChanging(value);
                    this._TimeTo = value;
                    this.SendPropertyChanged("TimeTo");
                    this.OnTimeToChanged();
                }
            }
        }

        public virtual int DayMask
        {
            get
            {
                return this._DayMask;
            }
            set
            {
                if (this._DayMask != value)
                {
                    this.OnDayMaskChanging(value);
                    this._DayMask = value;
                    this.SendPropertyChanged("DayMask");
                    this.OnDayMaskChanged();
                }
            }
        }

        public virtual FleetManagerDispenser FleetManagerDispenser
        {
            get
            {
                return this._FleetManagerDispenser;
            }
            set
            {
                if (this._FleetManagerDispenser != value)
                {
                    this.OnFleetManagerDispenserChanging(value);
                    this._FleetManagerDispenser = value;
                    this.SendPropertyChanged("FleetManagerDispenser");
                    this.OnFleetManagerDispenserChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnFleetManagmentScheduleIdChanging(System.Guid value);
        
        partial void OnFleetManagmentScheduleIdChanged();
        partial void OnFleetManagerDispenserIdChanging(System.Guid value);
        
        partial void OnFleetManagerDispenserIdChanged();
        partial void OnTimeFromChanging(int value);
        
        partial void OnTimeFromChanged();
        partial void OnTimeToChanging(int value);
        
        partial void OnTimeToChanged();
        partial void OnDayMaskChanging(int value);
        
        partial void OnDayMaskChanged();
        partial void OnFleetManagerDispenserChanging(FleetManagerDispenser value);

        partial void OnFleetManagerDispenserChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class FleetManagmentCotroller : EntityBase, INotifyPropertyChanged {

        private System.Guid _FleetManagmentCotrollerId;

        private string _ComPort;

        private int _BaudRate;

        private int _Parity;

        private int _DataBits;

        private int _StopBits;

        private int? _DevicePort;

        private string _DeviceIp;

        private int? _DeviceIndex;

        private int? _ControlerType;

        private IList<FleetManagerDispenser> _FleetManagerDispensers;

        public FleetManagmentCotroller()
        {
            this._FleetManagerDispensers = new List<FleetManagerDispenser>();
            OnCreated();
        }

        public virtual System.Guid FleetManagmentCotrollerId
        {
            get
            {
                return this._FleetManagmentCotrollerId;
            }
            set
            {
                if (this._FleetManagmentCotrollerId != value)
                {
                    this.OnFleetManagmentCotrollerIdChanging(value);
                    this._FleetManagmentCotrollerId = value;
                    this.SendPropertyChanged("FleetManagmentCotrollerId");
                    this.OnFleetManagmentCotrollerIdChanged();
                }
            }
        }

        public virtual string ComPort
        {
            get
            {
                return this._ComPort;
            }
            set
            {
                if (this._ComPort != value)
                {
                    this.OnComPortChanging(value);
                    this._ComPort = value;
                    this.SendPropertyChanged("ComPort");
                    this.OnComPortChanged();
                }
            }
        }

        public virtual int BaudRate
        {
            get
            {
                return this._BaudRate;
            }
            set
            {
                if (this._BaudRate != value)
                {
                    this.OnBaudRateChanging(value);
                    this._BaudRate = value;
                    this.SendPropertyChanged("BaudRate");
                    this.OnBaudRateChanged();
                }
            }
        }

        public virtual int Parity
        {
            get
            {
                return this._Parity;
            }
            set
            {
                if (this._Parity != value)
                {
                    this.OnParityChanging(value);
                    this._Parity = value;
                    this.SendPropertyChanged("Parity");
                    this.OnParityChanged();
                }
            }
        }

        public virtual int DataBits
        {
            get
            {
                return this._DataBits;
            }
            set
            {
                if (this._DataBits != value)
                {
                    this.OnDataBitsChanging(value);
                    this._DataBits = value;
                    this.SendPropertyChanged("DataBits");
                    this.OnDataBitsChanged();
                }
            }
        }

        public virtual int StopBits
        {
            get
            {
                return this._StopBits;
            }
            set
            {
                if (this._StopBits != value)
                {
                    this.OnStopBitsChanging(value);
                    this._StopBits = value;
                    this.SendPropertyChanged("StopBits");
                    this.OnStopBitsChanged();
                }
            }
        }

        public virtual int? DevicePort
        {
            get
            {
                return this._DevicePort;
            }
            set
            {
                if (this._DevicePort != value)
                {
                    this.OnDevicePortChanging(value);
                    this._DevicePort = value;
                    this.SendPropertyChanged("DevicePort");
                    this.OnDevicePortChanged();
                }
            }
        }

        public virtual string DeviceIp
        {
            get
            {
                return this._DeviceIp;
            }
            set
            {
                if (this._DeviceIp != value)
                {
                    this.OnDeviceIpChanging(value);
                    this._DeviceIp = value;
                    this.SendPropertyChanged("DeviceIp");
                    this.OnDeviceIpChanged();
                }
            }
        }

        public virtual int? DeviceIndex
        {
            get
            {
                return this._DeviceIndex;
            }
            set
            {
                if (this._DeviceIndex != value)
                {
                    this.OnDeviceIndexChanging(value);
                    this._DeviceIndex = value;
                    this.SendPropertyChanged("DeviceIndex");
                    this.OnDeviceIndexChanged();
                }
            }
        }

        public virtual int? ControlerType
        {
            get
            {
                return this._ControlerType;
            }
            set
            {
                if (this._ControlerType != value)
                {
                    this.OnControlerTypeChanging(value);
                    this._ControlerType = value;
                    this.SendPropertyChanged("ControlerType");
                    this.OnControlerTypeChanged();
                }
            }
        }

        public virtual IList<FleetManagerDispenser> FleetManagerDispensers
        {
            get
            {
                return this._FleetManagerDispensers;
            }
            set
            {
                if (this._FleetManagerDispensers != value)
                {
                    this._FleetManagerDispensers = value;
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnFleetManagmentCotrollerIdChanging(System.Guid value);
        
        partial void OnFleetManagmentCotrollerIdChanged();
        partial void OnComPortChanging(string value);
        
        partial void OnComPortChanged();
        partial void OnBaudRateChanging(int value);
        
        partial void OnBaudRateChanged();
        partial void OnParityChanging(int value);
        
        partial void OnParityChanged();
        partial void OnDataBitsChanging(int value);
        
        partial void OnDataBitsChanged();
        partial void OnStopBitsChanging(int value);
        
        partial void OnStopBitsChanged();
        partial void OnDevicePortChanging(int? value);
        
        partial void OnDevicePortChanged();
        partial void OnDeviceIpChanging(string value);
        
        partial void OnDeviceIpChanged();
        partial void OnDeviceIndexChanging(int? value);
        
        partial void OnDeviceIndexChanged();
        partial void OnControlerTypeChanging(int? value);
        
        partial void OnControlerTypeChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class FleetManagerDispenser : EntityBase, INotifyPropertyChanged {

        private System.Guid _FleetManagerDispenserId;

        private System.Guid _FleetManagmentCotrollerId;

        private System.Guid _DispenserId;

        private System.Guid _InvoiceTypeId;

        private InvoiceType _InvoiceType;

        private Dispenser _Dispenser;

        private IList<FleetManagmentSchedule> _FleetManagmentSchedules;

        private FleetManagmentCotroller _FleetManagmentCotroller;

        public FleetManagerDispenser()
        {
            this._FleetManagmentSchedules = new List<FleetManagmentSchedule>();
            OnCreated();
        }

        public virtual System.Guid FleetManagerDispenserId
        {
            get
            {
                return this._FleetManagerDispenserId;
            }
            set
            {
                if (this._FleetManagerDispenserId != value)
                {
                    this.OnFleetManagerDispenserIdChanging(value);
                    this._FleetManagerDispenserId = value;
                    this.SendPropertyChanged("FleetManagerDispenserId");
                    this.OnFleetManagerDispenserIdChanged();
                }
            }
        }

        public virtual System.Guid FleetManagmentCotrollerId
        {
            get
            {
                return this._FleetManagmentCotrollerId;
            }
            set
            {
                if (this._FleetManagmentCotrollerId != value)
                {
                    this.OnFleetManagmentCotrollerIdChanging(value);
                    this._FleetManagmentCotrollerId = value;
                    this.SendPropertyChanged("FleetManagmentCotrollerId");
                    this.OnFleetManagmentCotrollerIdChanged();
                }
            }
        }

        public virtual System.Guid DispenserId
        {
            get
            {
                return this._DispenserId;
            }
            set
            {
                if (this._DispenserId != value)
                {
                    this.OnDispenserIdChanging(value);
                    this._DispenserId = value;
                    this.SendPropertyChanged("DispenserId");
                    this.OnDispenserIdChanged();
                }
            }
        }

        public virtual System.Guid InvoiceTypeId
        {
            get
            {
                return this._InvoiceTypeId;
            }
            set
            {
                if (this._InvoiceTypeId != value)
                {
                    this.OnInvoiceTypeIdChanging(value);
                    this._InvoiceTypeId = value;
                    this.SendPropertyChanged("InvoiceTypeId");
                    this.OnInvoiceTypeIdChanged();
                }
            }
        }

        public virtual InvoiceType InvoiceType
        {
            get
            {
                return this._InvoiceType;
            }
            set
            {
                if (this._InvoiceType != value)
                {
                    this.OnInvoiceTypeChanging(value);
                    this._InvoiceType = value;
                    this.SendPropertyChanged("InvoiceType");
                    this.OnInvoiceTypeChanged();
                }
            }
        }

        public virtual Dispenser Dispenser
        {
            get
            {
                return this._Dispenser;
            }
            set
            {
                if (this._Dispenser != value)
                {
                    this.OnDispenserChanging(value);
                    this._Dispenser = value;
                    this.SendPropertyChanged("Dispenser");
                    this.OnDispenserChanged();
                }
            }
        }

        public virtual IList<FleetManagmentSchedule> FleetManagmentSchedules
        {
            get
            {
                return this._FleetManagmentSchedules;
            }
            set
            {
                if (this._FleetManagmentSchedules != value)
                {
                    this._FleetManagmentSchedules = value;
                }
            }
        }

        public virtual FleetManagmentCotroller FleetManagmentCotroller
        {
            get
            {
                return this._FleetManagmentCotroller;
            }
            set
            {
                if (this._FleetManagmentCotroller != value)
                {
                    this.OnFleetManagmentCotrollerChanging(value);
                    this._FleetManagmentCotroller = value;
                    this.SendPropertyChanged("FleetManagmentCotroller");
                    this.OnFleetManagmentCotrollerChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnFleetManagerDispenserIdChanging(System.Guid value);
        
        partial void OnFleetManagerDispenserIdChanged();
        partial void OnFleetManagmentCotrollerIdChanging(System.Guid value);
        
        partial void OnFleetManagmentCotrollerIdChanged();
        partial void OnDispenserIdChanging(System.Guid value);
        
        partial void OnDispenserIdChanged();
        partial void OnInvoiceTypeIdChanging(System.Guid value);
        
        partial void OnInvoiceTypeIdChanged();
        partial void OnInvoiceTypeChanging(InvoiceType value);

        partial void OnInvoiceTypeChanged();
        partial void OnDispenserChanging(Dispenser value);

        partial void OnDispenserChanged();
        partial void OnFleetManagmentCotrollerChanging(FleetManagmentCotroller value);

        partial void OnFleetManagmentCotrollerChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class InvoiceCatalogView : EntityBase, INotifyPropertyChanged {

        private System.Guid _InvoiceId;

        private System.Guid _InvoiceTypeId;

        private System.DateTime _TransactionDate;

        private decimal _DiscountAmount;

        private decimal _NettoAmount;

        private int _Number;

        private int _PaymentType;

        private decimal _TotalAmount;

        private System.Guid? _TraderId;

        private string _TraderName;

        private System.Guid? _VehicleId;

        private string _PlateNumber;

        private bool _VatExemption;

        private decimal _VatAmount;

        private string _InvoiceTypeDesc;

        private bool _IsLaserPrint;

        private bool _IsPrinted;

        private int _TransactionSign;

        private int _InvoiceLineCount;

        private int _Cancelation;

        private int _Canceled;

        private int _Replaced;

        private int _ReplaceInvoicesCount;

        private decimal _DebitAmount;

        private decimal _CreditAmount;

        private string _FuelTypes;

        private decimal? _VolumeSum;

        private string _SupplyNumber;

        private int? _VehicleOdometer;

        private string _DeliveryAddress;

        private string _Series;

        public InvoiceCatalogView()
        {
            OnCreated();
        }

        public virtual System.Guid InvoiceId
        {
            get
            {
                return this._InvoiceId;
            }
            set
            {
                if (this._InvoiceId != value)
                {
                    this.OnInvoiceIdChanging(value);
                    this._InvoiceId = value;
                    this.SendPropertyChanged("InvoiceId");
                    this.OnInvoiceIdChanged();
                }
            }
        }

        public virtual System.Guid InvoiceTypeId
        {
            get
            {
                return this._InvoiceTypeId;
            }
            set
            {
                if (this._InvoiceTypeId != value)
                {
                    this.OnInvoiceTypeIdChanging(value);
                    this._InvoiceTypeId = value;
                    this.SendPropertyChanged("InvoiceTypeId");
                    this.OnInvoiceTypeIdChanged();
                }
            }
        }

        public virtual System.DateTime TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

        public virtual decimal DiscountAmount
        {
            get
            {
                return this._DiscountAmount;
            }
            set
            {
                if (this._DiscountAmount != value)
                {
                    this.OnDiscountAmountChanging(value);
                    this._DiscountAmount = value;
                    this.SendPropertyChanged("DiscountAmount");
                    this.OnDiscountAmountChanged();
                }
            }
        }

        public virtual decimal NettoAmount
        {
            get
            {
                return this._NettoAmount;
            }
            set
            {
                if (this._NettoAmount != value)
                {
                    this.OnNettoAmountChanging(value);
                    this._NettoAmount = value;
                    this.SendPropertyChanged("NettoAmount");
                    this.OnNettoAmountChanged();
                }
            }
        }

        public virtual int Number
        {
            get
            {
                return this._Number;
            }
            set
            {
                if (this._Number != value)
                {
                    this.OnNumberChanging(value);
                    this._Number = value;
                    this.SendPropertyChanged("Number");
                    this.OnNumberChanged();
                }
            }
        }

        public virtual int PaymentType
        {
            get
            {
                return this._PaymentType;
            }
            set
            {
                if (this._PaymentType != value)
                {
                    this.OnPaymentTypeChanging(value);
                    this._PaymentType = value;
                    this.SendPropertyChanged("PaymentType");
                    this.OnPaymentTypeChanged();
                }
            }
        }

        public virtual decimal TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if (this._TotalAmount != value)
                {
                    this.OnTotalAmountChanging(value);
                    this._TotalAmount = value;
                    this.SendPropertyChanged("TotalAmount");
                    this.OnTotalAmountChanged();
                }
            }
        }

        public virtual System.Guid? TraderId
        {
            get
            {
                return this._TraderId;
            }
            set
            {
                if (this._TraderId != value)
                {
                    this.OnTraderIdChanging(value);
                    this._TraderId = value;
                    this.SendPropertyChanged("TraderId");
                    this.OnTraderIdChanged();
                }
            }
        }

        public virtual string TraderName
        {
            get
            {
                return this._TraderName;
            }
            set
            {
                if (this._TraderName != value)
                {
                    this.OnTraderNameChanging(value);
                    this._TraderName = value;
                    this.SendPropertyChanged("TraderName");
                    this.OnTraderNameChanged();
                }
            }
        }

        public virtual System.Guid? VehicleId
        {
            get
            {
                return this._VehicleId;
            }
            set
            {
                if (this._VehicleId != value)
                {
                    this.OnVehicleIdChanging(value);
                    this._VehicleId = value;
                    this.SendPropertyChanged("VehicleId");
                    this.OnVehicleIdChanged();
                }
            }
        }

        public virtual string PlateNumber
        {
            get
            {
                return this._PlateNumber;
            }
            set
            {
                if (this._PlateNumber != value)
                {
                    this.OnPlateNumberChanging(value);
                    this._PlateNumber = value;
                    this.SendPropertyChanged("PlateNumber");
                    this.OnPlateNumberChanged();
                }
            }
        }

        public virtual bool VatExemption
        {
            get
            {
                return this._VatExemption;
            }
            set
            {
                if (this._VatExemption != value)
                {
                    this.OnVatExemptionChanging(value);
                    this._VatExemption = value;
                    this.SendPropertyChanged("VatExemption");
                    this.OnVatExemptionChanged();
                }
            }
        }

        public virtual decimal VatAmount
        {
            get
            {
                return this._VatAmount;
            }
            set
            {
                if (this._VatAmount != value)
                {
                    this.OnVatAmountChanging(value);
                    this._VatAmount = value;
                    this.SendPropertyChanged("VatAmount");
                    this.OnVatAmountChanged();
                }
            }
        }

        public virtual string InvoiceTypeDesc
        {
            get
            {
                return this._InvoiceTypeDesc;
            }
            set
            {
                if (this._InvoiceTypeDesc != value)
                {
                    this.OnInvoiceTypeDescChanging(value);
                    this._InvoiceTypeDesc = value;
                    this.SendPropertyChanged("InvoiceTypeDesc");
                    this.OnInvoiceTypeDescChanged();
                }
            }
        }

        public virtual bool IsLaserPrint
        {
            get
            {
                return this._IsLaserPrint;
            }
            set
            {
                if (this._IsLaserPrint != value)
                {
                    this.OnIsLaserPrintChanging(value);
                    this._IsLaserPrint = value;
                    this.SendPropertyChanged("IsLaserPrint");
                    this.OnIsLaserPrintChanged();
                }
            }
        }

        public virtual bool IsPrinted
        {
            get
            {
                return this._IsPrinted;
            }
            set
            {
                if (this._IsPrinted != value)
                {
                    this.OnIsPrintedChanging(value);
                    this._IsPrinted = value;
                    this.SendPropertyChanged("IsPrinted");
                    this.OnIsPrintedChanged();
                }
            }
        }

        public virtual int TransactionSign
        {
            get
            {
                return this._TransactionSign;
            }
            set
            {
                if (this._TransactionSign != value)
                {
                    this.OnTransactionSignChanging(value);
                    this._TransactionSign = value;
                    this.SendPropertyChanged("TransactionSign");
                    this.OnTransactionSignChanged();
                }
            }
        }

        public virtual int InvoiceLineCount
        {
            get
            {
                return this._InvoiceLineCount;
            }
            set
            {
                if (this._InvoiceLineCount != value)
                {
                    this.OnInvoiceLineCountChanging(value);
                    this._InvoiceLineCount = value;
                    this.SendPropertyChanged("InvoiceLineCount");
                    this.OnInvoiceLineCountChanged();
                }
            }
        }

        public virtual int Cancelation
        {
            get
            {
                return this._Cancelation;
            }
            set
            {
                if (this._Cancelation != value)
                {
                    this.OnCancelationChanging(value);
                    this._Cancelation = value;
                    this.SendPropertyChanged("Cancelation");
                    this.OnCancelationChanged();
                }
            }
        }

        public virtual int Canceled
        {
            get
            {
                return this._Canceled;
            }
            set
            {
                if (this._Canceled != value)
                {
                    this.OnCanceledChanging(value);
                    this._Canceled = value;
                    this.SendPropertyChanged("Canceled");
                    this.OnCanceledChanged();
                }
            }
        }

        public virtual int Replaced
        {
            get
            {
                return this._Replaced;
            }
            set
            {
                if (this._Replaced != value)
                {
                    this.OnReplacedChanging(value);
                    this._Replaced = value;
                    this.SendPropertyChanged("Replaced");
                    this.OnReplacedChanged();
                }
            }
        }

        public virtual int ReplaceInvoicesCount
        {
            get
            {
                return this._ReplaceInvoicesCount;
            }
            set
            {
                if (this._ReplaceInvoicesCount != value)
                {
                    this.OnReplaceInvoicesCountChanging(value);
                    this._ReplaceInvoicesCount = value;
                    this.SendPropertyChanged("ReplaceInvoicesCount");
                    this.OnReplaceInvoicesCountChanged();
                }
            }
        }

        public virtual decimal DebitAmount
        {
            get
            {
                return this._DebitAmount;
            }
            set
            {
                if (this._DebitAmount != value)
                {
                    this.OnDebitAmountChanging(value);
                    this._DebitAmount = value;
                    this.SendPropertyChanged("DebitAmount");
                    this.OnDebitAmountChanged();
                }
            }
        }

        public virtual decimal CreditAmount
        {
            get
            {
                return this._CreditAmount;
            }
            set
            {
                if (this._CreditAmount != value)
                {
                    this.OnCreditAmountChanging(value);
                    this._CreditAmount = value;
                    this.SendPropertyChanged("CreditAmount");
                    this.OnCreditAmountChanged();
                }
            }
        }

        public virtual string FuelTypes
        {
            get
            {
                return this._FuelTypes;
            }
            set
            {
                if (this._FuelTypes != value)
                {
                    this.OnFuelTypesChanging(value);
                    this._FuelTypes = value;
                    this.SendPropertyChanged("FuelTypes");
                    this.OnFuelTypesChanged();
                }
            }
        }

        public virtual decimal? VolumeSum
        {
            get
            {
                return this._VolumeSum;
            }
            set
            {
                if (this._VolumeSum != value)
                {
                    this.OnVolumeSumChanging(value);
                    this._VolumeSum = value;
                    this.SendPropertyChanged("VolumeSum");
                    this.OnVolumeSumChanged();
                }
            }
        }

        public virtual string SupplyNumber
        {
            get
            {
                return this._SupplyNumber;
            }
            set
            {
                if (this._SupplyNumber != value)
                {
                    this.OnSupplyNumberChanging(value);
                    this._SupplyNumber = value;
                    this.SendPropertyChanged("SupplyNumber");
                    this.OnSupplyNumberChanged();
                }
            }
        }

        public virtual int? VehicleOdometer
        {
            get
            {
                return this._VehicleOdometer;
            }
            set
            {
                if (this._VehicleOdometer != value)
                {
                    this.OnVehicleOdometerChanging(value);
                    this._VehicleOdometer = value;
                    this.SendPropertyChanged("VehicleOdometer");
                    this.OnVehicleOdometerChanged();
                }
            }
        }

        public virtual string DeliveryAddress
        {
            get
            {
                return this._DeliveryAddress;
            }
            set
            {
                if (this._DeliveryAddress != value)
                {
                    this.OnDeliveryAddressChanging(value);
                    this._DeliveryAddress = value;
                    this.SendPropertyChanged("DeliveryAddress");
                    this.OnDeliveryAddressChanged();
                }
            }
        }

        public virtual string Series
        {
            get
            {
                return this._Series;
            }
            set
            {
                if (this._Series != value)
                {
                    this.OnSeriesChanging(value);
                    this._Series = value;
                    this.SendPropertyChanged("Series");
                    this.OnSeriesChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnInvoiceIdChanging(System.Guid value);
        
        partial void OnInvoiceIdChanged();
        partial void OnInvoiceTypeIdChanging(System.Guid value);
        
        partial void OnInvoiceTypeIdChanged();
        partial void OnTransactionDateChanging(System.DateTime value);
        
        partial void OnTransactionDateChanged();
        partial void OnDiscountAmountChanging(decimal value);
        
        partial void OnDiscountAmountChanged();
        partial void OnNettoAmountChanging(decimal value);
        
        partial void OnNettoAmountChanged();
        partial void OnNumberChanging(int value);
        
        partial void OnNumberChanged();
        partial void OnPaymentTypeChanging(int value);
        
        partial void OnPaymentTypeChanged();
        partial void OnTotalAmountChanging(decimal value);
        
        partial void OnTotalAmountChanged();
        partial void OnTraderIdChanging(System.Guid? value);
        
        partial void OnTraderIdChanged();
        partial void OnTraderNameChanging(string value);
        
        partial void OnTraderNameChanged();
        partial void OnVehicleIdChanging(System.Guid? value);
        
        partial void OnVehicleIdChanged();
        partial void OnPlateNumberChanging(string value);
        
        partial void OnPlateNumberChanged();
        partial void OnVatExemptionChanging(bool value);
        
        partial void OnVatExemptionChanged();
        partial void OnVatAmountChanging(decimal value);
        
        partial void OnVatAmountChanged();
        partial void OnInvoiceTypeDescChanging(string value);
        
        partial void OnInvoiceTypeDescChanged();
        partial void OnIsLaserPrintChanging(bool value);
        
        partial void OnIsLaserPrintChanged();
        partial void OnIsPrintedChanging(bool value);
        
        partial void OnIsPrintedChanged();
        partial void OnTransactionSignChanging(int value);
        
        partial void OnTransactionSignChanged();
        partial void OnInvoiceLineCountChanging(int value);
        
        partial void OnInvoiceLineCountChanged();
        partial void OnCancelationChanging(int value);
        
        partial void OnCancelationChanged();
        partial void OnCanceledChanging(int value);
        
        partial void OnCanceledChanged();
        partial void OnReplacedChanging(int value);
        
        partial void OnReplacedChanged();
        partial void OnReplaceInvoicesCountChanging(int value);
        
        partial void OnReplaceInvoicesCountChanged();
        partial void OnDebitAmountChanging(decimal value);
        
        partial void OnDebitAmountChanged();
        partial void OnCreditAmountChanging(decimal value);
        
        partial void OnCreditAmountChanged();
        partial void OnFuelTypesChanging(string value);
        
        partial void OnFuelTypesChanged();
        partial void OnVolumeSumChanging(decimal? value);
        
        partial void OnVolumeSumChanged();
        partial void OnSupplyNumberChanging(string value);
        
        partial void OnSupplyNumberChanged();
        partial void OnVehicleOdometerChanging(int? value);
        
        partial void OnVehicleOdometerChanged();
        partial void OnDeliveryAddressChanging(string value);
        
        partial void OnDeliveryAddressChanged();
        partial void OnSeriesChanging(string value);
        
        partial void OnSeriesChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class FinTransaction : EntityBase, INotifyPropertyChanged {

        private System.Guid _FinTransactionId;

        private System.Guid _ApplicationUserId;

        private System.Guid? _TraderId;

        private System.Guid? _InvoiceId;

        private System.DateTime _TransactionDate;

        private decimal _Amount;

        private decimal _CreditAmount;

        private decimal _DebitAmount;

        private int _TransactionType;

        private string _Notes;

        private ApplicationUser _ApplicationUser;

        private Trader _Trader;

        private Invoice _Invoice;

        public FinTransaction()
        {
            OnCreated();
        }

        public virtual System.Guid FinTransactionId
        {
            get
            {
                return this._FinTransactionId;
            }
            set
            {
                if (this._FinTransactionId != value)
                {
                    this.OnFinTransactionIdChanging(value);
                    this._FinTransactionId = value;
                    this.SendPropertyChanged("FinTransactionId");
                    this.OnFinTransactionIdChanged();
                }
            }
        }

        public virtual System.Guid ApplicationUserId
        {
            get
            {
                return this._ApplicationUserId;
            }
            set
            {
                if (this._ApplicationUserId != value)
                {
                    this.OnApplicationUserIdChanging(value);
                    this._ApplicationUserId = value;
                    this.SendPropertyChanged("ApplicationUserId");
                    this.OnApplicationUserIdChanged();
                }
            }
        }

        public virtual System.Guid? TraderId
        {
            get
            {
                return this._TraderId;
            }
            set
            {
                if (this._TraderId != value)
                {
                    this.OnTraderIdChanging(value);
                    this._TraderId = value;
                    this.SendPropertyChanged("TraderId");
                    this.OnTraderIdChanged();
                }
            }
        }

        public virtual System.Guid? InvoiceId
        {
            get
            {
                return this._InvoiceId;
            }
            set
            {
                if (this._InvoiceId != value)
                {
                    this.OnInvoiceIdChanging(value);
                    this._InvoiceId = value;
                    this.SendPropertyChanged("InvoiceId");
                    this.OnInvoiceIdChanged();
                }
            }
        }

        public virtual System.DateTime TransactionDate
        {
            get
            {
                return this._TransactionDate;
            }
            set
            {
                if (this._TransactionDate != value)
                {
                    this.OnTransactionDateChanging(value);
                    this._TransactionDate = value;
                    this.SendPropertyChanged("TransactionDate");
                    this.OnTransactionDateChanged();
                }
            }
        }

        public virtual decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if (this._Amount != value)
                {
                    this.OnAmountChanging(value);
                    this._Amount = value;
                    this.SendPropertyChanged("Amount");
                    this.OnAmountChanged();
                }
            }
        }

        public virtual decimal CreditAmount
        {
            get
            {
                return this._CreditAmount;
            }
            set
            {
                if (this._CreditAmount != value)
                {
                    this.OnCreditAmountChanging(value);
                    this._CreditAmount = value;
                    this.SendPropertyChanged("CreditAmount");
                    this.OnCreditAmountChanged();
                }
            }
        }

        public virtual decimal DebitAmount
        {
            get
            {
                return this._DebitAmount;
            }
            set
            {
                if (this._DebitAmount != value)
                {
                    this.OnDebitAmountChanging(value);
                    this._DebitAmount = value;
                    this.SendPropertyChanged("DebitAmount");
                    this.OnDebitAmountChanged();
                }
            }
        }

        public virtual int TransactionType
        {
            get
            {
                return this._TransactionType;
            }
            set
            {
                if (this._TransactionType != value)
                {
                    this.OnTransactionTypeChanging(value);
                    this._TransactionType = value;
                    this.SendPropertyChanged("TransactionType");
                    this.OnTransactionTypeChanged();
                }
            }
        }

        public virtual string Notes
        {
            get
            {
                return this._Notes;
            }
            set
            {
                if (this._Notes != value)
                {
                    this.OnNotesChanging(value);
                    this._Notes = value;
                    this.SendPropertyChanged("Notes");
                    this.OnNotesChanged();
                }
            }
        }

        public virtual ApplicationUser ApplicationUser
        {
            get
            {
                return this._ApplicationUser;
            }
            set
            {
                if (this._ApplicationUser != value)
                {
                    this.OnApplicationUserChanging(value);
                    this._ApplicationUser = value;
                    this.SendPropertyChanged("ApplicationUser");
                    this.OnApplicationUserChanged();
                }
            }
        }

        public virtual Trader Trader
        {
            get
            {
                return this._Trader;
            }
            set
            {
                if (this._Trader != value)
                {
                    this.OnTraderChanging(value);
                    this._Trader = value;
                    this.SendPropertyChanged("Trader");
                    this.OnTraderChanged();
                }
            }
        }

        public virtual Invoice Invoice
        {
            get
            {
                return this._Invoice;
            }
            set
            {
                if (this._Invoice != value)
                {
                    this.OnInvoiceChanging(value);
                    this._Invoice = value;
                    this.SendPropertyChanged("Invoice");
                    this.OnInvoiceChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnFinTransactionIdChanging(System.Guid value);
        
        partial void OnFinTransactionIdChanged();
        partial void OnApplicationUserIdChanging(System.Guid value);
        
        partial void OnApplicationUserIdChanged();
        partial void OnTraderIdChanging(System.Guid? value);
        
        partial void OnTraderIdChanged();
        partial void OnInvoiceIdChanging(System.Guid? value);
        
        partial void OnInvoiceIdChanged();
        partial void OnTransactionDateChanging(System.DateTime value);
        
        partial void OnTransactionDateChanged();
        partial void OnAmountChanging(decimal value);
        
        partial void OnAmountChanged();
        partial void OnCreditAmountChanging(decimal value);
        
        partial void OnCreditAmountChanged();
        partial void OnDebitAmountChanging(decimal value);
        
        partial void OnDebitAmountChanged();
        partial void OnTransactionTypeChanging(int value);
        
        partial void OnTransactionTypeChanged();
        partial void OnNotesChanging(string value);
        
        partial void OnNotesChanged();
        partial void OnApplicationUserChanging(ApplicationUser value);

        partial void OnApplicationUserChanged();
        partial void OnTraderChanging(Trader value);

        partial void OnTraderChanged();
        partial void OnInvoiceChanging(Invoice value);

        partial void OnInvoiceChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class InvoiceTypeTransform : EntityBase, INotifyPropertyChanged {

        private System.Guid _InvoiceTypeTransformId;

        private System.Guid _ParentInvoiceTypeId;

        private System.Guid _ChildInvoiceTypeId;

        private int _TransformationMode;

        private string _NotesAddition;

        private System.Guid? _CreationInvoiceTypeId;

        private int? _CreationType;

        private string _CreationNotesAddition;

        private InvoiceType _InvoiceType_ParentInvoiceTypeId;

        private InvoiceType _InvoiceType_ChildInvoiceTypeId;

        private InvoiceType _InvoiceType_CreationInvoiceTypeId;

        public InvoiceTypeTransform()
        {
            OnCreated();
        }

        public virtual System.Guid InvoiceTypeTransformId
        {
            get
            {
                return this._InvoiceTypeTransformId;
            }
            set
            {
                if (this._InvoiceTypeTransformId != value)
                {
                    this.OnInvoiceTypeTransformIdChanging(value);
                    this._InvoiceTypeTransformId = value;
                    this.SendPropertyChanged("InvoiceTypeTransformId");
                    this.OnInvoiceTypeTransformIdChanged();
                }
            }
        }

        public virtual System.Guid ParentInvoiceTypeId
        {
            get
            {
                return this._ParentInvoiceTypeId;
            }
            set
            {
                if (this._ParentInvoiceTypeId != value)
                {
                    this.OnParentInvoiceTypeIdChanging(value);
                    this._ParentInvoiceTypeId = value;
                    this.SendPropertyChanged("ParentInvoiceTypeId");
                    this.OnParentInvoiceTypeIdChanged();
                }
            }
        }

        public virtual System.Guid ChildInvoiceTypeId
        {
            get
            {
                return this._ChildInvoiceTypeId;
            }
            set
            {
                if (this._ChildInvoiceTypeId != value)
                {
                    this.OnChildInvoiceTypeIdChanging(value);
                    this._ChildInvoiceTypeId = value;
                    this.SendPropertyChanged("ChildInvoiceTypeId");
                    this.OnChildInvoiceTypeIdChanged();
                }
            }
        }

        public virtual int TransformationMode
        {
            get
            {
                return this._TransformationMode;
            }
            set
            {
                if (this._TransformationMode != value)
                {
                    this.OnTransformationModeChanging(value);
                    this._TransformationMode = value;
                    this.SendPropertyChanged("TransformationMode");
                    this.OnTransformationModeChanged();
                }
            }
        }

        public virtual string NotesAddition
        {
            get
            {
                return this._NotesAddition;
            }
            set
            {
                if (this._NotesAddition != value)
                {
                    this.OnNotesAdditionChanging(value);
                    this._NotesAddition = value;
                    this.SendPropertyChanged("NotesAddition");
                    this.OnNotesAdditionChanged();
                }
            }
        }

        public virtual System.Guid? CreationInvoiceTypeId
        {
            get
            {
                return this._CreationInvoiceTypeId;
            }
            set
            {
                if (this._CreationInvoiceTypeId != value)
                {
                    this.OnCreationInvoiceTypeIdChanging(value);
                    this._CreationInvoiceTypeId = value;
                    this.SendPropertyChanged("CreationInvoiceTypeId");
                    this.OnCreationInvoiceTypeIdChanged();
                }
            }
        }

        public virtual int? CreationType
        {
            get
            {
                return this._CreationType;
            }
            set
            {
                if (this._CreationType != value)
                {
                    this.OnCreationTypeChanging(value);
                    this._CreationType = value;
                    this.SendPropertyChanged("CreationType");
                    this.OnCreationTypeChanged();
                }
            }
        }

        public virtual string CreationNotesAddition
        {
            get
            {
                return this._CreationNotesAddition;
            }
            set
            {
                if (this._CreationNotesAddition != value)
                {
                    this.OnCreationNotesAdditionChanging(value);
                    this._CreationNotesAddition = value;
                    this.SendPropertyChanged("CreationNotesAddition");
                    this.OnCreationNotesAdditionChanged();
                }
            }
        }

        public virtual InvoiceType InvoiceType_ParentInvoiceTypeId
        {
            get
            {
                return this._InvoiceType_ParentInvoiceTypeId;
            }
            set
            {
                if (this._InvoiceType_ParentInvoiceTypeId != value)
                {
                    this.OnInvoiceType_ParentInvoiceTypeIdChanging(value);
                    this._InvoiceType_ParentInvoiceTypeId = value;
                    this.SendPropertyChanged("InvoiceType_ParentInvoiceTypeId");
                    this.OnInvoiceType_ParentInvoiceTypeIdChanged();
                }
            }
        }

        public virtual InvoiceType InvoiceType_ChildInvoiceTypeId
        {
            get
            {
                return this._InvoiceType_ChildInvoiceTypeId;
            }
            set
            {
                if (this._InvoiceType_ChildInvoiceTypeId != value)
                {
                    this.OnInvoiceType_ChildInvoiceTypeIdChanging(value);
                    this._InvoiceType_ChildInvoiceTypeId = value;
                    this.SendPropertyChanged("InvoiceType_ChildInvoiceTypeId");
                    this.OnInvoiceType_ChildInvoiceTypeIdChanged();
                }
            }
        }

        public virtual InvoiceType InvoiceType_CreationInvoiceTypeId
        {
            get
            {
                return this._InvoiceType_CreationInvoiceTypeId;
            }
            set
            {
                if (this._InvoiceType_CreationInvoiceTypeId != value)
                {
                    this.OnInvoiceType_CreationInvoiceTypeIdChanging(value);
                    this._InvoiceType_CreationInvoiceTypeId = value;
                    this.SendPropertyChanged("InvoiceType_CreationInvoiceTypeId");
                    this.OnInvoiceType_CreationInvoiceTypeIdChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnInvoiceTypeTransformIdChanging(System.Guid value);
        
        partial void OnInvoiceTypeTransformIdChanged();
        partial void OnParentInvoiceTypeIdChanging(System.Guid value);
        
        partial void OnParentInvoiceTypeIdChanged();
        partial void OnChildInvoiceTypeIdChanging(System.Guid value);
        
        partial void OnChildInvoiceTypeIdChanged();
        partial void OnTransformationModeChanging(int value);
        
        partial void OnTransformationModeChanged();
        partial void OnNotesAdditionChanging(string value);
        
        partial void OnNotesAdditionChanged();
        partial void OnCreationInvoiceTypeIdChanging(System.Guid? value);
        
        partial void OnCreationInvoiceTypeIdChanged();
        partial void OnCreationTypeChanging(int? value);
        
        partial void OnCreationTypeChanged();
        partial void OnCreationNotesAdditionChanging(string value);
        
        partial void OnCreationNotesAdditionChanged();
        partial void OnInvoiceType_ParentInvoiceTypeIdChanging(InvoiceType value);

        partial void OnInvoiceType_ParentInvoiceTypeIdChanged();
        partial void OnInvoiceType_ChildInvoiceTypeIdChanging(InvoiceType value);

        partial void OnInvoiceType_ChildInvoiceTypeIdChanged();
        partial void OnInvoiceType_CreationInvoiceTypeIdChanging(InvoiceType value);

        partial void OnInvoiceType_CreationInvoiceTypeIdChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class InvoiceLineRelation : EntityBase, INotifyPropertyChanged {

        private System.Guid _InvoiceLineRelationId;

        private System.Guid _InvoiceRelationId;

        private System.Guid _ParentLineId;

        private System.Guid _ChildRelationId;

        private InvoiceRelation _InvoiceRelation;

        private InvoiceLine _InvoiceLine_ParentLineId;

        private InvoiceLine _InvoiceLine_ChildRelationId;

        public InvoiceLineRelation()
        {
            OnCreated();
        }

        public virtual System.Guid InvoiceLineRelationId
        {
            get
            {
                return this._InvoiceLineRelationId;
            }
            set
            {
                if (this._InvoiceLineRelationId != value)
                {
                    this.OnInvoiceLineRelationIdChanging(value);
                    this._InvoiceLineRelationId = value;
                    this.SendPropertyChanged("InvoiceLineRelationId");
                    this.OnInvoiceLineRelationIdChanged();
                }
            }
        }

        public virtual System.Guid InvoiceRelationId
        {
            get
            {
                return this._InvoiceRelationId;
            }
            set
            {
                if (this._InvoiceRelationId != value)
                {
                    this.OnInvoiceRelationIdChanging(value);
                    this._InvoiceRelationId = value;
                    this.SendPropertyChanged("InvoiceRelationId");
                    this.OnInvoiceRelationIdChanged();
                }
            }
        }

        public virtual System.Guid ParentLineId
        {
            get
            {
                return this._ParentLineId;
            }
            set
            {
                if (this._ParentLineId != value)
                {
                    this.OnParentLineIdChanging(value);
                    this._ParentLineId = value;
                    this.SendPropertyChanged("ParentLineId");
                    this.OnParentLineIdChanged();
                }
            }
        }

        public virtual System.Guid ChildRelationId
        {
            get
            {
                return this._ChildRelationId;
            }
            set
            {
                if (this._ChildRelationId != value)
                {
                    this.OnChildRelationIdChanging(value);
                    this._ChildRelationId = value;
                    this.SendPropertyChanged("ChildRelationId");
                    this.OnChildRelationIdChanged();
                }
            }
        }

        public virtual InvoiceRelation InvoiceRelation
        {
            get
            {
                return this._InvoiceRelation;
            }
            set
            {
                if (this._InvoiceRelation != value)
                {
                    this.OnInvoiceRelationChanging(value);
                    this._InvoiceRelation = value;
                    this.SendPropertyChanged("InvoiceRelation");
                    this.OnInvoiceRelationChanged();
                }
            }
        }

        public virtual InvoiceLine InvoiceLine_ParentLineId
        {
            get
            {
                return this._InvoiceLine_ParentLineId;
            }
            set
            {
                if (this._InvoiceLine_ParentLineId != value)
                {
                    this.OnInvoiceLine_ParentLineIdChanging(value);
                    this._InvoiceLine_ParentLineId = value;
                    this.SendPropertyChanged("InvoiceLine_ParentLineId");
                    this.OnInvoiceLine_ParentLineIdChanged();
                }
            }
        }

        public virtual InvoiceLine InvoiceLine_ChildRelationId
        {
            get
            {
                return this._InvoiceLine_ChildRelationId;
            }
            set
            {
                if (this._InvoiceLine_ChildRelationId != value)
                {
                    this.OnInvoiceLine_ChildRelationIdChanging(value);
                    this._InvoiceLine_ChildRelationId = value;
                    this.SendPropertyChanged("InvoiceLine_ChildRelationId");
                    this.OnInvoiceLine_ChildRelationIdChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnInvoiceLineRelationIdChanging(System.Guid value);
        
        partial void OnInvoiceLineRelationIdChanged();
        partial void OnInvoiceRelationIdChanging(System.Guid value);
        
        partial void OnInvoiceRelationIdChanged();
        partial void OnParentLineIdChanging(System.Guid value);
        
        partial void OnParentLineIdChanged();
        partial void OnChildRelationIdChanging(System.Guid value);
        
        partial void OnChildRelationIdChanged();
        partial void OnInvoiceRelationChanging(InvoiceRelation value);

        partial void OnInvoiceRelationChanged();
        partial void OnInvoiceLine_ParentLineIdChanging(InvoiceLine value);

        partial void OnInvoiceLine_ParentLineIdChanged();
        partial void OnInvoiceLine_ChildRelationIdChanging(InvoiceLine value);

        partial void OnInvoiceLine_ChildRelationIdChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class MyDataInvoice : EntityBase, INotifyPropertyChanged {

        private System.Guid _MyDataInvoiceId;

        private string _Uid;

        private long? _Mark;

        private System.Guid _InvoiceId;

        private System.DateTime? _DateTimeSent;

        private int _Status;

        private string _Data;

        private long? _CanceledByMark;

        private long? _CancelationMark;

        private string _Errors;

        public MyDataInvoice()
        {
            OnCreated();
        }

        public virtual System.Guid MyDataInvoiceId
        {
            get
            {
                return this._MyDataInvoiceId;
            }
            set
            {
                if (this._MyDataInvoiceId != value)
                {
                    this.OnMyDataInvoiceIdChanging(value);
                    this._MyDataInvoiceId = value;
                    this.SendPropertyChanged("MyDataInvoiceId");
                    this.OnMyDataInvoiceIdChanged();
                }
            }
        }

        public virtual string Uid
        {
            get
            {
                return this._Uid;
            }
            set
            {
                if (this._Uid != value)
                {
                    this.OnUidChanging(value);
                    this._Uid = value;
                    this.SendPropertyChanged("Uid");
                    this.OnUidChanged();
                }
            }
        }

        public virtual long? Mark
        {
            get
            {
                return this._Mark;
            }
            set
            {
                if (this._Mark != value)
                {
                    this.OnMarkChanging(value);
                    this._Mark = value;
                    this.SendPropertyChanged("Mark");
                    this.OnMarkChanged();
                }
            }
        }

        public virtual System.Guid InvoiceId
        {
            get
            {
                return this._InvoiceId;
            }
            set
            {
                if (this._InvoiceId != value)
                {
                    this.OnInvoiceIdChanging(value);
                    this._InvoiceId = value;
                    this.SendPropertyChanged("InvoiceId");
                    this.OnInvoiceIdChanged();
                }
            }
        }

        public virtual System.DateTime? DateTimeSent
        {
            get
            {
                return this._DateTimeSent;
            }
            set
            {
                if (this._DateTimeSent != value)
                {
                    this.OnDateTimeSentChanging(value);
                    this._DateTimeSent = value;
                    this.SendPropertyChanged("DateTimeSent");
                    this.OnDateTimeSentChanged();
                }
            }
        }

        public virtual int Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

        public virtual string Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }

        public virtual long? CanceledByMark
        {
            get
            {
                return this._CanceledByMark;
            }
            set
            {
                if (this._CanceledByMark != value)
                {
                    this.OnCanceledByMarkChanging(value);
                    this._CanceledByMark = value;
                    this.SendPropertyChanged("CanceledByMark");
                    this.OnCanceledByMarkChanged();
                }
            }
        }

        public virtual long? CancelationMark
        {
            get
            {
                return this._CancelationMark;
            }
            set
            {
                if (this._CancelationMark != value)
                {
                    this.OnCancelationMarkChanging(value);
                    this._CancelationMark = value;
                    this.SendPropertyChanged("CancelationMark");
                    this.OnCancelationMarkChanged();
                }
            }
        }

        public virtual string Errors
        {
            get
            {
                return this._Errors;
            }
            set
            {
                if (this._Errors != value)
                {
                    this.OnErrorsChanging(value);
                    this._Errors = value;
                    this.SendPropertyChanged("Errors");
                    this.OnErrorsChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnMyDataInvoiceIdChanging(System.Guid value);
        
        partial void OnMyDataInvoiceIdChanged();
        partial void OnUidChanging(string value);
        
        partial void OnUidChanged();
        partial void OnMarkChanging(long? value);
        
        partial void OnMarkChanged();
        partial void OnInvoiceIdChanging(System.Guid value);
        
        partial void OnInvoiceIdChanged();
        partial void OnDateTimeSentChanging(System.DateTime? value);
        
        partial void OnDateTimeSentChanged();
        partial void OnStatusChanging(int value);
        
        partial void OnStatusChanged();
        partial void OnDataChanging(string value);
        
        partial void OnDataChanged();
        partial void OnCanceledByMarkChanging(long? value);
        
        partial void OnCanceledByMarkChanged();
        partial void OnCancelationMarkChanging(long? value);
        
        partial void OnCancelationMarkChanged();
        partial void OnErrorsChanging(string value);
        
        partial void OnErrorsChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

    public partial class Country : EntityBase, INotifyPropertyChanged {

        private System.Guid _CountryId;

        private string _CountryCode;

        private string _DisplayMember;

        private bool _IsEu;

        public Country()
        {
            OnCreated();
        }

        public virtual System.Guid CountryId
        {
            get
            {
                return this._CountryId;
            }
            set
            {
                if (this._CountryId != value)
                {
                    this.OnCountryIdChanging(value);
                    this._CountryId = value;
                    this.SendPropertyChanged("CountryId");
                    this.OnCountryIdChanged();
                }
            }
        }

        public virtual string CountryCode
        {
            get
            {
                return this._CountryCode;
            }
            set
            {
                if (this._CountryCode != value)
                {
                    this.OnCountryCodeChanging(value);
                    this._CountryCode = value;
                    this.SendPropertyChanged("CountryCode");
                    this.OnCountryCodeChanged();
                }
            }
        }

        public virtual string DisplayMember
        {
            get
            {
                return this._DisplayMember;
            }
            set
            {
                if (this._DisplayMember != value)
                {
                    this.OnDisplayMemberChanging(value);
                    this._DisplayMember = value;
                    this.SendPropertyChanged("DisplayMember");
                    this.OnDisplayMemberChanged();
                }
            }
        }

        public virtual bool IsEu
        {
            get
            {
                return this._IsEu;
            }
            set
            {
                if (this._IsEu != value)
                {
                    this.OnIsEuChanging(value);
                    this._IsEu = value;
                    this.SendPropertyChanged("IsEu");
                    this.OnIsEuChanged();
                }
            }
        }
    
        #region Extensibility Method Definitions

        partial void OnCreated();
        partial void OnCountryIdChanging(System.Guid value);
        
        partial void OnCountryIdChanged();
        partial void OnCountryCodeChanging(string value);
        
        partial void OnCountryCodeChanged();
        partial void OnDisplayMemberChanging(string value);
        
        partial void OnDisplayMemberChanged();
        partial void OnIsEuChanging(bool value);
        
        partial void OnIsEuChanged();
        
        #endregion
        #region INotifyPropertyChanged Members

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

        #endregion
    }

}

namespace ASFuelControl.Data
{
    public partial class DatabaseModelMetadataSource : FluentMetadataSource
    {
        protected override void SetContainerSettings(MetadataContainer container)
        {
            container.Name = "DatabaseModel";
            container.DefaultNamespace = "ASFuelControl.Data";
            container.DefaultMapping.NullForeignKey = true;
            OnSetContainerSettings(container);
        }
        protected override IList<MappingConfiguration> PrepareMapping()
        {
            List<MappingConfiguration> mappingConfigurations = new List<MappingConfiguration>();
            mappingConfigurations.Add(this.GetVehicleMappingConfiguration());
            mappingConfigurations.Add(this.GetUsagePeriodMappingConfiguration());
            mappingConfigurations.Add(this.GetTraderMappingConfiguration());
            mappingConfigurations.Add(this.GetTitrimetryLevelMappingConfiguration());
            mappingConfigurations.Add(this.GetTitrimetryMappingConfiguration());
            mappingConfigurations.Add(this.GetTankUsagePeriodMappingConfiguration());
            mappingConfigurations.Add(this.GetTankSettingMappingConfiguration());
            mappingConfigurations.Add(this.GetTankSaleMappingConfiguration());
            mappingConfigurations.Add(this.GetTankPriceMappingConfiguration());
            mappingConfigurations.Add(this.GetTankFillingMappingConfiguration());
            mappingConfigurations.Add(this.GetTankMappingConfiguration());
            mappingConfigurations.Add(this.GetSystemEventDatumMappingConfiguration());
            mappingConfigurations.Add(this.GetSystemEventMappingConfiguration());
            mappingConfigurations.Add(this.GetSendLogMappingConfiguration());
            mappingConfigurations.Add(this.GetSalesTransactionMappingConfiguration());
            mappingConfigurations.Add(this.GetPriceListTimeSpanMappingConfiguration());
            mappingConfigurations.Add(this.GetPriceListMappingConfiguration());
            mappingConfigurations.Add(this.GetPendingSendMappingConfiguration());
            mappingConfigurations.Add(this.GetOptionMappingConfiguration());
            mappingConfigurations.Add(this.GetNozzleUsagePeriodMappingConfiguration());
            mappingConfigurations.Add(this.GetNozzlePriceListMappingConfiguration());
            mappingConfigurations.Add(this.GetNozzleFlowMappingConfiguration());
            mappingConfigurations.Add(this.GetNozzleMappingConfiguration());
            mappingConfigurations.Add(this.GetNormalizationMappingConfiguration());
            mappingConfigurations.Add(this.GetInvoiceTypeMappingConfiguration());
            mappingConfigurations.Add(this.GetInvoiceRelationMappingConfiguration());
            mappingConfigurations.Add(this.GetInvoicePrintMappingConfiguration());
            mappingConfigurations.Add(this.GetInvoiceLineMappingConfiguration());
            mappingConfigurations.Add(this.GetInvoiceFormMappingConfiguration());
            mappingConfigurations.Add(this.GetInvoiceMappingConfiguration());
            mappingConfigurations.Add(this.GetFuelTypePriceMappingConfiguration());
            mappingConfigurations.Add(this.GetFuelTypeMappingConfiguration());
            mappingConfigurations.Add(this.GetDispenserTypeMappingConfiguration());
            mappingConfigurations.Add(this.GetDispenserSettingMappingConfiguration());
            mappingConfigurations.Add(this.GetDispenserProtocolMappingConfiguration());
            mappingConfigurations.Add(this.GetDispenserMappingConfiguration());
            mappingConfigurations.Add(this.GetCommunicationControllerMappingConfiguration());
            mappingConfigurations.Add(this.GetBalanceMappingConfiguration());
            mappingConfigurations.Add(this.GetAtgProbeTypeMappingConfiguration());
            mappingConfigurations.Add(this.GetAtgProbeProtocolMappingConfiguration());
            mappingConfigurations.Add(this.GetApplicationUserLoggonMappingConfiguration());
            mappingConfigurations.Add(this.GetApplicationUserMappingConfiguration());
            mappingConfigurations.Add(this.GetAlertDefinitionMappingConfiguration());
            mappingConfigurations.Add(this.GetTankFillingViewMappingConfiguration());
            mappingConfigurations.Add(this.GetSalesViewMappingConfiguration());
            mappingConfigurations.Add(this.GetShiftMappingConfiguration());
            mappingConfigurations.Add(this.GetInvoiceGroupViewMappingConfiguration());
            mappingConfigurations.Add(this.GetTankLevelStartViewMappingConfiguration());
            mappingConfigurations.Add(this.GetTankLevelEndViewMappingConfiguration());
            mappingConfigurations.Add(this.GetTankFillingInvoiceViewMappingConfiguration());
            mappingConfigurations.Add(this.GetInvoicePrintViewMappingConfiguration());
            mappingConfigurations.Add(this.GetTankSaleViewMappingConfiguration());
            mappingConfigurations.Add(this.GetOutdoorPaymentTerminalTimeScheduleMappingConfiguration());
            mappingConfigurations.Add(this.GetOutdoorPaymentTerminalScheduleMappingConfiguration());
            mappingConfigurations.Add(this.GetOutdoorPaymentTerminalNozzleMappingConfiguration());
            mappingConfigurations.Add(this.GetOutdoorPaymentTerminalMappingConfiguration());
            mappingConfigurations.Add(this.GetOutdoorPaymentTerminalControllerMappingConfiguration());
            mappingConfigurations.Add(this.GetTankCheckMappingConfiguration());
            mappingConfigurations.Add(this.GetChangeLogMappingConfiguration());
            mappingConfigurations.Add(this.GetSaleDataViewMappingConfiguration());
            mappingConfigurations.Add(this.GetDeviceSettingMappingConfiguration());
            mappingConfigurations.Add(this.GetFinancialTransactionMappingConfiguration());
            mappingConfigurations.Add(this.GetOilCompanyMappingConfiguration());
            mappingConfigurations.Add(this.GetFleetManagmentScheduleMappingConfiguration());
            mappingConfigurations.Add(this.GetFleetManagmentCotrollerMappingConfiguration());
            mappingConfigurations.Add(this.GetFleetManagerDispenserMappingConfiguration());
            mappingConfigurations.Add(this.GetInvoiceCatalogViewMappingConfiguration());
            mappingConfigurations.Add(this.GetFinTransactionMappingConfiguration());
            mappingConfigurations.Add(this.GetInvoiceTypeTransformMappingConfiguration());
            mappingConfigurations.Add(this.GetInvoiceLineRelationMappingConfiguration());
            mappingConfigurations.Add(this.GetMyDataInvoiceMappingConfiguration());
            mappingConfigurations.Add(this.GetCountryMappingConfiguration());
         
            OnPrepareMapping(mappingConfigurations);
            return mappingConfigurations;
        }
        
        #region Extensibility Method Definitions
        partial void OnSetContainerSettings(MetadataContainer container);
        partial void OnPrepareMapping(List<MappingConfiguration> mappingConfigurations);
        
        #endregion
    }

#region Vehicle Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Vehicle> GetVehicleMappingConfiguration()
        {
            MappingConfiguration<Vehicle> configuration = this.GetVehicleClassConfiguration();
            this.PrepareVehicleConfigurations(configuration);
            this.OnPrepareVehicleConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Vehicle> GetVehicleClassConfiguration()
        {
            MappingConfiguration<Vehicle> configuration = new MappingConfiguration<Vehicle>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Vehicle");
            return configuration;
        }
	
        public void PrepareVehicleConfigurations(MappingConfiguration<Vehicle> configuration)
        {
            configuration.HasProperty(x => x.VehicleId).ToColumn(@"VehicleId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_VehicleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.PlateNumber).ToColumn(@"PlateNumber").HasFieldName(@"_PlateNumber").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(20).IsUnicode();
            configuration.HasProperty(x => x.TraderId).ToColumn(@"TraderId").HasFieldName(@"_TraderId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.CardId).ToColumn(@"CardId").HasFieldName(@"_CardId").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasAssociation<Trader>(x => x.Trader).HasFieldName(@"_Trader").WithOpposite(op => op.Vehicles).HasConstraint((x, y) =>  x.TraderId == y.TraderId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Invoice>(x => x.Invoices).HasFieldName(@"_Invoices").WithOpposite(op => op.Vehicle).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.VehicleId == y.VehicleId);
        }

        partial void OnPrepareVehicleConfigurations(MappingConfiguration<Vehicle> configuration);
    }

#endregion

#region UsagePeriod Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<UsagePeriod> GetUsagePeriodMappingConfiguration()
        {
            MappingConfiguration<UsagePeriod> configuration = this.GetUsagePeriodClassConfiguration();
            this.PrepareUsagePeriodConfigurations(configuration);
            this.OnPrepareUsagePeriodConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<UsagePeriod> GetUsagePeriodClassConfiguration()
        {
            MappingConfiguration<UsagePeriod> configuration = new MappingConfiguration<UsagePeriod>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.UsagePeriod");
            return configuration;
        }
	
        public void PrepareUsagePeriodConfigurations(MappingConfiguration<UsagePeriod> configuration)
        {
            configuration.HasProperty(x => x.UsagePeriodId).ToColumn(@"UsagePeriodId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_UsagePeriodId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.PeriodStart).ToColumn(@"PeriodStart").HasFieldName(@"_PeriodStart").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.PeriodEnd).ToColumn(@"PeriodEnd").HasFieldName(@"_PeriodEnd").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.IsLocked).ToColumn(@"IsLocked").HasFieldName(@"_IsLocked").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasAssociation<TankUsagePeriod>(x => x.TankUsagePeriods).HasFieldName(@"_TankUsagePeriods").WithOpposite(op => op.UsagePeriod).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.UsagePeriodId == y.UsagePeriodId);
            configuration.HasAssociation<TankFilling>(x => x.TankFillings).HasFieldName(@"_TankFillings").WithOpposite(op => op.UsagePeriod).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.UsagePeriodId == y.UsagePeriodId);
            configuration.HasAssociation<SalesTransaction>(x => x.SalesTransactions).HasFieldName(@"_SalesTransactions").WithOpposite(op => op.UsagePeriod).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.UsagePeriodId == y.UsagePeriodId);
            configuration.HasAssociation<NozzleUsagePeriod>(x => x.NozzleUsagePeriods).HasFieldName(@"_NozzleUsagePeriods").WithOpposite(op => op.UsagePeriod).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.UsagePeriodId == y.UsagePeriodId);
        }

        partial void OnPrepareUsagePeriodConfigurations(MappingConfiguration<UsagePeriod> configuration);
    }

#endregion

#region Trader Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Trader> GetTraderMappingConfiguration()
        {
            MappingConfiguration<Trader> configuration = this.GetTraderClassConfiguration();
            this.PrepareTraderConfigurations(configuration);
            this.OnPrepareTraderConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Trader> GetTraderClassConfiguration()
        {
            MappingConfiguration<Trader> configuration = new MappingConfiguration<Trader>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Trader");
            return configuration;
        }
	
        public void PrepareTraderConfigurations(MappingConfiguration<Trader> configuration)
        {
            configuration.HasProperty(x => x.TraderId).ToColumn(@"TraderId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_TraderId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Name).ToColumn(@"Name").HasFieldName(@"_Name").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.TaxRegistrationNumber).ToColumn(@"TaxRegistrationNumber").HasFieldName(@"_TaxRegistrationNumber").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(40).IsUnicode();
            configuration.HasProperty(x => x.TaxRegistrationOffice).ToColumn(@"TaxRegistrationOffice").HasFieldName(@"_TaxRegistrationOffice").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.Address).ToColumn(@"Address").HasFieldName(@"_Address").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.City).ToColumn(@"City").HasFieldName(@"_City").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.Phone1).ToColumn(@"Phone1").HasFieldName(@"_Phone1").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(30).IsUnicode();
            configuration.HasProperty(x => x.Phone2).ToColumn(@"Phone2").HasFieldName(@"_Phone2").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(30).IsUnicode();
            configuration.HasProperty(x => x.Fax).ToColumn(@"Fax").HasFieldName(@"_Fax").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(30).IsUnicode();
            configuration.HasProperty(x => x.Email).ToColumn(@"Email").HasFieldName(@"_Email").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.Website).ToColumn(@"website").HasFieldName(@"_Website").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.InvoiceTypeId).ToColumn(@"InvoiceTypeId").HasFieldName(@"_InvoiceTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.PriceListId).ToColumn(@"PriceListId").HasFieldName(@"_PriceListId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.IsCustomer).ToColumn(@"IsCustomer").HasFieldName(@"_IsCustomer").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.IsSupplier).ToColumn(@"IsSupplier").HasFieldName(@"_IsSupplier").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.VatExemption).ToColumn(@"VatExemption").HasFieldName(@"_VatExemption").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.PaymentType).ToColumn(@"PaymentType").HasFieldName(@"_PaymentType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.VatExemptionReason).ToColumn(@"VatExemptionReason").HasFieldName(@"_VatExemptionReason").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(500).IsUnicode();
            configuration.HasProperty(x => x.Occupation).ToColumn(@"Occupation").HasFieldName(@"_Occupation").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(150).IsUnicode();
            configuration.HasProperty(x => x.SupplyNumber).ToColumn(@"SupplyNumber").HasFieldName(@"_SupplyNumber").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.PrintDebtOnInvoice).ToColumn(@"PrintDebtOnInvoice").HasFieldName(@"_PrintDebtOnInvoice").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.DeliveryAddress).ToColumn(@"DeliveryAddress").HasFieldName(@"_DeliveryAddress").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(150).IsUnicode();
            configuration.HasProperty(x => x.Country).ToColumn(@"Country").HasFieldName(@"_Country").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(50).IsUnicode();
            configuration.HasProperty(x => x.ZipCode).ToColumn(@"ZipCode").HasFieldName(@"_ZipCode").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(50).IsUnicode();
            configuration.HasAssociation<Vehicle>(x => x.Vehicles).HasFieldName(@"_Vehicles").WithOpposite(op => op.Trader).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TraderId == y.TraderId);
            configuration.HasAssociation<InvoiceType>(x => x.InvoiceType).HasFieldName(@"_InvoiceType").WithOpposite(op => op.Traders).HasConstraint((x, y) =>  x.InvoiceTypeId == y.InvoiceTypeId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<PriceList>(x => x.PriceList).HasFieldName(@"_PriceList").WithOpposite(op => op.Traders).HasConstraint((x, y) =>  x.PriceListId == y.PriceListId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Invoice>(x => x.Invoices).HasFieldName(@"_Invoices").WithOpposite(op => op.Trader).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TraderId == y.TraderId);
            configuration.HasAssociation<FinTransaction>(x => x.FinTransactions).HasFieldName(@"_FinTransactions").WithOpposite(op => op.Trader).HasConstraint((x, y) =>  x.TraderId == y.TraderId);
        }

        partial void OnPrepareTraderConfigurations(MappingConfiguration<Trader> configuration);
    }

#endregion

#region TitrimetryLevel Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TitrimetryLevel> GetTitrimetryLevelMappingConfiguration()
        {
            MappingConfiguration<TitrimetryLevel> configuration = this.GetTitrimetryLevelClassConfiguration();
            this.PrepareTitrimetryLevelConfigurations(configuration);
            this.OnPrepareTitrimetryLevelConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TitrimetryLevel> GetTitrimetryLevelClassConfiguration()
        {
            MappingConfiguration<TitrimetryLevel> configuration = new MappingConfiguration<TitrimetryLevel>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TitrimetryLevel");
            return configuration;
        }
	
        public void PrepareTitrimetryLevelConfigurations(MappingConfiguration<TitrimetryLevel> configuration)
        {
            configuration.HasProperty(x => x.TitrimetryLevelId).ToColumn(@"TitrimetryLevelId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_TitrimetryLevelId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TitrimetryId).ToColumn(@"TitrimetryId").HasFieldName(@"_TitrimetryId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.Height).ToColumn(@"Height").HasFieldName(@"_Height").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.Volume).ToColumn(@"Volume").HasFieldName(@"_Volume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.UncertaintyVolume).ToColumn(@"UncertaintyVolume").HasFieldName(@"_UncertaintyVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.UncertaintyPercent).ToColumn(@"UncertaintyPercent").HasFieldName(@"_UncertaintyPercent").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
            configuration.HasAssociation<Titrimetry>(x => x.Titrimetry).HasFieldName(@"_Titrimetry").WithOpposite(op => op.TitrimetryLevels).HasConstraint((x, y) =>  x.TitrimetryId == y.TitrimetryId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareTitrimetryLevelConfigurations(MappingConfiguration<TitrimetryLevel> configuration);
    }

#endregion

#region Titrimetry Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Titrimetry> GetTitrimetryMappingConfiguration()
        {
            MappingConfiguration<Titrimetry> configuration = this.GetTitrimetryClassConfiguration();
            this.PrepareTitrimetryConfigurations(configuration);
            this.OnPrepareTitrimetryConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Titrimetry> GetTitrimetryClassConfiguration()
        {
            MappingConfiguration<Titrimetry> configuration = new MappingConfiguration<Titrimetry>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Titrimetry");
            return configuration;
        }
	
        public void PrepareTitrimetryConfigurations(MappingConfiguration<Titrimetry> configuration)
        {
            configuration.HasProperty(x => x.TitrimetryId).ToColumn(@"TitrimetryId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_TitrimetryId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.TitrationDate).ToColumn(@"TitrationDate").HasFieldName(@"_TitrationDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.PrintDate).ToColumn(@"PrintDate").HasFieldName(@"_PrintDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.DocumentSign).ToColumn(@"DocumentSign").HasFieldName(@"_DocumentSign").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.UncertaintyLevel).ToColumn(@"UncertaintyLevel").HasFieldName(@"_UncertaintyLevel").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasAssociation<TitrimetryLevel>(x => x.TitrimetryLevels).HasFieldName(@"_TitrimetryLevels").WithOpposite(op => op.Titrimetry).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TitrimetryId == y.TitrimetryId);
            configuration.HasAssociation<Tank>(x => x.Tank).HasFieldName(@"_Tank").WithOpposite(op => op.Titrimetries).HasConstraint((x, y) =>  x.TankId == y.TankId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareTitrimetryConfigurations(MappingConfiguration<Titrimetry> configuration);
    }

#endregion

#region TankUsagePeriod Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TankUsagePeriod> GetTankUsagePeriodMappingConfiguration()
        {
            MappingConfiguration<TankUsagePeriod> configuration = this.GetTankUsagePeriodClassConfiguration();
            this.PrepareTankUsagePeriodConfigurations(configuration);
            this.OnPrepareTankUsagePeriodConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TankUsagePeriod> GetTankUsagePeriodClassConfiguration()
        {
            MappingConfiguration<TankUsagePeriod> configuration = new MappingConfiguration<TankUsagePeriod>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TankUsagePeriod");
            return configuration;
        }
	
        public void PrepareTankUsagePeriodConfigurations(MappingConfiguration<TankUsagePeriod> configuration)
        {
            configuration.HasProperty(x => x.TankUsagePeriodId).ToColumn(@"TankUsagePeriodId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_TankUsagePeriodId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.UsagePeriodId).ToColumn(@"UsagePeriodId").HasFieldName(@"_UsagePeriodId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.MeasurementDateTime).ToColumn(@"MeasurementDateTime").HasFieldName(@"_MeasurementDateTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.ExpirationDate).ToColumn(@"ExpirationDate").HasFieldName(@"_ExpirationDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.TotalVolume).ToColumn(@"TotalVolume").HasFieldName(@"_TotalVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.CRC).ToColumn(@"CRC").HasFieldName(@"_CRC").WithOpenAccessType(OpenAccessType.Int64).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bigint").IsNotNullable();
            configuration.HasAssociation<UsagePeriod>(x => x.UsagePeriod).HasFieldName(@"_UsagePeriod").WithOpposite(op => op.TankUsagePeriods).HasConstraint((x, y) =>  x.UsagePeriodId == y.UsagePeriodId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Tank>(x => x.Tank).HasFieldName(@"_Tank").WithOpposite(op => op.TankUsagePeriods).HasConstraint((x, y) =>  x.TankId == y.TankId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareTankUsagePeriodConfigurations(MappingConfiguration<TankUsagePeriod> configuration);
    }

#endregion

#region TankSetting Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TankSetting> GetTankSettingMappingConfiguration()
        {
            MappingConfiguration<TankSetting> configuration = this.GetTankSettingClassConfiguration();
            this.PrepareTankSettingConfigurations(configuration);
            this.OnPrepareTankSettingConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TankSetting> GetTankSettingClassConfiguration()
        {
            MappingConfiguration<TankSetting> configuration = new MappingConfiguration<TankSetting>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TankSetting");
            return configuration;
        }
	
        public void PrepareTankSettingConfigurations(MappingConfiguration<TankSetting> configuration)
        {
            configuration.HasProperty(x => x.TankSettingId).ToColumn(@"TankSettingId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_TankSettingId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.SettingKey).ToColumn(@"SettingKey").HasFieldName(@"_SettingKey").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.SettingValue).ToColumn(@"SettingValue").HasFieldName(@"_SettingValue").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.Description).ToColumn(@"Description").HasFieldName(@"_Description").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasAssociation<Tank>(x => x.Tank).HasFieldName(@"_Tank").WithOpposite(op => op.TankSettings).HasConstraint((x, y) =>  x.TankId == y.TankId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareTankSettingConfigurations(MappingConfiguration<TankSetting> configuration);
    }

#endregion

#region TankSale Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TankSale> GetTankSaleMappingConfiguration()
        {
            MappingConfiguration<TankSale> configuration = this.GetTankSaleClassConfiguration();
            this.PrepareTankSaleConfigurations(configuration);
            this.OnPrepareTankSaleConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TankSale> GetTankSaleClassConfiguration()
        {
            MappingConfiguration<TankSale> configuration = new MappingConfiguration<TankSale>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TankSale");
            return configuration;
        }
	
        public void PrepareTankSaleConfigurations(MappingConfiguration<TankSale> configuration)
        {
            configuration.HasProperty(x => x.TankSaleId).ToColumn(@"TankSaleId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_TankSaleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.SalesTransactionId).ToColumn(@"SalesTransactionId").HasFieldName(@"_SalesTransactionId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.StartVolume).ToColumn(@"StartVolume").HasFieldName(@"_StartVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.EndVolume).ToColumn(@"EndVolume").HasFieldName(@"_EndVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.StartVolumeNormalized).ToColumn(@"StartVolumeNormalized").HasFieldName(@"_StartVolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.EndVolumeNormalized).ToColumn(@"EndVolumeNormalized").HasFieldName(@"_EndVolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.StartTemperature).ToColumn(@"StartTemperature").HasFieldName(@"_StartTemperature").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.EndTemperature).ToColumn(@"EndTemperature").HasFieldName(@"_EndTemperature").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.CRC).ToColumn(@"CRC").HasFieldName(@"_CRC").WithOpenAccessType(OpenAccessType.Int64).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bigint").IsNotNullable();
            configuration.HasProperty(x => x.StartLevel).ToColumn(@"StartLevel").HasFieldName(@"_StartLevel").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.EndLevel).ToColumn(@"EndLevel").HasFieldName(@"_EndLevel").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.FuelDensity).ToColumn(@"FuelDensity").HasFieldName(@"_FuelDensity").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasAssociation<SalesTransaction>(x => x.SalesTransaction).HasFieldName(@"_SalesTransaction").WithOpposite(op => op.TankSales).HasConstraint((x, y) =>  x.SalesTransactionId == y.SalesTransactionId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Tank>(x => x.Tank).HasFieldName(@"_Tank").WithOpposite(op => op.TankSales).HasConstraint((x, y) =>  x.TankId == y.TankId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareTankSaleConfigurations(MappingConfiguration<TankSale> configuration);
    }

#endregion

#region TankPrice Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TankPrice> GetTankPriceMappingConfiguration()
        {
            MappingConfiguration<TankPrice> configuration = this.GetTankPriceClassConfiguration();
            this.PrepareTankPriceConfigurations(configuration);
            this.OnPrepareTankPriceConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TankPrice> GetTankPriceClassConfiguration()
        {
            MappingConfiguration<TankPrice> configuration = new MappingConfiguration<TankPrice>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TankPrice");
            return configuration;
        }
	
        public void PrepareTankPriceConfigurations(MappingConfiguration<TankPrice> configuration)
        {
            configuration.HasProperty(x => x.TankPriceId).ToColumn(@"TankPriceId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_TankPriceId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Price).ToColumn(@"Price").HasFieldName(@"_Price").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(10);
            configuration.HasProperty(x => x.ChangeDate).ToColumn(@"ChangeDate").HasFieldName(@"_ChangeDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.FuelDensity).ToColumn(@"FuelDensity").HasFieldName(@"_FuelDensity").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(4);
            configuration.HasAssociation<Tank>(x => x.Tank).HasFieldName(@"_Tank").WithOpposite(op => op.TankPrices).HasConstraint((x, y) =>  x.TankId == y.TankId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<TankFilling>(x => x.TankFillings).HasFieldName(@"_TankFillings").WithOpposite(op => op.TankPrice).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankPriceId == y.TankPriceId);
        }

        partial void OnPrepareTankPriceConfigurations(MappingConfiguration<TankPrice> configuration);
    }

#endregion

#region TankFilling Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TankFilling> GetTankFillingMappingConfiguration()
        {
            MappingConfiguration<TankFilling> configuration = this.GetTankFillingClassConfiguration();
            this.PrepareTankFillingConfigurations(configuration);
            this.OnPrepareTankFillingConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TankFilling> GetTankFillingClassConfiguration()
        {
            MappingConfiguration<TankFilling> configuration = new MappingConfiguration<TankFilling>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TankFilling");
            return configuration;
        }
	
        public void PrepareTankFillingConfigurations(MappingConfiguration<TankFilling> configuration)
        {
            configuration.HasProperty(x => x.TankFillingId).ToColumn(@"TankFillingId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_TankFillingId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.UsagePeriodId).ToColumn(@"UsagePeriodId").HasFieldName(@"_UsagePeriodId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TankPriceId).ToColumn(@"TankPriceId").HasFieldName(@"_TankPriceId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TransactionTime).ToColumn(@"TransactionTime").HasFieldName(@"_TransactionTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.Volume).ToColumn(@"Volume").HasFieldName(@"_Volume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.VolumeNormalized).ToColumn(@"VolumeNormalized").HasFieldName(@"_VolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(8);
            configuration.HasProperty(x => x.TankTemperatureStart).ToColumn(@"TankTemperatureStart").HasFieldName(@"_TankTemperatureStart").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(4);
            configuration.HasProperty(x => x.TankTemperatureEnd).ToColumn(@"TankTemperatureEnd").HasFieldName(@"_TankTemperatureEnd").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.IsLocked).ToColumn(@"IsLocked").HasFieldName(@"_IsLocked").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.CRC).ToColumn(@"CRC").HasFieldName(@"_CRC").WithOpenAccessType(OpenAccessType.Int64).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bigint").IsNotNullable();
            configuration.HasProperty(x => x.TransactionTimeEnd).ToColumn(@"TransactionTimeEnd").HasFieldName(@"_TransactionTimeEnd").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.LevelStart).ToColumn(@"LevelStart").HasFieldName(@"_LevelStart").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.LevelEnd).ToColumn(@"LevelEnd").HasFieldName(@"_LevelEnd").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.FuelDensity).ToColumn(@"FuelDensity").HasFieldName(@"_FuelDensity").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.VolumeReal).ToColumn(@"VolumeReal").HasFieldName(@"_VolumeReal").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.VolumeRealNormalized).ToColumn(@"VolumeRealNormalized").HasFieldName(@"_VolumeRealNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.ApplicationUserId).ToColumn(@"ApplicationUserId").HasFieldName(@"_ApplicationUserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.SentDateTime).ToColumn(@"SentDateTime").HasFieldName(@"_SentDateTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.ResponseCode).ToColumn(@"ResponseCode").HasFieldName(@"_ResponseCode").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(500).IsUnicode();
            configuration.HasProperty(x => x.SignSignature).ToColumn(@"SignSignature").HasFieldName(@"_SignSignature").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(255).IsUnicode();
            configuration.HasAssociation<UsagePeriod>(x => x.UsagePeriod).HasFieldName(@"_UsagePeriod").WithOpposite(op => op.TankFillings).HasConstraint((x, y) =>  x.UsagePeriodId == y.UsagePeriodId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<TankPrice>(x => x.TankPrice).HasFieldName(@"_TankPrice").WithOpposite(op => op.TankFillings).HasConstraint((x, y) =>  x.TankPriceId == y.TankPriceId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<ApplicationUser>(x => x.ApplicationUser).HasFieldName(@"_ApplicationUser").WithOpposite(op => op.TankFillings).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Tank>(x => x.Tank).HasFieldName(@"_Tank").WithOpposite(op => op.TankFillings).HasConstraint((x, y) =>  x.TankId == y.TankId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<InvoiceLine>(x => x.InvoiceLines).HasFieldName(@"_InvoiceLines").WithOpposite(op => op.TankFilling).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankFillingId == y.TankFillingId);
            configuration.HasAssociation<Balance>(x => x.Balances).HasFieldName(@"_Balances").WithOpposite(op => op.TankFilling).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankFillingId == y.LastFilling);
        }

        partial void OnPrepareTankFillingConfigurations(MappingConfiguration<TankFilling> configuration);
    }

#endregion

#region Tank Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Tank> GetTankMappingConfiguration()
        {
            MappingConfiguration<Tank> configuration = this.GetTankClassConfiguration();
            this.PrepareTankConfigurations(configuration);
            this.OnPrepareTankConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Tank> GetTankClassConfiguration()
        {
            MappingConfiguration<Tank> configuration = new MappingConfiguration<Tank>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Tank");
            return configuration;
        }
	
        public void PrepareTankConfigurations(MappingConfiguration<Tank> configuration)
        {
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.FuelTypeId).ToColumn(@"FuelTypeId").HasFieldName(@"_FuelTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TotalVolume).ToColumn(@"TotalVolume").HasFieldName(@"_TotalVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(2);
            configuration.HasProperty(x => x.OffsetVolume).ToColumn(@"OffsetVolume").HasFieldName(@"_OffsetVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(2);
            configuration.HasProperty(x => x.PhysicalState).ToColumn(@"PhysicalState").HasFieldName(@"_PhysicalState").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.Channel).ToColumn(@"Channel").HasFieldName(@"_Channel").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.Address).ToColumn(@"Address").HasFieldName(@"_Address").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.AtgProbeTypeId).ToColumn(@"AtgProbeTypeId").HasFieldName(@"_AtgProbeTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.CommunicationControllerId).ToColumn(@"CommunicationControllerId").HasFieldName(@"_CommunicationControllerId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.MaxWaterHeight).ToColumn(@"MaxWaterHeight").HasFieldName(@"_MaxWaterHeight").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(4);
            configuration.HasProperty(x => x.MinFuelHeight).ToColumn(@"MinFuelHeight").HasFieldName(@"_MinFuelHeight").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(4);
            configuration.HasProperty(x => x.MaxFuelHeight).ToColumn(@"MaxFuelHeight").HasFieldName(@"_MaxFuelHeight").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(4);
            configuration.HasProperty(x => x.TankNumber).ToColumn(@"TankNumber").HasFieldName(@"_TankNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.TankSerialNumber).ToColumn(@"TankSerialNumber").HasFieldName(@"_TankSerialNumber").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.FuelLevelBase).ToColumn(@"FuelLevel").HasFieldName(@"_FuelLevelBase").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.WaterLevelBase).ToColumn(@"WaterLevel").HasFieldName(@"_WaterLevelBase").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.Temperatire).ToColumn(@"Temperatire").HasFieldName(@"_Temperatire").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.OffestWater).ToColumn(@"OffestWater").HasFieldName(@"_OffestWater").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(2);
            configuration.HasProperty(x => x.IsVirtual).ToColumn(@"IsVirtual").HasFieldName(@"_IsVirtual").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.OrderLimit).ToColumn(@"OrderLimit").HasFieldName(@"_OrderLimit").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(19).HasScale(2);
            configuration.HasProperty(x => x.AlarmThreshold).ToColumn(@"AlarmThreshold").HasFieldName(@"_AlarmThreshold").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasAssociation<Titrimetry>(x => x.Titrimetries).HasFieldName(@"_Titrimetries").WithOpposite(op => op.Tank).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankId == y.TankId);
            configuration.HasAssociation<TankUsagePeriod>(x => x.TankUsagePeriods).HasFieldName(@"_TankUsagePeriods").WithOpposite(op => op.Tank).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankId == y.TankId);
            configuration.HasAssociation<TankSetting>(x => x.TankSettings).HasFieldName(@"_TankSettings").WithOpposite(op => op.Tank).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankId == y.TankId);
            configuration.HasAssociation<TankSale>(x => x.TankSales).HasFieldName(@"_TankSales").WithOpposite(op => op.Tank).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankId == y.TankId);
            configuration.HasAssociation<TankPrice>(x => x.TankPrices).HasFieldName(@"_TankPrices").WithOpposite(op => op.Tank).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankId == y.TankId);
            configuration.HasAssociation<TankFilling>(x => x.TankFillings).HasFieldName(@"_TankFillings").WithOpposite(op => op.Tank).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankId == y.TankId);
            configuration.HasAssociation<AtgProbeType>(x => x.AtgProbeType).HasFieldName(@"_AtgProbeType").WithOpposite(op => op.Tanks).HasConstraint((x, y) =>  x.AtgProbeTypeId == y.AtgProbeTypeId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<CommunicationController>(x => x.CommunicationController).HasFieldName(@"_CommunicationController").WithOpposite(op => op.Tanks).HasConstraint((x, y) =>  x.CommunicationControllerId == y.CommunicationControllerId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<FuelType>(x => x.FuelType).HasFieldName(@"_FuelType").WithOpposite(op => op.Tanks).HasConstraint((x, y) =>  x.FuelTypeId == y.FuelTypeId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<SystemEvent>(x => x.SystemEvents).HasFieldName(@"_SystemEvents").WithOpposite(op => op.Tank).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankId == y.TankId);
            configuration.HasAssociation<NozzleFlow>(x => x.NozzleFlows).HasFieldName(@"_NozzleFlows").WithOpposite(op => op.Tank).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankId == y.TankId);
            configuration.HasAssociation<InvoiceLine>(x => x.InvoiceLines).HasFieldName(@"_InvoiceLines").WithOpposite(op => op.Tank).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankId == y.TankId);
            configuration.HasAssociation<TankCheck>(x => x.TankChecks).HasFieldName(@"_TankChecks").WithOpposite(op => op.Tank).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.TankId == y.TankId);
        }

        partial void OnPrepareTankConfigurations(MappingConfiguration<Tank> configuration);
    }

#endregion

#region SystemEventDatum Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<SystemEventDatum> GetSystemEventDatumMappingConfiguration()
        {
            MappingConfiguration<SystemEventDatum> configuration = this.GetSystemEventDatumClassConfiguration();
            this.PrepareSystemEventDatumConfigurations(configuration);
            this.OnPrepareSystemEventDatumConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<SystemEventDatum> GetSystemEventDatumClassConfiguration()
        {
            MappingConfiguration<SystemEventDatum> configuration = new MappingConfiguration<SystemEventDatum>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.SystemEventData");
            return configuration;
        }
	
        public void PrepareSystemEventDatumConfigurations(MappingConfiguration<SystemEventDatum> configuration)
        {
            configuration.HasProperty(x => x.SystemEventDataId).ToColumn(@"SystemEventDataId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_SystemEventDataId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.SystemEventId).ToColumn(@"SystemEventId").HasFieldName(@"_SystemEventId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.PropertyName).ToColumn(@"PropertyName").HasFieldName(@"_PropertyName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.Value).ToColumn(@"Value").HasFieldName(@"_Value").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.IsAlertTrigger).ToColumn(@"IsAlertTrigger").HasFieldName(@"_IsAlertTrigger").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasAssociation<SystemEvent>(x => x.SystemEvent).HasFieldName(@"_SystemEvent").WithOpposite(op => op.SystemEventData).HasConstraint((x, y) =>  x.SystemEventId == y.EventId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareSystemEventDatumConfigurations(MappingConfiguration<SystemEventDatum> configuration);
    }

#endregion

#region SystemEvent Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<SystemEvent> GetSystemEventMappingConfiguration()
        {
            MappingConfiguration<SystemEvent> configuration = this.GetSystemEventClassConfiguration();
            this.PrepareSystemEventConfigurations(configuration);
            this.OnPrepareSystemEventConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<SystemEvent> GetSystemEventClassConfiguration()
        {
            MappingConfiguration<SystemEvent> configuration = new MappingConfiguration<SystemEvent>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.SystemEvent");
            return configuration;
        }
	
        public void PrepareSystemEventConfigurations(MappingConfiguration<SystemEvent> configuration)
        {
            configuration.HasProperty(x => x.EventId).ToColumn(@"EventId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_EventId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.EventType).ToColumn(@"EventType").HasFieldName(@"_EventType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.Message).ToColumn(@"Message").HasFieldName(@"_Message").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.EventDate).ToColumn(@"EventDate").HasFieldName(@"_EventDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.NozzleId).ToColumn(@"NozzleId").HasFieldName(@"_NozzleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.DispenserId).ToColumn(@"DispenserId").HasFieldName(@"_DispenserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.AlertDefinitionId).ToColumn(@"AlertDefinitionId").HasFieldName(@"_AlertDefinitionId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.SentDate).ToColumn(@"SentDate").HasFieldName(@"_SentDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.ResolvedDate).ToColumn(@"ResolvedDate").HasFieldName(@"_ResolvedDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.ResolveMessage).ToColumn(@"ResolveMessage").HasFieldName(@"_ResolveMessage").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.CRC).ToColumn(@"CRC").HasFieldName(@"_CRC").WithOpenAccessType(OpenAccessType.Int64).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bigint").IsNotNullable();
            configuration.HasProperty(x => x.AlarmType).ToColumn(@"AlarmType").HasFieldName(@"_AlarmType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.PrintedDate).ToColumn(@"PrintedDate").HasFieldName(@"_PrintedDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.DocumentSign).ToColumn(@"DocumentSign").HasFieldName(@"_DocumentSign").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasAssociation<Tank>(x => x.Tank).HasFieldName(@"_Tank").WithOpposite(op => op.SystemEvents).HasConstraint((x, y) =>  x.TankId == y.TankId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<SystemEventDatum>(x => x.SystemEventData).HasFieldName(@"_SystemEventData").WithOpposite(op => op.SystemEvent).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.EventId == y.SystemEventId);
            configuration.HasAssociation<Dispenser>(x => x.Dispenser).HasFieldName(@"_Dispenser").WithOpposite(op => op.SystemEvents).HasConstraint((x, y) =>  x.DispenserId == y.DispenserId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<AlertDefinition>(x => x.AlertDefinition).HasFieldName(@"_AlertDefinition").WithOpposite(op => op.SystemEvents).HasConstraint((x, y) =>  x.AlertDefinitionId == y.AlertDefinitionId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Nozzle>(x => x.Nozzle).HasFieldName(@"_Nozzle").WithOpposite(op => op.SystemEvents).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareSystemEventConfigurations(MappingConfiguration<SystemEvent> configuration);
    }

#endregion

#region SendLog Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<SendLog> GetSendLogMappingConfiguration()
        {
            MappingConfiguration<SendLog> configuration = this.GetSendLogClassConfiguration();
            this.PrepareSendLogConfigurations(configuration);
            this.OnPrepareSendLogConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<SendLog> GetSendLogClassConfiguration()
        {
            MappingConfiguration<SendLog> configuration = new MappingConfiguration<SendLog>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.SendLog");
            return configuration;
        }
	
        public void PrepareSendLogConfigurations(MappingConfiguration<SendLog> configuration)
        {
            configuration.HasProperty(x => x.SendLogId).ToColumn(@"SendLogId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_SendLogId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.SendDate).ToColumn(@"SendDate").HasFieldName(@"_SendDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.Action).ToColumn(@"Action").HasFieldName(@"_Action").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(50).IsUnicode();
            configuration.HasProperty(x => x.SendData).ToColumn(@"SendData").HasFieldName(@"_SendData").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.SentStatus).ToColumn(@"SentStatus").HasFieldName(@"_SentStatus").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.LastSent).ToColumn(@"LastSent").HasFieldName(@"_LastSent").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.EntityIdentity).ToColumn(@"EntityIdentity").HasFieldName(@"_EntityIdentity").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
        }

        partial void OnPrepareSendLogConfigurations(MappingConfiguration<SendLog> configuration);
    }

#endregion

#region SalesTransaction Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<SalesTransaction> GetSalesTransactionMappingConfiguration()
        {
            MappingConfiguration<SalesTransaction> configuration = this.GetSalesTransactionClassConfiguration();
            this.PrepareSalesTransactionConfigurations(configuration);
            this.OnPrepareSalesTransactionConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<SalesTransaction> GetSalesTransactionClassConfiguration()
        {
            MappingConfiguration<SalesTransaction> configuration = new MappingConfiguration<SalesTransaction>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.SalesTransaction");
            return configuration;
        }
	
        public void PrepareSalesTransactionConfigurations(MappingConfiguration<SalesTransaction> configuration)
        {
            configuration.HasProperty(x => x.SalesTransactionId).ToColumn(@"SalesTransactionId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_SalesTransactionId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.UsagePeriodId).ToColumn(@"UsagePeriodId").HasFieldName(@"_UsagePeriodId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.IsLocked).ToColumn(@"IsLocked").HasFieldName(@"_IsLocked").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.CRC).ToColumn(@"CRC").HasFieldName(@"_CRC").WithOpenAccessType(OpenAccessType.Int64).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bigint").IsNotNullable();
            configuration.HasProperty(x => x.NozzleId).ToColumn(@"NozzleId").HasFieldName(@"_NozzleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TotalizerStart).ToColumn(@"TotalizerStart").HasFieldName(@"_TotalizerStart").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TotalizerEnd).ToColumn(@"TotalizerEnd").HasFieldName(@"_TotalizerEnd").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TransactionTimeStamp).ToColumn(@"TransactionTimeStamp").HasFieldName(@"_TransactionTimeStamp").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.Volume).ToColumn(@"Volume").HasFieldName(@"_Volume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.VolumeNormalized).ToColumn(@"VolumeNormalized").HasFieldName(@"_VolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TemperatureStart).ToColumn(@"TemperatureStart").HasFieldName(@"_TemperatureStart").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TemperatureEnd).ToColumn(@"TemperatureEnd").HasFieldName(@"_TemperatureEnd").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.UnitPrice).ToColumn(@"UnitPrice").HasFieldName(@"_UnitPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TotalPrice).ToColumn(@"TotalPrice").HasFieldName(@"_TotalPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.ApplicationUserId).ToColumn(@"ApplicationUserId").HasFieldName(@"_ApplicationUserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.SentDateTime).ToColumn(@"SentDateTime").HasFieldName(@"_SentDateTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.ResponseCode).ToColumn(@"ResponseCode").HasFieldName(@"_ResponseCode").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(500).IsUnicode();
            configuration.HasProperty(x => x.ShiftId).ToColumn(@"ShiftId").HasFieldName(@"_ShiftId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.IsErrorResolving).ToColumn(@"IsErrorResolving").HasFieldName(@"_IsErrorResolving").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.InvalidSale).ToColumn(@"InvalidSale").HasFieldName(@"_InvalidSale").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.DiscountPercentage).ToColumn(@"DiscountPercentage").HasFieldName(@"_DiscountPercentage").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(10).HasScale(3);
            configuration.HasAssociation<UsagePeriod>(x => x.UsagePeriod).HasFieldName(@"_UsagePeriod").WithOpposite(op => op.SalesTransactions).HasConstraint((x, y) =>  x.UsagePeriodId == y.UsagePeriodId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<TankSale>(x => x.TankSales).HasFieldName(@"_TankSales").WithOpposite(op => op.SalesTransaction).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.SalesTransactionId == y.SalesTransactionId);
            configuration.HasAssociation<ApplicationUser>(x => x.ApplicationUser).HasFieldName(@"_ApplicationUser").WithOpposite(op => op.SalesTransactions).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Nozzle>(x => x.Nozzle).HasFieldName(@"_Nozzle").WithOpposite(op => op.SalesTransactions).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<InvoiceLine>(x => x.InvoiceLines).HasFieldName(@"_InvoiceLines").WithOpposite(op => op.SalesTransaction).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.SalesTransactionId == y.SaleTransactionId);
            configuration.HasAssociation<Balance>(x => x.Balances).HasFieldName(@"_Balances").WithOpposite(op => op.SalesTransaction).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.SalesTransactionId == y.LastSale);
        }

        partial void OnPrepareSalesTransactionConfigurations(MappingConfiguration<SalesTransaction> configuration);
    }

#endregion

#region PriceListTimeSpan Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<PriceListTimeSpan> GetPriceListTimeSpanMappingConfiguration()
        {
            MappingConfiguration<PriceListTimeSpan> configuration = this.GetPriceListTimeSpanClassConfiguration();
            this.PreparePriceListTimeSpanConfigurations(configuration);
            this.OnPreparePriceListTimeSpanConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<PriceListTimeSpan> GetPriceListTimeSpanClassConfiguration()
        {
            MappingConfiguration<PriceListTimeSpan> configuration = new MappingConfiguration<PriceListTimeSpan>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.PriceListTimeSpan");
            return configuration;
        }
	
        public void PreparePriceListTimeSpanConfigurations(MappingConfiguration<PriceListTimeSpan> configuration)
        {
            configuration.HasProperty(x => x.PriceListTimeSpanId).ToColumn(@"PriceListTimeSpanId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_PriceListTimeSpanId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.FromTime).ToColumn(@"FromTime").HasFieldName(@"_FromTime").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.ToTime).ToColumn(@"ToTime").HasFieldName(@"_ToTime").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.PriceListId).ToColumn(@"PriceListId").HasFieldName(@"_PriceListId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasAssociation<PriceList>(x => x.PriceList).HasFieldName(@"_PriceList").WithOpposite(op => op.PriceListTimeSpans).HasConstraint((x, y) =>  x.PriceListId == y.PriceListId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPreparePriceListTimeSpanConfigurations(MappingConfiguration<PriceListTimeSpan> configuration);
    }

#endregion

#region PriceList Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<PriceList> GetPriceListMappingConfiguration()
        {
            MappingConfiguration<PriceList> configuration = this.GetPriceListClassConfiguration();
            this.PreparePriceListConfigurations(configuration);
            this.OnPreparePriceListConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<PriceList> GetPriceListClassConfiguration()
        {
            MappingConfiguration<PriceList> configuration = new MappingConfiguration<PriceList>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.PriceList");
            return configuration;
        }
	
        public void PreparePriceListConfigurations(MappingConfiguration<PriceList> configuration)
        {
            configuration.HasProperty(x => x.PriceListId).ToColumn(@"PriceListId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_PriceListId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Name).ToColumn(@"Name").HasFieldName(@"_Name").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.StartDate).ToColumn(@"StartDate").HasFieldName(@"_StartDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("date").IsNotNullable();
            configuration.HasProperty(x => x.EndDate).ToColumn(@"EndDate").HasFieldName(@"_EndDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.IsTraderPriceList).ToColumn(@"IsTraderPriceList").HasFieldName(@"_IsTraderPriceList").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasAssociation<Trader>(x => x.Traders).HasFieldName(@"_Traders").WithOpposite(op => op.PriceList).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.PriceListId == y.PriceListId);
            configuration.HasAssociation<PriceListTimeSpan>(x => x.PriceListTimeSpans).HasFieldName(@"_PriceListTimeSpans").WithOpposite(op => op.PriceList).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.PriceListId == y.PriceListId);
            configuration.HasAssociation<NozzlePriceList>(x => x.NozzlePriceLists).HasFieldName(@"_NozzlePriceLists").WithOpposite(op => op.PriceList).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.PriceListId == y.PriceListId);
        }

        partial void OnPreparePriceListConfigurations(MappingConfiguration<PriceList> configuration);
    }

#endregion

#region PendingSend Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<PendingSend> GetPendingSendMappingConfiguration()
        {
            MappingConfiguration<PendingSend> configuration = this.GetPendingSendClassConfiguration();
            this.PreparePendingSendConfigurations(configuration);
            this.OnPreparePendingSendConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<PendingSend> GetPendingSendClassConfiguration()
        {
            MappingConfiguration<PendingSend> configuration = new MappingConfiguration<PendingSend>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.PendingSend");
            return configuration;
        }
	
        public void PreparePendingSendConfigurations(MappingConfiguration<PendingSend> configuration)
        {
            configuration.HasProperty(x => x.PendingSendId).ToColumn(@"PendingSendId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_PendingSendId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.PendingData).ToColumn(@"PendingData").HasFieldName(@"_PendingData").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.DataType).ToColumn(@"DataType").HasFieldName(@"_DataType").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(500).IsUnicode();
            configuration.HasProperty(x => x.AssemblyFile).ToColumn(@"AssemblyFile").HasFieldName(@"_AssemblyFile").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(500).IsUnicode();
        }

        partial void OnPreparePendingSendConfigurations(MappingConfiguration<PendingSend> configuration);
    }

#endregion

#region Option Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Option> GetOptionMappingConfiguration()
        {
            MappingConfiguration<Option> configuration = this.GetOptionClassConfiguration();
            this.PrepareOptionConfigurations(configuration);
            this.OnPrepareOptionConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Option> GetOptionClassConfiguration()
        {
            MappingConfiguration<Option> configuration = new MappingConfiguration<Option>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Option");
            return configuration;
        }
	
        public void PrepareOptionConfigurations(MappingConfiguration<Option> configuration)
        {
            configuration.HasProperty(x => x.OptionId).ToColumn(@"OptionId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_OptionId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.OptionKey).ToColumn(@"OptionKey").HasFieldName(@"_OptionKey").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.OptionValue).ToColumn(@"OptionValue").HasFieldName(@"_OptionValue").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.Description).ToColumn(@"Description").HasFieldName(@"_Description").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
        }

        partial void OnPrepareOptionConfigurations(MappingConfiguration<Option> configuration);
    }

#endregion

#region NozzleUsagePeriod Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<NozzleUsagePeriod> GetNozzleUsagePeriodMappingConfiguration()
        {
            MappingConfiguration<NozzleUsagePeriod> configuration = this.GetNozzleUsagePeriodClassConfiguration();
            this.PrepareNozzleUsagePeriodConfigurations(configuration);
            this.OnPrepareNozzleUsagePeriodConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<NozzleUsagePeriod> GetNozzleUsagePeriodClassConfiguration()
        {
            MappingConfiguration<NozzleUsagePeriod> configuration = new MappingConfiguration<NozzleUsagePeriod>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.NozzleUsagePeriod");
            return configuration;
        }
	
        public void PrepareNozzleUsagePeriodConfigurations(MappingConfiguration<NozzleUsagePeriod> configuration)
        {
            configuration.HasProperty(x => x.NozzleUsagePeriodId).ToColumn(@"NozzleUsagePeriodId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_NozzleUsagePeriodId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.NozzleId).ToColumn(@"NozzleId").HasFieldName(@"_NozzleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.UsagePeriodId).ToColumn(@"UsagePeriodId").HasFieldName(@"_UsagePeriodId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.MeasurementDateTime).ToColumn(@"MeasurementDateTime").HasFieldName(@"_MeasurementDateTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.ExpirationDate).ToColumn(@"ExpirationDate").HasFieldName(@"_ExpirationDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.TotalVolume).ToColumn(@"TotalVolume").HasFieldName(@"_TotalVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.CRC).ToColumn(@"CRC").HasFieldName(@"_CRC").WithOpenAccessType(OpenAccessType.Int64).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bigint").IsNotNullable();
            configuration.HasAssociation<UsagePeriod>(x => x.UsagePeriod).HasFieldName(@"_UsagePeriod").WithOpposite(op => op.NozzleUsagePeriods).HasConstraint((x, y) =>  x.UsagePeriodId == y.UsagePeriodId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Nozzle>(x => x.Nozzle).HasFieldName(@"_Nozzle").WithOpposite(op => op.NozzleUsagePeriods).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareNozzleUsagePeriodConfigurations(MappingConfiguration<NozzleUsagePeriod> configuration);
    }

#endregion

#region NozzlePriceList Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<NozzlePriceList> GetNozzlePriceListMappingConfiguration()
        {
            MappingConfiguration<NozzlePriceList> configuration = this.GetNozzlePriceListClassConfiguration();
            this.PrepareNozzlePriceListConfigurations(configuration);
            this.OnPrepareNozzlePriceListConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<NozzlePriceList> GetNozzlePriceListClassConfiguration()
        {
            MappingConfiguration<NozzlePriceList> configuration = new MappingConfiguration<NozzlePriceList>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.NozzlePriceList");
            return configuration;
        }
	
        public void PrepareNozzlePriceListConfigurations(MappingConfiguration<NozzlePriceList> configuration)
        {
            configuration.HasProperty(x => x.NozzlePriceListId).ToColumn(@"NozzlePriceListId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_NozzlePriceListId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.PriceListId).ToColumn(@"PriceListId").HasFieldName(@"_PriceListId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.NozzleId).ToColumn(@"NozzleId").HasFieldName(@"_NozzleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.Discount).ToColumn(@"Discount").HasFieldName(@"_Discount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasAssociation<PriceList>(x => x.PriceList).HasFieldName(@"_PriceList").WithOpposite(op => op.NozzlePriceLists).HasConstraint((x, y) =>  x.PriceListId == y.PriceListId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Nozzle>(x => x.Nozzle).HasFieldName(@"_Nozzle").WithOpposite(op => op.NozzlePriceLists).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareNozzlePriceListConfigurations(MappingConfiguration<NozzlePriceList> configuration);
    }

#endregion

#region NozzleFlow Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<NozzleFlow> GetNozzleFlowMappingConfiguration()
        {
            MappingConfiguration<NozzleFlow> configuration = this.GetNozzleFlowClassConfiguration();
            this.PrepareNozzleFlowConfigurations(configuration);
            this.OnPrepareNozzleFlowConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<NozzleFlow> GetNozzleFlowClassConfiguration()
        {
            MappingConfiguration<NozzleFlow> configuration = new MappingConfiguration<NozzleFlow>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.NozzleFlow");
            return configuration;
        }
	
        public void PrepareNozzleFlowConfigurations(MappingConfiguration<NozzleFlow> configuration)
        {
            configuration.HasProperty(x => x.NozzleFlowId).ToColumn(@"NozzleFlowId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_NozzleFlowId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.NozzleId).ToColumn(@"NozzleId").HasFieldName(@"_NozzleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.FlowState).ToColumn(@"FlowState").HasFieldName(@"_FlowState").WithOpenAccessType(OpenAccessType.Int16).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("smallint").IsNotNullable();
            configuration.HasAssociation<Tank>(x => x.Tank).HasFieldName(@"_Tank").WithOpposite(op => op.NozzleFlows).HasConstraint((x, y) =>  x.TankId == y.TankId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Nozzle>(x => x.Nozzle).HasFieldName(@"_Nozzle").WithOpposite(op => op.NozzleFlows).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareNozzleFlowConfigurations(MappingConfiguration<NozzleFlow> configuration);
    }

#endregion

#region Nozzle Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Nozzle> GetNozzleMappingConfiguration()
        {
            MappingConfiguration<Nozzle> configuration = this.GetNozzleClassConfiguration();
            this.PrepareNozzleConfigurations(configuration);
            this.OnPrepareNozzleConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Nozzle> GetNozzleClassConfiguration()
        {
            MappingConfiguration<Nozzle> configuration = new MappingConfiguration<Nozzle>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Nozzle");
            return configuration;
        }
	
        public void PrepareNozzleConfigurations(MappingConfiguration<Nozzle> configuration)
        {
            configuration.HasProperty(x => x.NozzleId).ToColumn(@"NozzleId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_NozzleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.DispenserId).ToColumn(@"DispenserId").HasFieldName(@"_DispenserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TotalCounter).ToColumn(@"TotalCounter").HasFieldName(@"_TotalCounter").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.Channel).ToColumn(@"Channel").HasFieldName(@"_Channel").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.Address).ToColumn(@"Address").HasFieldName(@"_Address").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.Name).ToColumn(@"Name").HasFieldName(@"_Name").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.FuelTypeId).ToColumn(@"FuelTypeId").HasFieldName(@"_FuelTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.OrderId).ToColumn(@"OrderId").HasFieldName(@"_OrderId").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.NozzleState).ToColumn(@"NozzleState").HasFieldName(@"_NozzleState").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.SerialNumber).ToColumn(@"SerialNumber").HasFieldName(@"_SerialNumber").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(50).IsUnicode();
            configuration.HasProperty(x => x.OfficialNozzleNumber).ToColumn(@"OfficialNozzleNumber").HasFieldName(@"_OfficialNozzleNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.NozzleIndex).ToColumn(@"NozzleIndex").HasFieldName(@"_NozzleIndex").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasAssociation<SystemEvent>(x => x.SystemEvents).HasFieldName(@"_SystemEvents").WithOpposite(op => op.Nozzle).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId);
            configuration.HasAssociation<SalesTransaction>(x => x.SalesTransactions).HasFieldName(@"_SalesTransactions").WithOpposite(op => op.Nozzle).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId);
            configuration.HasAssociation<NozzleUsagePeriod>(x => x.NozzleUsagePeriods).HasFieldName(@"_NozzleUsagePeriods").WithOpposite(op => op.Nozzle).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId);
            configuration.HasAssociation<NozzlePriceList>(x => x.NozzlePriceLists).HasFieldName(@"_NozzlePriceLists").WithOpposite(op => op.Nozzle).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId);
            configuration.HasAssociation<NozzleFlow>(x => x.NozzleFlows).HasFieldName(@"_NozzleFlows").WithOpposite(op => op.Nozzle).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId);
            configuration.HasAssociation<Dispenser>(x => x.Dispenser).HasFieldName(@"_Dispenser").WithOpposite(op => op.Nozzles).HasConstraint((x, y) =>  x.DispenserId == y.DispenserId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<FuelType>(x => x.FuelType).HasFieldName(@"_FuelType").WithOpposite(op => op.Nozzles).HasConstraint((x, y) =>  x.FuelTypeId == y.FuelTypeId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<DispenserSetting>(x => x.DispenserSettings).HasFieldName(@"_DispenserSettings").WithOpposite(op => op.Nozzle).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId);
            configuration.HasAssociation<OutdoorPaymentTerminalNozzle>(x => x.OutdoorPaymentTerminalNozzles).HasFieldName(@"_OutdoorPaymentTerminalNozzles").WithOpposite(op => op.Nozzle).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId);
        }

        partial void OnPrepareNozzleConfigurations(MappingConfiguration<Nozzle> configuration);
    }

#endregion

#region Normalization Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Normalization> GetNormalizationMappingConfiguration()
        {
            MappingConfiguration<Normalization> configuration = this.GetNormalizationClassConfiguration();
            this.PrepareNormalizationConfigurations(configuration);
            this.OnPrepareNormalizationConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Normalization> GetNormalizationClassConfiguration()
        {
            MappingConfiguration<Normalization> configuration = new MappingConfiguration<Normalization>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Normalization");
            return configuration;
        }
	
        public void PrepareNormalizationConfigurations(MappingConfiguration<Normalization> configuration)
        {
            configuration.HasProperty(x => x.NormalizationId).ToColumn(@"NormalizationId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_NormalizationId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.FuelTypeId).ToColumn(@"FuelTypeId").HasFieldName(@"_FuelTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Density).ToColumn(@"Density").HasFieldName(@"_Density").WithOpenAccessType(OpenAccessType.Int64).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18);
            configuration.HasProperty(x => x.Temperature).ToColumn(@"Temperature").HasFieldName(@"_Temperature").WithOpenAccessType(OpenAccessType.Int64).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18);
            configuration.HasProperty(x => x.ThermalCoefficient).ToColumn(@"ThermalCoefficient").HasFieldName(@"_ThermalCoefficient").WithOpenAccessType(OpenAccessType.Int64).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18);
            configuration.HasAssociation<FuelType>(x => x.FuelType).HasFieldName(@"_FuelType").WithOpposite(op => op.Normalizations).HasConstraint((x, y) =>  x.FuelTypeId == y.FuelTypeId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareNormalizationConfigurations(MappingConfiguration<Normalization> configuration);
    }

#endregion

#region InvoiceType Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<InvoiceType> GetInvoiceTypeMappingConfiguration()
        {
            MappingConfiguration<InvoiceType> configuration = this.GetInvoiceTypeClassConfiguration();
            this.PrepareInvoiceTypeConfigurations(configuration);
            this.OnPrepareInvoiceTypeConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<InvoiceType> GetInvoiceTypeClassConfiguration()
        {
            MappingConfiguration<InvoiceType> configuration = new MappingConfiguration<InvoiceType>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.InvoiceType");
            return configuration;
        }
	
        public void PrepareInvoiceTypeConfigurations(MappingConfiguration<InvoiceType> configuration)
        {
            configuration.HasProperty(x => x.InvoiceTypeId).ToColumn(@"InvoiceTypeId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_InvoiceTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Description).ToColumn(@"Description").HasFieldName(@"_Description").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.Abbreviation).ToColumn(@"Abbreviation").HasFieldName(@"_Abbreviation").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(10).IsUnicode();
            configuration.HasProperty(x => x.LastNumber).ToColumn(@"LastNumber").HasFieldName(@"_LastNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.TransactionType).ToColumn(@"TransactionType").HasFieldName(@"_TransactionType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.Printable).ToColumn(@"Printable").HasFieldName(@"_Printable").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.OfficialEnumerator).ToColumn(@"OfficialEnumerator").HasFieldName(@"_OfficialEnumerator").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.Printer).ToColumn(@"Printer").HasFieldName(@"_Printer").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(150).IsUnicode();
            configuration.HasProperty(x => x.InvoiceFormId).ToColumn(@"InvoiceFormId").HasFieldName(@"_InvoiceFormId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.IsInternal).ToColumn(@"IsInternal").HasFieldName(@"_IsInternal").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.InternalDeliveryDescription).ToColumn(@"InternalDeliveryDescription").HasFieldName(@"_InternalDeliveryDescription").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(200).IsUnicode();
            configuration.HasProperty(x => x.NeedsVehicle).ToColumn(@"NeedsVehicle").HasFieldName(@"_NeedsVehicle").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.IsCancelation).ToColumn(@"IsCancelation").HasFieldName(@"_IsCancelation").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.HasFinancialTransactions).ToColumn(@"HasFinancialTransactions").HasFieldName(@"_HasFinancialTransactions").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.IsLaserPrint).ToColumn(@"IsLaserPrint").HasFieldName(@"_IsLaserPrint").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.TransactionSign).ToColumn(@"TransactionSign").HasFieldName(@"_TransactionSign").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.ShowFinancialData).ToColumn(@"ShowFinancialData").HasFieldName(@"_ShowFinancialData").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.DeliveryType).ToColumn(@"DeliveryType").HasFieldName(@"_DeliveryType").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNullable().HasPrecision(10);
            configuration.HasProperty(x => x.AdminView).ToColumn(@"AdminView").HasFieldName(@"_AdminView").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.Invalidated).ToColumn(@"Invalidated").HasFieldName(@"_Invalidated").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.DispenserType).ToColumn(@"DispenserType").HasFieldName(@"_DispenserType").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.ForcesDelivery).ToColumn(@"ForcesDelivery").HasFieldName(@"_ForcesDelivery").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.RetailInvoice).ToColumn(@"RetailInvoice").HasFieldName(@"_RetailInvoice").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.IncludeInBalance).ToColumn(@"IncludeInBalance").HasFieldName(@"_IncludeInBalance").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.DefaultSeries).ToColumn(@"DefaultSeries").HasFieldName(@"_DefaultSeries").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(10).IsUnicode();
            configuration.HasProperty(x => x.SendToMyData).ToColumn(@"SendToMyData").HasFieldName(@"_SendToMyData").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNotNullable();
            configuration.HasAssociation<Trader>(x => x.Traders).HasFieldName(@"_Traders").WithOpposite(op => op.InvoiceType).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.InvoiceTypeId == y.InvoiceTypeId);
            configuration.HasAssociation<InvoiceForm>(x => x.InvoiceForm).HasFieldName(@"_InvoiceForm").WithOpposite(op => op.InvoiceTypes).HasConstraint((x, y) =>  x.InvoiceFormId == y.InvoiceFormId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<InvoicePrint>(x => x.InvoicePrints).HasFieldName(@"_InvoicePrints").WithOpposite(op => op.InvoiceType).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.InvoiceTypeId == y.DefaultInvoiceType);
            configuration.HasAssociation<Invoice>(x => x.Invoices).HasFieldName(@"_Invoices").WithOpposite(op => op.InvoiceType).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.InvoiceTypeId == y.InvoiceTypeId);
            configuration.HasAssociation<FleetManagerDispenser>(x => x.FleetManagerDispensers).HasFieldName(@"_FleetManagerDispensers").WithOpposite(op => op.InvoiceType).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.InvoiceTypeId == y.InvoiceTypeId);
            configuration.HasAssociation<InvoiceTypeTransform>(x => x.InvoiceTypeTransforms_ParentInvoiceTypeId).HasFieldName(@"_InvoiceTypeTransforms_ParentInvoiceTypeId").WithOpposite(op => op.InvoiceType_ParentInvoiceTypeId).HasConstraint((x, y) =>  x.InvoiceTypeId == y.ParentInvoiceTypeId);
            configuration.HasAssociation<InvoiceTypeTransform>(x => x.InvoiceTypeTransforms_ChildInvoiceTypeId).HasFieldName(@"_InvoiceTypeTransforms_ChildInvoiceTypeId").WithOpposite(op => op.InvoiceType_ChildInvoiceTypeId).HasConstraint((x, y) =>  x.InvoiceTypeId == y.ChildInvoiceTypeId);
            configuration.HasAssociation<InvoiceTypeTransform>(x => x.InvoiceTypeTransforms_CreationInvoiceTypeId).HasFieldName(@"_InvoiceTypeTransforms_CreationInvoiceTypeId").WithOpposite(op => op.InvoiceType_CreationInvoiceTypeId).HasConstraint((x, y) =>  x.InvoiceTypeId == y.CreationInvoiceTypeId);
        }

        partial void OnPrepareInvoiceTypeConfigurations(MappingConfiguration<InvoiceType> configuration);
    }

#endregion

#region InvoiceRelation Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<InvoiceRelation> GetInvoiceRelationMappingConfiguration()
        {
            MappingConfiguration<InvoiceRelation> configuration = this.GetInvoiceRelationClassConfiguration();
            this.PrepareInvoiceRelationConfigurations(configuration);
            this.OnPrepareInvoiceRelationConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<InvoiceRelation> GetInvoiceRelationClassConfiguration()
        {
            MappingConfiguration<InvoiceRelation> configuration = new MappingConfiguration<InvoiceRelation>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.InvoiceRelation");
            return configuration;
        }
	
        public void PrepareInvoiceRelationConfigurations(MappingConfiguration<InvoiceRelation> configuration)
        {
            configuration.HasProperty(x => x.InvoiceRelationId).ToColumn(@"InvoiceRelationId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_InvoiceRelationId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ParentInvoiceId).ToColumn(@"ParentInvoiceId").HasFieldName(@"_ParentInvoiceId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ChildInvoiceId).ToColumn(@"ChildInvoiceId").HasFieldName(@"_ChildInvoiceId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.RelationType).ToColumn(@"RelationType").HasFieldName(@"_RelationType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasAssociation<Invoice>(x => x.ChildInvoice).HasFieldName(@"_ChildInvoice").WithOpposite(op => op.ParentInvoiceRelations).HasConstraint((x, y) =>  x.ChildInvoiceId == y.InvoiceId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Invoice>(x => x.ParentInvoice).HasFieldName(@"_ParentInvoice").WithOpposite(op => op.ChildInvoiceRelations).HasConstraint((x, y) =>  x.ParentInvoiceId == y.InvoiceId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<InvoiceLine>(x => x.InvoiceLines).HasFieldName(@"_InvoiceLines").WithOpposite(op => op.InvoiceRelation).HasConstraint((x, y) =>  x.InvoiceRelationId == y.InvoiceRelationId);
            configuration.HasAssociation<InvoiceLineRelation>(x => x.InvoiceLineRelations).HasFieldName(@"_InvoiceLineRelations").WithOpposite(op => op.InvoiceRelation).HasConstraint((x, y) =>  x.InvoiceRelationId == y.InvoiceRelationId);
        }

        partial void OnPrepareInvoiceRelationConfigurations(MappingConfiguration<InvoiceRelation> configuration);
    }

#endregion

#region InvoicePrint Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<InvoicePrint> GetInvoicePrintMappingConfiguration()
        {
            MappingConfiguration<InvoicePrint> configuration = this.GetInvoicePrintClassConfiguration();
            this.PrepareInvoicePrintConfigurations(configuration);
            this.OnPrepareInvoicePrintConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<InvoicePrint> GetInvoicePrintClassConfiguration()
        {
            MappingConfiguration<InvoicePrint> configuration = new MappingConfiguration<InvoicePrint>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.InvoicePrint");
            return configuration;
        }
	
        public void PrepareInvoicePrintConfigurations(MappingConfiguration<InvoicePrint> configuration)
        {
            configuration.HasProperty(x => x.InvoicePrintId).ToColumn(@"InvoicePrintId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_InvoicePrintId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.DispenserId).ToColumn(@"DispenserId").HasFieldName(@"_DispenserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Printer).ToColumn(@"Printer").HasFieldName(@"_Printer").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(150).IsUnicode();
            configuration.HasProperty(x => x.DefaultInvoiceType).ToColumn(@"DefaultInvoiceType").HasFieldName(@"_DefaultInvoiceType").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasAssociation<InvoiceType>(x => x.InvoiceType).HasFieldName(@"_InvoiceType").WithOpposite(op => op.InvoicePrints).HasConstraint((x, y) =>  x.DefaultInvoiceType == y.InvoiceTypeId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Dispenser>(x => x.Dispenser).HasFieldName(@"_Dispenser").WithOpposite(op => op.InvoicePrints).HasConstraint((x, y) =>  x.DispenserId == y.DispenserId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareInvoicePrintConfigurations(MappingConfiguration<InvoicePrint> configuration);
    }

#endregion

#region InvoiceLine Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<InvoiceLine> GetInvoiceLineMappingConfiguration()
        {
            MappingConfiguration<InvoiceLine> configuration = this.GetInvoiceLineClassConfiguration();
            this.PrepareInvoiceLineConfigurations(configuration);
            this.OnPrepareInvoiceLineConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<InvoiceLine> GetInvoiceLineClassConfiguration()
        {
            MappingConfiguration<InvoiceLine> configuration = new MappingConfiguration<InvoiceLine>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.InvoiceLine");
            return configuration;
        }
	
        public void PrepareInvoiceLineConfigurations(MappingConfiguration<InvoiceLine> configuration)
        {
            configuration.HasProperty(x => x.InvoiceLineId).ToColumn(@"InvoiceLineId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_InvoiceLineId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.InvoiceId).ToColumn(@"InvoiceId").HasFieldName(@"_InvoiceId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Volume).ToColumn(@"Volume").HasFieldName(@"_Volume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.VolumeNormalized).ToColumn(@"VolumeNormalized").HasFieldName(@"_VolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.Temperature).ToColumn(@"Temperature").HasFieldName(@"_Temperature").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.FuelDensity).ToColumn(@"FuelDensity").HasFieldName(@"_FuelDensity").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.UnitPrice).ToColumn(@"UnitPrice").HasFieldName(@"_UnitPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(5);
            configuration.HasProperty(x => x.TotalPrice).ToColumn(@"TotalPrice").HasFieldName(@"_TotalPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.VatAmount).ToColumn(@"VatAmount").HasFieldName(@"_VatAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.VatPercentage).ToColumn(@"VatPercentage").HasFieldName(@"_VatPercentage").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.SaleTransactionId).ToColumn(@"SaleTransactionId").HasFieldName(@"_SaleTransactionId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.TankFillingId).ToColumn(@"TankFillingId").HasFieldName(@"_TankFillingId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.FuelTypeId).ToColumn(@"FuelTypeId").HasFieldName(@"_FuelTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.DiscountAmount).ToColumn(@"DiscountAmount").HasFieldName(@"_DiscountAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.InvoiceRelationId).ToColumn(@"InvoiceRelationId").HasFieldName(@"_InvoiceRelationId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.UnitPriceWhole).ToColumn(@"UnitPriceWhole").HasFieldName(@"_UnitPriceWhole").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(5);
            configuration.HasProperty(x => x.DiscountAmountWhole).ToColumn(@"DiscountAmountWhole").HasFieldName(@"_DiscountAmountWhole").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.UnitPriceRetail).ToColumn(@"UnitPriceRetail").HasFieldName(@"_UnitPriceRetail").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(5);
            configuration.HasProperty(x => x.DiscountAmountRetail).ToColumn(@"DiscountAmountRetail").HasFieldName(@"_DiscountAmountRetail").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.DiscountPercentage).ToColumn(@"DiscountPercentage").HasFieldName(@"_DiscountPercentage").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(5);
            configuration.HasAssociation<TankFilling>(x => x.TankFilling).HasFieldName(@"_TankFilling").WithOpposite(op => op.InvoiceLines).HasConstraint((x, y) =>  x.TankFillingId == y.TankFillingId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Tank>(x => x.Tank).HasFieldName(@"_Tank").WithOpposite(op => op.InvoiceLines).HasConstraint((x, y) =>  x.TankId == y.TankId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<SalesTransaction>(x => x.SalesTransaction).HasFieldName(@"_SalesTransaction").WithOpposite(op => op.InvoiceLines).HasConstraint((x, y) =>  x.SaleTransactionId == y.SalesTransactionId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<FuelType>(x => x.FuelType).HasFieldName(@"_FuelType").WithOpposite(op => op.InvoiceLines).HasConstraint((x, y) =>  x.FuelTypeId == y.FuelTypeId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Invoice>(x => x.Invoice).HasFieldName(@"_Invoice").WithOpposite(op => op.InvoiceLines).HasConstraint((x, y) =>  x.InvoiceId == y.InvoiceId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<InvoiceRelation>(x => x.InvoiceRelation).HasFieldName(@"_InvoiceRelation").WithOpposite(op => op.InvoiceLines).HasConstraint((x, y) =>  x.InvoiceRelationId == y.InvoiceRelationId);
            configuration.HasAssociation<InvoiceLineRelation>(x => x.InvoiceLineRelations_ParentLineId).HasFieldName(@"_InvoiceLineRelations_ParentLineId").WithOpposite(op => op.InvoiceLine_ParentLineId).HasConstraint((x, y) =>  x.InvoiceLineId == y.ParentLineId);
            configuration.HasAssociation<InvoiceLineRelation>(x => x.InvoiceLineRelations_ChildRelationId).HasFieldName(@"_InvoiceLineRelations_ChildRelationId").WithOpposite(op => op.InvoiceLine_ChildRelationId).HasConstraint((x, y) =>  x.InvoiceLineId == y.ChildRelationId);
        }

        partial void OnPrepareInvoiceLineConfigurations(MappingConfiguration<InvoiceLine> configuration);
    }

#endregion

#region InvoiceForm Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<InvoiceForm> GetInvoiceFormMappingConfiguration()
        {
            MappingConfiguration<InvoiceForm> configuration = this.GetInvoiceFormClassConfiguration();
            this.PrepareInvoiceFormConfigurations(configuration);
            this.OnPrepareInvoiceFormConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<InvoiceForm> GetInvoiceFormClassConfiguration()
        {
            MappingConfiguration<InvoiceForm> configuration = new MappingConfiguration<InvoiceForm>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.InvoiceForm");
            return configuration;
        }
	
        public void PrepareInvoiceFormConfigurations(MappingConfiguration<InvoiceForm> configuration)
        {
            configuration.HasProperty(x => x.InvoiceFormId).ToColumn(@"InvoiceFormId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_InvoiceFormId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.IsTextForm).ToColumn(@"IsTextForm").HasFieldName(@"_IsTextForm").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.Data).ToColumn(@"Data").HasFieldName(@"_Data").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNotNullable().IsUnicode();
            configuration.HasAssociation<InvoiceType>(x => x.InvoiceTypes).HasFieldName(@"_InvoiceTypes").WithOpposite(op => op.InvoiceForm).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.InvoiceFormId == y.InvoiceFormId);
            configuration.HasAssociation<Invoice>(x => x.Invoices).HasFieldName(@"_Invoices").WithOpposite(op => op.InvoiceForm).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.InvoiceFormId == y.InvoiceFormId);
        }

        partial void OnPrepareInvoiceFormConfigurations(MappingConfiguration<InvoiceForm> configuration);
    }

#endregion

#region Invoice Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Invoice> GetInvoiceMappingConfiguration()
        {
            MappingConfiguration<Invoice> configuration = this.GetInvoiceClassConfiguration();
            this.PrepareInvoiceConfigurations(configuration);
            this.OnPrepareInvoiceConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Invoice> GetInvoiceClassConfiguration()
        {
            MappingConfiguration<Invoice> configuration = new MappingConfiguration<Invoice>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Invoice");
            return configuration;
        }
	
        public void PrepareInvoiceConfigurations(MappingConfiguration<Invoice> configuration)
        {
            configuration.HasProperty(x => x.InvoiceId).ToColumn(@"InvoiceId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_InvoiceId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TraderId).ToColumn(@"TraderId").HasFieldName(@"_TraderId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.Number).ToColumn(@"Number").HasFieldName(@"_Number").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.VehiclePlateNumber).ToColumn(@"VehiclePlateNumber").HasFieldName(@"_VehiclePlateNumber").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(50).IsUnicode();
            configuration.HasProperty(x => x.InvoiceSignature).ToColumn(@"InvoiceSignature").HasFieldName(@"_InvoiceSignature").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(1500).IsUnicode();
            configuration.HasProperty(x => x.InvoiceTypeId).ToColumn(@"InvoiceTypeId").HasFieldName(@"_InvoiceTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.VehicleId).ToColumn(@"VehicleId").HasFieldName(@"_VehicleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.TransactionDate).ToColumn(@"TransactionDate").HasFieldName(@"_TransactionDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.NettoAmount).ToColumn(@"NettoAmount").HasFieldName(@"_NettoAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.VatAmount).ToColumn(@"VatAmount").HasFieldName(@"_VatAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.TotalAmount).ToColumn(@"TotalAmount").HasFieldName(@"_TotalAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.Printer).ToColumn(@"Printer").HasFieldName(@"_Printer").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(150).IsUnicode();
            configuration.HasProperty(x => x.InvoiceFormId).ToColumn(@"InvoiceFormId").HasFieldName(@"_InvoiceFormId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.ApplicationUserId).ToColumn(@"ApplicationUserId").HasFieldName(@"_ApplicationUserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Series).ToColumn(@"Series").HasFieldName(@"_Series").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(10).IsUnicode();
            configuration.HasProperty(x => x.IsPrinted).ToColumn(@"IsPrinted").HasFieldName(@"_IsPrinted").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.Notes).ToColumn(@"Notes").HasFieldName(@"_Notes").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(1000).IsUnicode();
            configuration.HasProperty(x => x.PaymentType).ToColumn(@"PaymentType").HasFieldName(@"_PaymentType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.DiscountAmount).ToColumn(@"DiscountAmount").HasFieldName(@"_DiscountAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.IsEuromat).ToColumn(@"IsEuromat").HasFieldName(@"_IsEuromat").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.SupplyNumber).ToColumn(@"SupplyNumber").HasFieldName(@"_SupplyNumber").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.LastRestAmount).ToColumn(@"LastRestAmount").HasFieldName(@"_LastRestAmount").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.AllowEdit).ToColumn(@"AllowEdit").HasFieldName(@"_AllowEdit").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.VehicleOdometer).ToColumn(@"VehicleOdometer").HasFieldName(@"_VehicleOdometer").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNullable().HasPrecision(10);
            configuration.HasProperty(x => x.DeliveryAddress).ToColumn(@"DeliveryAddress").HasFieldName(@"_DeliveryAddress").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(150).IsUnicode();
            configuration.HasProperty(x => x.QRCodeData).ToColumn(@"QRCodeData").HasFieldName(@"_QRCodeData").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(1000).IsUnicode();
            configuration.HasProperty(x => x.DiscountAmountWhole).ToColumn(@"DiscountAmountWhole").HasFieldName(@"_DiscountAmountWhole").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.DiscountAmountRetail).ToColumn(@"DiscountAmountRetail").HasFieldName(@"_DiscountAmountRetail").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.NettoAfterDiscount).ToColumn(@"NettoAfterDiscount").HasFieldName(@"_NettoAfterDiscount").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2).HasDefaultValue();
            configuration.HasProperty(x => x.Mark).ToColumn(@"Mark").HasFieldName(@"_Mark").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasAssociation<Vehicle>(x => x.Vehicle).HasFieldName(@"_Vehicle").WithOpposite(op => op.Invoices).HasConstraint((x, y) =>  x.VehicleId == y.VehicleId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Trader>(x => x.Trader).HasFieldName(@"_Trader").WithOpposite(op => op.Invoices).HasConstraint((x, y) =>  x.TraderId == y.TraderId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<InvoiceType>(x => x.InvoiceType).HasFieldName(@"_InvoiceType").WithOpposite(op => op.Invoices).HasConstraint((x, y) =>  x.InvoiceTypeId == y.InvoiceTypeId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<InvoiceRelation>(x => x.ParentInvoiceRelations).HasFieldName(@"_ParentInvoiceRelations").WithOpposite(op => op.ChildInvoice).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.InvoiceId == y.ChildInvoiceId);
            configuration.HasAssociation<InvoiceRelation>(x => x.ChildInvoiceRelations).HasFieldName(@"_ChildInvoiceRelations").WithOpposite(op => op.ParentInvoice).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.InvoiceId == y.ParentInvoiceId);
            configuration.HasAssociation<InvoiceLine>(x => x.InvoiceLines).HasFieldName(@"_InvoiceLines").WithOpposite(op => op.Invoice).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.InvoiceId == y.InvoiceId);
            configuration.HasAssociation<InvoiceForm>(x => x.InvoiceForm).HasFieldName(@"_InvoiceForm").WithOpposite(op => op.Invoices).HasConstraint((x, y) =>  x.InvoiceFormId == y.InvoiceFormId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<ApplicationUser>(x => x.ApplicationUser).HasFieldName(@"_ApplicationUser").WithOpposite(op => op.Invoices).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<FinTransaction>(x => x.FinTransactions).HasFieldName(@"_FinTransactions").WithOpposite(op => op.Invoice).HasConstraint((x, y) =>  x.InvoiceId == y.InvoiceId);
        }

        partial void OnPrepareInvoiceConfigurations(MappingConfiguration<Invoice> configuration);
    }

#endregion

#region FuelTypePrice Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<FuelTypePrice> GetFuelTypePriceMappingConfiguration()
        {
            MappingConfiguration<FuelTypePrice> configuration = this.GetFuelTypePriceClassConfiguration();
            this.PrepareFuelTypePriceConfigurations(configuration);
            this.OnPrepareFuelTypePriceConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<FuelTypePrice> GetFuelTypePriceClassConfiguration()
        {
            MappingConfiguration<FuelTypePrice> configuration = new MappingConfiguration<FuelTypePrice>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.FuelTypePrice");
            return configuration;
        }
	
        public void PrepareFuelTypePriceConfigurations(MappingConfiguration<FuelTypePrice> configuration)
        {
            configuration.HasProperty(x => x.FuelTypePriceId).ToColumn(@"FuelTypePriceId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_FuelTypePriceId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.FuelTypeId).ToColumn(@"FuelTypeId").HasFieldName(@"_FuelTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Price).ToColumn(@"Price").HasFieldName(@"_Price").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(4);
            configuration.HasProperty(x => x.ChangeDate).ToColumn(@"ChangeDate").HasFieldName(@"_ChangeDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.SentDateTime).ToColumn(@"SentDateTime").HasFieldName(@"_SentDateTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.ResponseCode).ToColumn(@"ResponseCode").HasFieldName(@"_ResponseCode").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(500).IsUnicode();
            configuration.HasAssociation<FuelType>(x => x.FuelType).HasFieldName(@"_FuelType").WithOpposite(op => op.FuelTypePrices).HasConstraint((x, y) =>  x.FuelTypeId == y.FuelTypeId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareFuelTypePriceConfigurations(MappingConfiguration<FuelTypePrice> configuration);
    }

#endregion

#region FuelType Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<FuelType> GetFuelTypeMappingConfiguration()
        {
            MappingConfiguration<FuelType> configuration = this.GetFuelTypeClassConfiguration();
            this.PrepareFuelTypeConfigurations(configuration);
            this.OnPrepareFuelTypeConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<FuelType> GetFuelTypeClassConfiguration()
        {
            MappingConfiguration<FuelType> configuration = new MappingConfiguration<FuelType>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.FuelType");
            return configuration;
        }
	
        public void PrepareFuelTypeConfigurations(MappingConfiguration<FuelType> configuration)
        {
            configuration.HasProperty(x => x.FuelTypeId).ToColumn(@"FuelTypeId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_FuelTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Name).ToColumn(@"Name").HasFieldName(@"_Name").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.Code).ToColumn(@"Code").HasFieldName(@"_Code").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(30).IsUnicode();
            configuration.HasProperty(x => x.Color).ToColumn(@"Color").HasFieldName(@"_Color").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.ThermalCoeficient).ToColumn(@"ThermalCoeficient").HasFieldName(@"_ThermalCoeficient").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(9);
            configuration.HasProperty(x => x.EnumeratorValue).ToColumn(@"EnumeratorValue").HasFieldName(@"_EnumeratorValue").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.BaseDensity).ToColumn(@"BaseDensity").HasFieldName(@"_BaseDensity").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.SupportsSupplyNumber).ToColumn(@"SupportsSupplyNumber").HasFieldName(@"_SupportsSupplyNumber").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.ExcludeFromBalance).ToColumn(@"ExcludeFromBalance").HasFieldName(@"_ExcludeFromBalance").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNullable();
            configuration.HasAssociation<Tank>(x => x.Tanks).HasFieldName(@"_Tanks").WithOpposite(op => op.FuelType).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.FuelTypeId == y.FuelTypeId);
            configuration.HasAssociation<Nozzle>(x => x.Nozzles).HasFieldName(@"_Nozzles").WithOpposite(op => op.FuelType).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.FuelTypeId == y.FuelTypeId);
            configuration.HasAssociation<Normalization>(x => x.Normalizations).HasFieldName(@"_Normalizations").WithOpposite(op => op.FuelType).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.FuelTypeId == y.FuelTypeId);
            configuration.HasAssociation<InvoiceLine>(x => x.InvoiceLines).HasFieldName(@"_InvoiceLines").WithOpposite(op => op.FuelType).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.FuelTypeId == y.FuelTypeId);
            configuration.HasAssociation<FuelTypePrice>(x => x.FuelTypePrices).HasFieldName(@"_FuelTypePrices").WithOpposite(op => op.FuelType).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.FuelTypeId == y.FuelTypeId);
        }

        partial void OnPrepareFuelTypeConfigurations(MappingConfiguration<FuelType> configuration);
    }

#endregion

#region DispenserType Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<DispenserType> GetDispenserTypeMappingConfiguration()
        {
            MappingConfiguration<DispenserType> configuration = this.GetDispenserTypeClassConfiguration();
            this.PrepareDispenserTypeConfigurations(configuration);
            this.OnPrepareDispenserTypeConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<DispenserType> GetDispenserTypeClassConfiguration()
        {
            MappingConfiguration<DispenserType> configuration = new MappingConfiguration<DispenserType>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.DispenserType");
            return configuration;
        }
	
        public void PrepareDispenserTypeConfigurations(MappingConfiguration<DispenserType> configuration)
        {
            configuration.HasProperty(x => x.DispenserTypeId).ToColumn(@"DispenserTypeId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_DispenserTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.DispenserProtocolId).ToColumn(@"DispenserProtocolId").HasFieldName(@"_DispenserProtocolId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.BrandName).ToColumn(@"BrandName").HasFieldName(@"_BrandName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(255).IsUnicode();
            configuration.HasAssociation<DispenserProtocol>(x => x.DispenserProtocol).HasFieldName(@"_DispenserProtocol").WithOpposite(op => op.DispenserTypes).HasConstraint((x, y) =>  x.DispenserProtocolId == y.DispenserProtocolId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Dispenser>(x => x.Dispensers).HasFieldName(@"_Dispensers").WithOpposite(op => op.DispenserType).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.DispenserTypeId == y.DispenserTypeId);
        }

        partial void OnPrepareDispenserTypeConfigurations(MappingConfiguration<DispenserType> configuration);
    }

#endregion

#region DispenserSetting Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<DispenserSetting> GetDispenserSettingMappingConfiguration()
        {
            MappingConfiguration<DispenserSetting> configuration = this.GetDispenserSettingClassConfiguration();
            this.PrepareDispenserSettingConfigurations(configuration);
            this.OnPrepareDispenserSettingConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<DispenserSetting> GetDispenserSettingClassConfiguration()
        {
            MappingConfiguration<DispenserSetting> configuration = new MappingConfiguration<DispenserSetting>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.DispenserSetting");
            return configuration;
        }
	
        public void PrepareDispenserSettingConfigurations(MappingConfiguration<DispenserSetting> configuration)
        {
            configuration.HasProperty(x => x.DispenserSettingId).ToColumn(@"DispenserSettingId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_DispenserSettingId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.DispenserId).ToColumn(@"DispenserId").HasFieldName(@"_DispenserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.SettingKey).ToColumn(@"SettingKey").HasFieldName(@"_SettingKey").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.SettingValue).ToColumn(@"SettingValue").HasFieldName(@"_SettingValue").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.Description).ToColumn(@"Description").HasFieldName(@"_Description").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.NozzleId).ToColumn(@"NozzleId").HasFieldName(@"_NozzleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasAssociation<Nozzle>(x => x.Nozzle).HasFieldName(@"_Nozzle").WithOpposite(op => op.DispenserSettings).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Dispenser>(x => x.Dispenser).HasFieldName(@"_Dispenser").WithOpposite(op => op.DispenserSettings).HasConstraint((x, y) =>  x.DispenserId == y.DispenserId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareDispenserSettingConfigurations(MappingConfiguration<DispenserSetting> configuration);
    }

#endregion

#region DispenserProtocol Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<DispenserProtocol> GetDispenserProtocolMappingConfiguration()
        {
            MappingConfiguration<DispenserProtocol> configuration = this.GetDispenserProtocolClassConfiguration();
            this.PrepareDispenserProtocolConfigurations(configuration);
            this.OnPrepareDispenserProtocolConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<DispenserProtocol> GetDispenserProtocolClassConfiguration()
        {
            MappingConfiguration<DispenserProtocol> configuration = new MappingConfiguration<DispenserProtocol>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.DispenserProtocol");
            return configuration;
        }
	
        public void PrepareDispenserProtocolConfigurations(MappingConfiguration<DispenserProtocol> configuration)
        {
            configuration.HasProperty(x => x.DispenserProtocolId).ToColumn(@"DispenserProtocolId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_DispenserProtocolId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ProtocolName).ToColumn(@"ProtocolName").HasFieldName(@"_ProtocolName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(255).IsUnicode();
            configuration.HasProperty(x => x.EnumeratorValue).ToColumn(@"EnumeratorValue").HasFieldName(@"_EnumeratorValue").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasAssociation<DispenserType>(x => x.DispenserTypes).HasFieldName(@"_DispenserTypes").WithOpposite(op => op.DispenserProtocol).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.DispenserProtocolId == y.DispenserProtocolId);
        }

        partial void OnPrepareDispenserProtocolConfigurations(MappingConfiguration<DispenserProtocol> configuration);
    }

#endregion

#region Dispenser Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Dispenser> GetDispenserMappingConfiguration()
        {
            MappingConfiguration<Dispenser> configuration = this.GetDispenserClassConfiguration();
            this.PrepareDispenserConfigurations(configuration);
            this.OnPrepareDispenserConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Dispenser> GetDispenserClassConfiguration()
        {
            MappingConfiguration<Dispenser> configuration = new MappingConfiguration<Dispenser>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Dispenser");
            return configuration;
        }
	
        public void PrepareDispenserConfigurations(MappingConfiguration<Dispenser> configuration)
        {
            configuration.HasProperty(x => x.DispenserId).ToColumn(@"DispenserId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_DispenserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.PhysicalState).ToColumn(@"PhysicalState").HasFieldName(@"_PhysicalState").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.IsValid).ToColumn(@"IsValid").HasFieldName(@"_IsValid").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.InValidationDate).ToColumn(@"InValidationDate").HasFieldName(@"_InValidationDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.DispenserTypeId).ToColumn(@"DispenserTypeId").HasFieldName(@"_DispenserTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.CommunicationControllerId).ToColumn(@"CommunicationControllerId").HasFieldName(@"_CommunicationControllerId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Channel).ToColumn(@"Channel").HasFieldName(@"_Channel").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.PhysicalAddress).ToColumn(@"PhysicalAddress").HasFieldName(@"_PhysicalAddress").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.DispenserNumber).ToColumn(@"DispenserNumber").HasFieldName(@"_DispenserNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.PumpSerialNumber).ToColumn(@"PumpSerialNumber").HasFieldName(@"_PumpSerialNumber").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.OfficialPumpNumber).ToColumn(@"OfficialPumpNumber").HasFieldName(@"_OfficialPumpNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.UnitPriceDecimalPlaces).ToColumn(@"UnitPriceDecimalPlaces").HasFieldName(@"_UnitPriceDecimalPlaces").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.DecimalPlaces).ToColumn(@"DecimalPlaces").HasFieldName(@"_DecimalPlaces").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.VolumeDecimalPlaces).ToColumn(@"VolumeDecimalPlaces").HasFieldName(@"_VolumeDecimalPlaces").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasAssociation<SystemEvent>(x => x.SystemEvents).HasFieldName(@"_SystemEvents").WithOpposite(op => op.Dispenser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.DispenserId == y.DispenserId);
            configuration.HasAssociation<Nozzle>(x => x.Nozzles).HasFieldName(@"_Nozzles").WithOpposite(op => op.Dispenser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.DispenserId == y.DispenserId);
            configuration.HasAssociation<InvoicePrint>(x => x.InvoicePrints).HasFieldName(@"_InvoicePrints").WithOpposite(op => op.Dispenser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.DispenserId == y.DispenserId);
            configuration.HasAssociation<DispenserType>(x => x.DispenserType).HasFieldName(@"_DispenserType").WithOpposite(op => op.Dispensers).HasConstraint((x, y) =>  x.DispenserTypeId == y.DispenserTypeId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<DispenserSetting>(x => x.DispenserSettings).HasFieldName(@"_DispenserSettings").WithOpposite(op => op.Dispenser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.DispenserId == y.DispenserId);
            configuration.HasAssociation<CommunicationController>(x => x.CommunicationController).HasFieldName(@"_CommunicationController").WithOpposite(op => op.Dispensers).HasConstraint((x, y) =>  x.CommunicationControllerId == y.CommunicationControllerId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<FleetManagerDispenser>(x => x.FleetManagerDispensers).HasFieldName(@"_FleetManagerDispensers").WithOpposite(op => op.Dispenser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.DispenserId == y.DispenserId);
        }

        partial void OnPrepareDispenserConfigurations(MappingConfiguration<Dispenser> configuration);
    }

#endregion

#region CommunicationController Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<CommunicationController> GetCommunicationControllerMappingConfiguration()
        {
            MappingConfiguration<CommunicationController> configuration = this.GetCommunicationControllerClassConfiguration();
            this.PrepareCommunicationControllerConfigurations(configuration);
            this.OnPrepareCommunicationControllerConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<CommunicationController> GetCommunicationControllerClassConfiguration()
        {
            MappingConfiguration<CommunicationController> configuration = new MappingConfiguration<CommunicationController>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.CommunicationController");
            return configuration;
        }
	
        public void PrepareCommunicationControllerConfigurations(MappingConfiguration<CommunicationController> configuration)
        {
            configuration.HasProperty(x => x.CommunicationControllerId).ToColumn(@"CommunicationControllerId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_CommunicationControllerId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Name).ToColumn(@"Name").HasFieldName(@"_Name").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.CommunicationPort).ToColumn(@"CommunicationPort").HasFieldName(@"_CommunicationPort").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(30).IsUnicode();
            configuration.HasProperty(x => x.CommunicationProtocol).ToColumn(@"CommunicationProtocol").HasFieldName(@"_CommunicationProtocol").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.ControllerAssembly).ToColumn(@"ControllerAssembly").HasFieldName(@"_ControllerAssembly").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(255).IsUnicode();
            configuration.HasProperty(x => x.EuromatEnabled).ToColumn(@"EuromatEnabled").HasFieldName(@"_EuromatEnabled").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.EuromatPort).ToColumn(@"EuromatPort").HasFieldName(@"_EuromatPort").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.EuromatIp).ToColumn(@"EuromatIp").HasFieldName(@"_EuromatIp").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(20).IsUnicode();
            configuration.HasAssociation<Tank>(x => x.Tanks).HasFieldName(@"_Tanks").WithOpposite(op => op.CommunicationController).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.CommunicationControllerId == y.CommunicationControllerId);
            configuration.HasAssociation<Dispenser>(x => x.Dispensers).HasFieldName(@"_Dispensers").WithOpposite(op => op.CommunicationController).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.CommunicationControllerId == y.CommunicationControllerId);
            configuration.HasAssociation<OutdoorPaymentTerminalController>(x => x.OutdoorPaymentTerminalControllers).HasFieldName(@"_OutdoorPaymentTerminalControllers").WithOpposite(op => op.CommunicationController).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.CommunicationControllerId == y.CommunicationControllerId);
        }

        partial void OnPrepareCommunicationControllerConfigurations(MappingConfiguration<CommunicationController> configuration);
    }

#endregion

#region Balance Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Balance> GetBalanceMappingConfiguration()
        {
            MappingConfiguration<Balance> configuration = this.GetBalanceClassConfiguration();
            this.PrepareBalanceConfigurations(configuration);
            this.OnPrepareBalanceConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Balance> GetBalanceClassConfiguration()
        {
            MappingConfiguration<Balance> configuration = new MappingConfiguration<Balance>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Balance");
            return configuration;
        }
	
        public void PrepareBalanceConfigurations(MappingConfiguration<Balance> configuration)
        {
            configuration.HasProperty(x => x.BalanceId).ToColumn(@"BalanceId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_BalanceId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.StartDate).ToColumn(@"StartDate").HasFieldName(@"_StartDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.EndDate).ToColumn(@"EndDate").HasFieldName(@"_EndDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.LastSale).ToColumn(@"LastSale").HasFieldName(@"_LastSale").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.LastFilling).ToColumn(@"LastFilling").HasFieldName(@"_LastFilling").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.BalanceText).ToColumn(@"BalanceText").HasFieldName(@"_BalanceText").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.ApplicationUserId).ToColumn(@"ApplicationUserId").HasFieldName(@"_ApplicationUserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.SentDateTime).ToColumn(@"SentDateTime").HasFieldName(@"_SentDateTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.ResponseCode).ToColumn(@"ResponseCode").HasFieldName(@"_ResponseCode").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(500).IsUnicode();
            configuration.HasProperty(x => x.PrintDate).ToColumn(@"PrintDate").HasFieldName(@"_PrintDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.DocumentSign).ToColumn(@"DocumentSign").HasFieldName(@"_DocumentSign").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasAssociation<TankFilling>(x => x.TankFilling).HasFieldName(@"_TankFilling").WithOpposite(op => op.Balances).HasConstraint((x, y) =>  x.LastFilling == y.TankFillingId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<SalesTransaction>(x => x.SalesTransaction).HasFieldName(@"_SalesTransaction").WithOpposite(op => op.Balances).HasConstraint((x, y) =>  x.LastSale == y.SalesTransactionId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<ApplicationUser>(x => x.ApplicationUser).HasFieldName(@"_ApplicationUser").WithOpposite(op => op.Balances).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareBalanceConfigurations(MappingConfiguration<Balance> configuration);
    }

#endregion

#region AtgProbeType Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<AtgProbeType> GetAtgProbeTypeMappingConfiguration()
        {
            MappingConfiguration<AtgProbeType> configuration = this.GetAtgProbeTypeClassConfiguration();
            this.PrepareAtgProbeTypeConfigurations(configuration);
            this.OnPrepareAtgProbeTypeConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<AtgProbeType> GetAtgProbeTypeClassConfiguration()
        {
            MappingConfiguration<AtgProbeType> configuration = new MappingConfiguration<AtgProbeType>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.AtgProbeType");
            return configuration;
        }
	
        public void PrepareAtgProbeTypeConfigurations(MappingConfiguration<AtgProbeType> configuration)
        {
            configuration.HasProperty(x => x.AtgProbeTypeId).ToColumn(@"AtgProbeTypeId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_AtgProbeTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.AtgProbeProtocolId).ToColumn(@"AtgProbeProtocolId").HasFieldName(@"_AtgProbeProtocolId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.BrandName).ToColumn(@"BrandName").HasFieldName(@"_BrandName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(255).IsUnicode();
            configuration.HasAssociation<Tank>(x => x.Tanks).HasFieldName(@"_Tanks").WithOpposite(op => op.AtgProbeType).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.AtgProbeTypeId == y.AtgProbeTypeId);
            configuration.HasAssociation<AtgProbeProtocol>(x => x.AtgProbeProtocol).HasFieldName(@"_AtgProbeProtocol").WithOpposite(op => op.AtgProbeTypes).HasConstraint((x, y) =>  x.AtgProbeProtocolId == y.AtgProbeProtocolId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareAtgProbeTypeConfigurations(MappingConfiguration<AtgProbeType> configuration);
    }

#endregion

#region AtgProbeProtocol Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<AtgProbeProtocol> GetAtgProbeProtocolMappingConfiguration()
        {
            MappingConfiguration<AtgProbeProtocol> configuration = this.GetAtgProbeProtocolClassConfiguration();
            this.PrepareAtgProbeProtocolConfigurations(configuration);
            this.OnPrepareAtgProbeProtocolConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<AtgProbeProtocol> GetAtgProbeProtocolClassConfiguration()
        {
            MappingConfiguration<AtgProbeProtocol> configuration = new MappingConfiguration<AtgProbeProtocol>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.AtgProbeProtocol");
            return configuration;
        }
	
        public void PrepareAtgProbeProtocolConfigurations(MappingConfiguration<AtgProbeProtocol> configuration)
        {
            configuration.HasProperty(x => x.AtgProbeProtocolId).ToColumn(@"AtgProbeProtocolId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_AtgProbeProtocolId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ProtocolName).ToColumn(@"ProtocolName").HasFieldName(@"_ProtocolName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(255).IsUnicode();
            configuration.HasProperty(x => x.EnumeratorValue).ToColumn(@"EnumeratorValue").HasFieldName(@"_EnumeratorValue").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasAssociation<AtgProbeType>(x => x.AtgProbeTypes).HasFieldName(@"_AtgProbeTypes").WithOpposite(op => op.AtgProbeProtocol).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.AtgProbeProtocolId == y.AtgProbeProtocolId);
        }

        partial void OnPrepareAtgProbeProtocolConfigurations(MappingConfiguration<AtgProbeProtocol> configuration);
    }

#endregion

#region ApplicationUserLoggon Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<ApplicationUserLoggon> GetApplicationUserLoggonMappingConfiguration()
        {
            MappingConfiguration<ApplicationUserLoggon> configuration = this.GetApplicationUserLoggonClassConfiguration();
            this.PrepareApplicationUserLoggonConfigurations(configuration);
            this.OnPrepareApplicationUserLoggonConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<ApplicationUserLoggon> GetApplicationUserLoggonClassConfiguration()
        {
            MappingConfiguration<ApplicationUserLoggon> configuration = new MappingConfiguration<ApplicationUserLoggon>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.ApplicationUserLoggon");
            return configuration;
        }
	
        public void PrepareApplicationUserLoggonConfigurations(MappingConfiguration<ApplicationUserLoggon> configuration)
        {
            configuration.HasProperty(x => x.ApplicationUserLoggonId).ToColumn(@"ApplicationUserLoggonId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_ApplicationUserLoggonId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ApplicationUserId).ToColumn(@"ApplicationUserId").HasFieldName(@"_ApplicationUserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.LoggonTime).ToColumn(@"LoggonTime").HasFieldName(@"_LoggonTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.LogoffTime).ToColumn(@"LogoffTime").HasFieldName(@"_LogoffTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasAssociation<ApplicationUser>(x => x.ApplicationUser).HasFieldName(@"_ApplicationUser").WithOpposite(op => op.ApplicationUserLoggons).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareApplicationUserLoggonConfigurations(MappingConfiguration<ApplicationUserLoggon> configuration);
    }

#endregion

#region ApplicationUser Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<ApplicationUser> GetApplicationUserMappingConfiguration()
        {
            MappingConfiguration<ApplicationUser> configuration = this.GetApplicationUserClassConfiguration();
            this.PrepareApplicationUserConfigurations(configuration);
            this.OnPrepareApplicationUserConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<ApplicationUser> GetApplicationUserClassConfiguration()
        {
            MappingConfiguration<ApplicationUser> configuration = new MappingConfiguration<ApplicationUser>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.ApplicationUser");
            return configuration;
        }
	
        public void PrepareApplicationUserConfigurations(MappingConfiguration<ApplicationUser> configuration)
        {
            configuration.HasProperty(x => x.ApplicationUserId).ToColumn(@"ApplicationUserId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_ApplicationUserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.UserName).ToColumn(@"UserName").HasFieldName(@"_UserName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.Password).ToColumn(@"Password").HasFieldName(@"_Password").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.UserLevel).ToColumn(@"UserLevel").HasFieldName(@"_UserLevel").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.PasswordEncrypted).ToColumn(@"PasswordEncrypted").HasFieldName(@"_PasswordEncrypted").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasAssociation<TankFilling>(x => x.TankFillings).HasFieldName(@"_TankFillings").WithOpposite(op => op.ApplicationUser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId);
            configuration.HasAssociation<SalesTransaction>(x => x.SalesTransactions).HasFieldName(@"_SalesTransactions").WithOpposite(op => op.ApplicationUser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId);
            configuration.HasAssociation<Invoice>(x => x.Invoices).HasFieldName(@"_Invoices").WithOpposite(op => op.ApplicationUser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId);
            configuration.HasAssociation<Balance>(x => x.Balances).HasFieldName(@"_Balances").WithOpposite(op => op.ApplicationUser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId);
            configuration.HasAssociation<ApplicationUserLoggon>(x => x.ApplicationUserLoggons).HasFieldName(@"_ApplicationUserLoggons").WithOpposite(op => op.ApplicationUser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId);
            configuration.HasAssociation<Shift>(x => x.Shifts).HasFieldName(@"_Shifts").WithOpposite(op => op.ApplicationUser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId);
            configuration.HasAssociation<FinTransaction>(x => x.FinTransactions).HasFieldName(@"_FinTransactions").WithOpposite(op => op.ApplicationUser).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId);
        }

        partial void OnPrepareApplicationUserConfigurations(MappingConfiguration<ApplicationUser> configuration);
    }

#endregion

#region AlertDefinition Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<AlertDefinition> GetAlertDefinitionMappingConfiguration()
        {
            MappingConfiguration<AlertDefinition> configuration = this.GetAlertDefinitionClassConfiguration();
            this.PrepareAlertDefinitionConfigurations(configuration);
            this.OnPrepareAlertDefinitionConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<AlertDefinition> GetAlertDefinitionClassConfiguration()
        {
            MappingConfiguration<AlertDefinition> configuration = new MappingConfiguration<AlertDefinition>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.AlertDefinition");
            return configuration;
        }
	
        public void PrepareAlertDefinitionConfigurations(MappingConfiguration<AlertDefinition> configuration)
        {
            configuration.HasProperty(x => x.AlertDefinitionId).ToColumn(@"AlertDefinitionId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_AlertDefinitionId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Name).ToColumn(@"Name").HasFieldName(@"_Name").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.AlertEnumValue).ToColumn(@"AlertEnumValue").HasFieldName(@"_AlertEnumValue").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.IsNozzleAlert).ToColumn(@"IsNozzleAlert").HasFieldName(@"_IsNozzleAlert").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.IsDispenserAlert).ToColumn(@"IsDispenserAlert").HasFieldName(@"_IsDispenserAlert").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.IsTankAlert).ToColumn(@"IsTankAlert").HasFieldName(@"_IsTankAlert").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.IsStationAlert).ToColumn(@"IsStationAlert").HasFieldName(@"_IsStationAlert").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.LockDevices).ToColumn(@"LockDevices").HasFieldName(@"_LockDevices").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.Expression).ToColumn(@"Expression").HasFieldName(@"_Expression").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.AlertIsDisabled).ToColumn(@"AlertIsDisabled").HasFieldName(@"_AlertIsDisabled").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.ErrorThreshold).ToColumn(@"ErrorThreshold").HasFieldName(@"_ErrorThreshold").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(3);
            configuration.HasProperty(x => x.ResendAlerts).ToColumn(@"ResendAlerts").HasFieldName(@"_ResendAlerts").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.AlerttMessage).ToColumn(@"AlerttMessage").HasFieldName(@"_AlerttMessage").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.IsGeneric).ToColumn(@"IsGeneric").HasFieldName(@"_IsGeneric").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.ResendAlertsInterval).ToColumn(@"ResendAlertsInterval").HasFieldName(@"_ResendAlertsInterval").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.AutoResolve).ToColumn(@"AutoResolve").HasFieldName(@"_AutoResolve").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.MethodForResolve).ToColumn(@"MethodForResolve").HasFieldName(@"_MethodForResolve").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(150).IsUnicode();
            configuration.HasAssociation<SystemEvent>(x => x.SystemEvents).HasFieldName(@"_SystemEvents").WithOpposite(op => op.AlertDefinition).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.AlertDefinitionId == y.AlertDefinitionId);
        }

        partial void OnPrepareAlertDefinitionConfigurations(MappingConfiguration<AlertDefinition> configuration);
    }

#endregion

#region TankFillingView Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TankFillingView> GetTankFillingViewMappingConfiguration()
        {
            MappingConfiguration<TankFillingView> configuration = this.GetTankFillingViewClassConfiguration();
            this.PrepareTankFillingViewConfigurations(configuration);
            this.OnPrepareTankFillingViewConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TankFillingView> GetTankFillingViewClassConfiguration()
        {
            MappingConfiguration<TankFillingView> configuration = new MappingConfiguration<TankFillingView>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TankFillingView");
            return configuration;
        }
	
        public void PrepareTankFillingViewConfigurations(MappingConfiguration<TankFillingView> configuration)
        {
            configuration.HasProperty(x => x.ViewId).ToColumn(@"ViewId").IsIdentity().HasFieldName(@"_ViewId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.StartTime).ToColumn(@"StartTime").HasFieldName(@"_StartTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.EndTime).ToColumn(@"EndTime").HasFieldName(@"_EndTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.LevelStart).ToColumn(@"LevelStart").HasFieldName(@"_LevelStart").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.LevelEnd).ToColumn(@"LevelEnd").HasFieldName(@"_LevelEnd").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TempStart).ToColumn(@"TempStart").HasFieldName(@"_TempStart").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(4);
            configuration.HasProperty(x => x.TempEnd).ToColumn(@"TempEnd").HasFieldName(@"_TempEnd").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TFVolume).ToColumn(@"TFVolume").HasFieldName(@"_TFVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.TFVolumeNormalized).ToColumn(@"TFVolumeNormalized").HasFieldName(@"_TFVolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.INVVolume).ToColumn(@"INVVolume").HasFieldName(@"_INVVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.INVVolumeNormalized).ToColumn(@"INVVolumeNormalized").HasFieldName(@"_INVVolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.INVTemp).ToColumn(@"INVTemp").HasFieldName(@"_INVTemp").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.FuelDensity).ToColumn(@"FuelDensity").HasFieldName(@"_FuelDensity").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.UnitPrice).ToColumn(@"UnitPrice").HasFieldName(@"_UnitPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.Number).ToColumn(@"Number").HasFieldName(@"_Number").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.VehiclePlateNumber).ToColumn(@"VehiclePlateNumber").HasFieldName(@"_VehiclePlateNumber").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(50).IsUnicode();
            configuration.HasProperty(x => x.Description).ToColumn(@"Description").HasFieldName(@"_Description").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.Name).ToColumn(@"Name").HasFieldName(@"_Name").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.TankNumber).ToColumn(@"TankNumber").HasFieldName(@"_TankNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.UserName).ToColumn(@"UserName").HasFieldName(@"_UserName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
        }

        partial void OnPrepareTankFillingViewConfigurations(MappingConfiguration<TankFillingView> configuration);
    }

#endregion

#region SalesView Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<SalesView> GetSalesViewMappingConfiguration()
        {
            MappingConfiguration<SalesView> configuration = this.GetSalesViewClassConfiguration();
            this.PrepareSalesViewConfigurations(configuration);
            this.OnPrepareSalesViewConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<SalesView> GetSalesViewClassConfiguration()
        {
            MappingConfiguration<SalesView> configuration = new MappingConfiguration<SalesView>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.SalesView");
            return configuration;
        }
	
        public void PrepareSalesViewConfigurations(MappingConfiguration<SalesView> configuration)
        {
            configuration.HasProperty(x => x.ViewId).ToColumn(@"ViewId").IsIdentity().HasFieldName(@"_ViewId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Volume).ToColumn(@"Volume").HasFieldName(@"_Volume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.VolumeNormalized).ToColumn(@"VolumeNormalized").HasFieldName(@"_VolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.UnitPrice).ToColumn(@"UnitPrice").HasFieldName(@"_UnitPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TotalPrice).ToColumn(@"TotalPrice").HasFieldName(@"_TotalPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TotalizerStart).ToColumn(@"TotalizerStart").HasFieldName(@"_TotalizerStart").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TotalizerEnd).ToColumn(@"TotalizerEnd").HasFieldName(@"_TotalizerEnd").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.Name).ToColumn(@"Name").HasFieldName(@"_Name").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.OfficialNozzleNumber).ToColumn(@"OfficialNozzleNumber").HasFieldName(@"_OfficialNozzleNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.OfficialPumpNumber).ToColumn(@"OfficialPumpNumber").HasFieldName(@"_OfficialPumpNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.TransactionTimeStamp).ToColumn(@"TransactionTimeStamp").HasFieldName(@"_TransactionTimeStamp").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.UserName).ToColumn(@"UserName").HasFieldName(@"_UserName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
        }

        partial void OnPrepareSalesViewConfigurations(MappingConfiguration<SalesView> configuration);
    }

#endregion

#region Shift Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Shift> GetShiftMappingConfiguration()
        {
            MappingConfiguration<Shift> configuration = this.GetShiftClassConfiguration();
            this.PrepareShiftConfigurations(configuration);
            this.OnPrepareShiftConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Shift> GetShiftClassConfiguration()
        {
            MappingConfiguration<Shift> configuration = new MappingConfiguration<Shift>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Shift");
            return configuration;
        }
	
        public void PrepareShiftConfigurations(MappingConfiguration<Shift> configuration)
        {
            configuration.HasProperty(x => x.ShiftId).ToColumn(@"ShiftId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_ShiftId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ApplicationUserId).ToColumn(@"ApplicationUserId").HasFieldName(@"_ApplicationUserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ShiftBegin).ToColumn(@"ShiftBegin").HasFieldName(@"_ShiftBegin").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.ShiftEnd).ToColumn(@"ShiftEnd").HasFieldName(@"_ShiftEnd").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasAssociation<ApplicationUser>(x => x.ApplicationUser).HasFieldName(@"_ApplicationUser").WithOpposite(op => op.Shifts).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareShiftConfigurations(MappingConfiguration<Shift> configuration);
    }

#endregion

#region InvoiceGroupView Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<InvoiceGroupView> GetInvoiceGroupViewMappingConfiguration()
        {
            MappingConfiguration<InvoiceGroupView> configuration = this.GetInvoiceGroupViewClassConfiguration();
            this.PrepareInvoiceGroupViewConfigurations(configuration);
            this.OnPrepareInvoiceGroupViewConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<InvoiceGroupView> GetInvoiceGroupViewClassConfiguration()
        {
            MappingConfiguration<InvoiceGroupView> configuration = new MappingConfiguration<InvoiceGroupView>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.InvoiceGroupView");
            return configuration;
        }
	
        public void PrepareInvoiceGroupViewConfigurations(MappingConfiguration<InvoiceGroupView> configuration)
        {
            configuration.HasProperty(x => x.ViewId).ToColumn(@"ViewId").IsIdentity().HasFieldName(@"_ViewId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.VatAmount).ToColumn(@"VatAmount").HasFieldName(@"_VatAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(38).HasScale(2);
            configuration.HasProperty(x => x.TransactionType).ToColumn(@"TransactionType").HasFieldName(@"_TransactionType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.TransactionDate).ToColumn(@"TransactionDate").HasFieldName(@"_TransactionDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.TotalAmount).ToColumn(@"TotalAmount").HasFieldName(@"_TotalAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(38).HasScale(2);
            configuration.HasProperty(x => x.NettoAmount).ToColumn(@"NettoAmount").HasFieldName(@"_NettoAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(38).HasScale(2);
            configuration.HasProperty(x => x.MinNumber).ToColumn(@"MinNumber").HasFieldName(@"_MinNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.MaxNumber).ToColumn(@"MaxNumber").HasFieldName(@"_MaxNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.Description).ToColumn(@"Description").HasFieldName(@"_Description").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.DateString2).ToColumn(@"DateString2").HasFieldName(@"_DateString2").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(10).IsUnicode();
            configuration.HasProperty(x => x.DateString).ToColumn(@"DateString").HasFieldName(@"_DateString").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(10).IsUnicode();
            configuration.HasProperty(x => x.IsInternal).ToColumn(@"IsInternal").HasFieldName(@"_IsInternal").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.TransactionSign).ToColumn(@"TransactionSign").HasFieldName(@"_TransactionSign").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNullable().HasPrecision(10);
        }

        partial void OnPrepareInvoiceGroupViewConfigurations(MappingConfiguration<InvoiceGroupView> configuration);
    }

#endregion

#region TankLevelStartView Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TankLevelStartView> GetTankLevelStartViewMappingConfiguration()
        {
            MappingConfiguration<TankLevelStartView> configuration = this.GetTankLevelStartViewClassConfiguration();
            this.PrepareTankLevelStartViewConfigurations(configuration);
            this.OnPrepareTankLevelStartViewConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TankLevelStartView> GetTankLevelStartViewClassConfiguration()
        {
            MappingConfiguration<TankLevelStartView> configuration = new MappingConfiguration<TankLevelStartView>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TankLevelStartView");
            return configuration;
        }
	
        public void PrepareTankLevelStartViewConfigurations(MappingConfiguration<TankLevelStartView> configuration)
        {
            configuration.HasProperty(x => x.ViewId).ToColumn(@"ViewId").IsIdentity().HasFieldName(@"_ViewId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.TansDate).ToColumn(@"TansDate").HasFieldName(@"_TansDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Level).ToColumn(@"Level").HasFieldName(@"_Level").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
        }

        partial void OnPrepareTankLevelStartViewConfigurations(MappingConfiguration<TankLevelStartView> configuration);
    }

#endregion

#region TankLevelEndView Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TankLevelEndView> GetTankLevelEndViewMappingConfiguration()
        {
            MappingConfiguration<TankLevelEndView> configuration = this.GetTankLevelEndViewClassConfiguration();
            this.PrepareTankLevelEndViewConfigurations(configuration);
            this.OnPrepareTankLevelEndViewConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TankLevelEndView> GetTankLevelEndViewClassConfiguration()
        {
            MappingConfiguration<TankLevelEndView> configuration = new MappingConfiguration<TankLevelEndView>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TankLevelEndView");
            return configuration;
        }
	
        public void PrepareTankLevelEndViewConfigurations(MappingConfiguration<TankLevelEndView> configuration)
        {
            configuration.HasProperty(x => x.ViewId).ToColumn(@"ViewId").IsIdentity().HasFieldName(@"_ViewId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.TansDate).ToColumn(@"TansDate").HasFieldName(@"_TansDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Level).ToColumn(@"Level").HasFieldName(@"_Level").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
        }

        partial void OnPrepareTankLevelEndViewConfigurations(MappingConfiguration<TankLevelEndView> configuration);
    }

#endregion

#region TankFillingInvoiceView Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TankFillingInvoiceView> GetTankFillingInvoiceViewMappingConfiguration()
        {
            MappingConfiguration<TankFillingInvoiceView> configuration = this.GetTankFillingInvoiceViewClassConfiguration();
            this.PrepareTankFillingInvoiceViewConfigurations(configuration);
            this.OnPrepareTankFillingInvoiceViewConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TankFillingInvoiceView> GetTankFillingInvoiceViewClassConfiguration()
        {
            MappingConfiguration<TankFillingInvoiceView> configuration = new MappingConfiguration<TankFillingInvoiceView>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TankFillingInvoiceView");
            return configuration;
        }
	
        public void PrepareTankFillingInvoiceViewConfigurations(MappingConfiguration<TankFillingInvoiceView> configuration)
        {
            configuration.HasProperty(x => x.ViewId).ToColumn(@"ViewId").IsIdentity().HasFieldName(@"_ViewId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.VolumeRealNormalized).ToColumn(@"VolumeRealNormalized").HasFieldName(@"_VolumeRealNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.VolumeReal).ToColumn(@"VolumeReal").HasFieldName(@"_VolumeReal").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.VolumeNormalized).ToColumn(@"VolumeNormalized").HasFieldName(@"_VolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(8);
            configuration.HasProperty(x => x.Volume).ToColumn(@"Volume").HasFieldName(@"_Volume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.TransactionType).ToColumn(@"TransactionType").HasFieldName(@"_TransactionType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.TransactionTimeEnd).ToColumn(@"TransactionTimeEnd").HasFieldName(@"_TransactionTimeEnd").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.TransactionTime).ToColumn(@"TransactionTime").HasFieldName(@"_TransactionTime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.TankTemperatureStart).ToColumn(@"TankTemperatureStart").HasFieldName(@"_TankTemperatureStart").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(4);
            configuration.HasProperty(x => x.TankTemperatureEnd).ToColumn(@"TankTemperatureEnd").HasFieldName(@"_TankTemperatureEnd").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.LevelStart).ToColumn(@"LevelStart").HasFieldName(@"_LevelStart").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.LevelEnd).ToColumn(@"LevelEnd").HasFieldName(@"_LevelEnd").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.InvoiceTypeId).ToColumn(@"InvoiceTypeId").HasFieldName(@"_InvoiceTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.InvoiceVolumeNormalized).ToColumn(@"InvoiceVolumeNormalized").HasFieldName(@"_InvoiceVolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.InvoiceVolume).ToColumn(@"InvoiceVolume").HasFieldName(@"_InvoiceVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
        }

        partial void OnPrepareTankFillingInvoiceViewConfigurations(MappingConfiguration<TankFillingInvoiceView> configuration);
    }

#endregion

#region InvoicePrintView Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<InvoicePrintView> GetInvoicePrintViewMappingConfiguration()
        {
            MappingConfiguration<InvoicePrintView> configuration = this.GetInvoicePrintViewClassConfiguration();
            this.PrepareInvoicePrintViewConfigurations(configuration);
            this.OnPrepareInvoicePrintViewConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<InvoicePrintView> GetInvoicePrintViewClassConfiguration()
        {
            MappingConfiguration<InvoicePrintView> configuration = new MappingConfiguration<InvoicePrintView>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.InvoicePrintView");
            return configuration;
        }
	
        public void PrepareInvoicePrintViewConfigurations(MappingConfiguration<InvoicePrintView> configuration)
        {
            configuration.HasProperty(x => x.InvoiceLineId).ToColumn(@"InvoiceLineId").IsIdentity().HasFieldName(@"_InvoiceLineId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.VolumeNormalized).ToColumn(@"VolumeNormalized").HasFieldName(@"_VolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.Volume).ToColumn(@"Volume").HasFieldName(@"_Volume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.VehicleNumber).ToColumn(@"VehicleNumber").HasFieldName(@"_VehicleNumber").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(20).IsUnicode();
            configuration.HasProperty(x => x.VatAmount).ToColumn(@"VatAmount").HasFieldName(@"_VatAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.UnitPrice).ToColumn(@"UnitPrice").HasFieldName(@"_UnitPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(5);
            configuration.HasProperty(x => x.TransactionDate).ToColumn(@"TransactionDate").HasFieldName(@"_TransactionDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.TraderTin).ToColumn(@"TraderTin").HasFieldName(@"_TraderTin").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(40).IsUnicode();
            configuration.HasProperty(x => x.TraderName).ToColumn(@"TraderName").HasFieldName(@"_TraderName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.TotalAmount).ToColumn(@"TotalAmount").HasFieldName(@"_TotalAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.Temperature).ToColumn(@"Temperature").HasFieldName(@"_Temperature").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.Series).ToColumn(@"Series").HasFieldName(@"_Series").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(10).IsUnicode();
            configuration.HasProperty(x => x.Number).ToColumn(@"Number").HasFieldName(@"_Number").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.NettoAmount).ToColumn(@"NettoAmount").HasFieldName(@"_NettoAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.Name).ToColumn(@"Name").HasFieldName(@"_Name").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.InvoiceId).ToColumn(@"InvoiceId").HasFieldName(@"_InvoiceId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Description).ToColumn(@"Description").HasFieldName(@"_Description").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.CompanyTIN).ToColumn(@"CompanyTIN").HasFieldName(@"_CompanyTIN").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.CompanyTaxOffice).ToColumn(@"CompanyTaxOffice").HasFieldName(@"_CompanyTaxOffice").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.CompanyPhone).ToColumn(@"CompanyPhone").HasFieldName(@"_CompanyPhone").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.CompanyOccupation).ToColumn(@"CompanyOccupation").HasFieldName(@"_CompanyOccupation").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.CompanyName).ToColumn(@"CompanyName").HasFieldName(@"_CompanyName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.CompanyFax).ToColumn(@"CompanyFax").HasFieldName(@"_CompanyFax").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.CompanyCity).ToColumn(@"CompanyCity").HasFieldName(@"_CompanyCity").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.CompanyAddress).ToColumn(@"CompanyAddress").HasFieldName(@"_CompanyAddress").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.Code).ToColumn(@"Code").HasFieldName(@"_Code").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(30).IsUnicode();
            configuration.HasProperty(x => x.OfficialPumpNumber).ToColumn(@"OfficialPumpNumber").HasFieldName(@"_OfficialPumpNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.OfficialNozzleNumber).ToColumn(@"OfficialNozzleNumber").HasFieldName(@"_OfficialNozzleNumber").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.InvoiceSignature).ToColumn(@"InvoiceSignature").HasFieldName(@"_InvoiceSignature").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(255).IsUnicode();
        }

        partial void OnPrepareInvoicePrintViewConfigurations(MappingConfiguration<InvoicePrintView> configuration);
    }

#endregion

#region TankSaleView Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TankSaleView> GetTankSaleViewMappingConfiguration()
        {
            MappingConfiguration<TankSaleView> configuration = this.GetTankSaleViewClassConfiguration();
            this.PrepareTankSaleViewConfigurations(configuration);
            this.OnPrepareTankSaleViewConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TankSaleView> GetTankSaleViewClassConfiguration()
        {
            MappingConfiguration<TankSaleView> configuration = new MappingConfiguration<TankSaleView>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TankSaleView");
            return configuration;
        }
	
        public void PrepareTankSaleViewConfigurations(MappingConfiguration<TankSaleView> configuration)
        {
            configuration.HasProperty(x => x.ViewId).ToColumn(@"ViewId").IsIdentity().HasFieldName(@"_ViewId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.VolumeNormalized).ToColumn(@"VolumeNormalized").HasFieldName(@"_VolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.Volume).ToColumn(@"Volume").HasFieldName(@"_Volume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.UnitPrice).ToColumn(@"UnitPrice").HasFieldName(@"_UnitPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TransactionTimeStamp).ToColumn(@"TransactionTimeStamp").HasFieldName(@"_TransactionTimeStamp").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.TotalPrice).ToColumn(@"TotalPrice").HasFieldName(@"_TotalPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TankSaleId).ToColumn(@"TankSaleId").HasFieldName(@"_TankSaleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.StartVolumeNormalized).ToColumn(@"StartVolumeNormalized").HasFieldName(@"_StartVolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.StartVolume).ToColumn(@"StartVolume").HasFieldName(@"_StartVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.StartTemperature).ToColumn(@"StartTemperature").HasFieldName(@"_StartTemperature").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.StartLevel).ToColumn(@"StartLevel").HasFieldName(@"_StartLevel").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.SalesTransactionId).ToColumn(@"SalesTransactionId").HasFieldName(@"_SalesTransactionId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.NozzleId).ToColumn(@"NozzleId").HasFieldName(@"_NozzleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.FuelDensity).ToColumn(@"FuelDensity").HasFieldName(@"_FuelDensity").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.EndVolumeNormalized).ToColumn(@"EndVolumeNormalized").HasFieldName(@"_EndVolumeNormalized").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.EndVolume).ToColumn(@"EndVolume").HasFieldName(@"_EndVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.EndTemperature).ToColumn(@"EndTemperature").HasFieldName(@"_EndTemperature").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.EndLevel).ToColumn(@"EndLevel").HasFieldName(@"_EndLevel").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.CRC).ToColumn(@"CRC").HasFieldName(@"_CRC").WithOpenAccessType(OpenAccessType.Int64).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bigint").IsNotNullable();
        }

        partial void OnPrepareTankSaleViewConfigurations(MappingConfiguration<TankSaleView> configuration);
    }

#endregion

#region OutdoorPaymentTerminalTimeSchedule Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<OutdoorPaymentTerminalTimeSchedule> GetOutdoorPaymentTerminalTimeScheduleMappingConfiguration()
        {
            MappingConfiguration<OutdoorPaymentTerminalTimeSchedule> configuration = this.GetOutdoorPaymentTerminalTimeScheduleClassConfiguration();
            this.PrepareOutdoorPaymentTerminalTimeScheduleConfigurations(configuration);
            this.OnPrepareOutdoorPaymentTerminalTimeScheduleConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<OutdoorPaymentTerminalTimeSchedule> GetOutdoorPaymentTerminalTimeScheduleClassConfiguration()
        {
            MappingConfiguration<OutdoorPaymentTerminalTimeSchedule> configuration = new MappingConfiguration<OutdoorPaymentTerminalTimeSchedule>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.OutdoorPaymentTerminalTimeSchedule");
            return configuration;
        }
	
        public void PrepareOutdoorPaymentTerminalTimeScheduleConfigurations(MappingConfiguration<OutdoorPaymentTerminalTimeSchedule> configuration)
        {
            configuration.HasProperty(x => x.OutdoorPaymentTerminalTimeScheduleId).ToColumn(@"OutdoorPaymentTerminalTimeScheduleId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_OutdoorPaymentTerminalTimeScheduleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.OutdoorPaymentTerminalScheduleId).ToColumn(@"OutdoorPaymentTerminalScheduleId").HasFieldName(@"_OutdoorPaymentTerminalScheduleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TimeFrom).ToColumn(@"TimeFrom").HasFieldName(@"_TimeFrom").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("time").IsNotNullable();
            configuration.HasProperty(x => x.Duration).ToColumn(@"Duration").HasFieldName(@"_Duration").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasAssociation<OutdoorPaymentTerminalSchedule>(x => x.OutdoorPaymentTerminalSchedule).HasFieldName(@"_OutdoorPaymentTerminalSchedule").WithOpposite(op => op.OutdoorPaymentTerminalTimeSchedules).HasConstraint((x, y) =>  x.OutdoorPaymentTerminalScheduleId == y.OutdoorPaymentTerminalScheduleId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareOutdoorPaymentTerminalTimeScheduleConfigurations(MappingConfiguration<OutdoorPaymentTerminalTimeSchedule> configuration);
    }

#endregion

#region OutdoorPaymentTerminalSchedule Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<OutdoorPaymentTerminalSchedule> GetOutdoorPaymentTerminalScheduleMappingConfiguration()
        {
            MappingConfiguration<OutdoorPaymentTerminalSchedule> configuration = this.GetOutdoorPaymentTerminalScheduleClassConfiguration();
            this.PrepareOutdoorPaymentTerminalScheduleConfigurations(configuration);
            this.OnPrepareOutdoorPaymentTerminalScheduleConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<OutdoorPaymentTerminalSchedule> GetOutdoorPaymentTerminalScheduleClassConfiguration()
        {
            MappingConfiguration<OutdoorPaymentTerminalSchedule> configuration = new MappingConfiguration<OutdoorPaymentTerminalSchedule>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.OutdoorPaymentTerminalSchedule");
            return configuration;
        }
	
        public void PrepareOutdoorPaymentTerminalScheduleConfigurations(MappingConfiguration<OutdoorPaymentTerminalSchedule> configuration)
        {
            configuration.HasProperty(x => x.OutdoorPaymentTerminalScheduleId).ToColumn(@"OutdoorPaymentTerminalScheduleId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_OutdoorPaymentTerminalScheduleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.OutdoorPaymentTerminalId).ToColumn(@"OutdoorPaymentTerminalId").HasFieldName(@"_OutdoorPaymentTerminalId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.DayOfWeek).ToColumn(@"DayOfWeek").HasFieldName(@"_DayOfWeek").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.IsDayOff).ToColumn(@"IsDayOff").HasFieldName(@"_IsDayOff").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNullable();
            configuration.HasProperty(x => x.ScheduleDate).ToColumn(@"ScheduleDate").HasFieldName(@"_ScheduleDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.ScheduleType).ToColumn(@"ScheduleType").HasFieldName(@"_ScheduleType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.OutdoorPaymentTerminalNozzleId).ToColumn(@"OutdoorPaymentTerminalNozzleId").HasFieldName(@"_OutdoorPaymentTerminalNozzleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasAssociation<OutdoorPaymentTerminalTimeSchedule>(x => x.OutdoorPaymentTerminalTimeSchedules).HasFieldName(@"_OutdoorPaymentTerminalTimeSchedules").WithOpposite(op => op.OutdoorPaymentTerminalSchedule).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.OutdoorPaymentTerminalScheduleId == y.OutdoorPaymentTerminalScheduleId);
            configuration.HasAssociation<OutdoorPaymentTerminalNozzle>(x => x.OutdoorPaymentTerminalNozzle).HasFieldName(@"_OutdoorPaymentTerminalNozzle").WithOpposite(op => op.OutdoorPaymentTerminalSchedules).HasConstraint((x, y) =>  x.OutdoorPaymentTerminalNozzleId == y.OutdoorPaymentTerminalNozzleId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<OutdoorPaymentTerminal>(x => x.OutdoorPaymentTerminal).HasFieldName(@"_OutdoorPaymentTerminal").WithOpposite(op => op.OutdoorPaymentTerminalSchedules).HasConstraint((x, y) =>  x.OutdoorPaymentTerminalId == y.OutdoorPaymentTerminalId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareOutdoorPaymentTerminalScheduleConfigurations(MappingConfiguration<OutdoorPaymentTerminalSchedule> configuration);
    }

#endregion

#region OutdoorPaymentTerminalNozzle Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<OutdoorPaymentTerminalNozzle> GetOutdoorPaymentTerminalNozzleMappingConfiguration()
        {
            MappingConfiguration<OutdoorPaymentTerminalNozzle> configuration = this.GetOutdoorPaymentTerminalNozzleClassConfiguration();
            this.PrepareOutdoorPaymentTerminalNozzleConfigurations(configuration);
            this.OnPrepareOutdoorPaymentTerminalNozzleConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<OutdoorPaymentTerminalNozzle> GetOutdoorPaymentTerminalNozzleClassConfiguration()
        {
            MappingConfiguration<OutdoorPaymentTerminalNozzle> configuration = new MappingConfiguration<OutdoorPaymentTerminalNozzle>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.OutdoorPaymentTerminalNozzle");
            return configuration;
        }
	
        public void PrepareOutdoorPaymentTerminalNozzleConfigurations(MappingConfiguration<OutdoorPaymentTerminalNozzle> configuration)
        {
            configuration.HasProperty(x => x.OutdoorPaymentTerminalNozzleId).ToColumn(@"OutdoorPaymentTerminalNozzleId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_OutdoorPaymentTerminalNozzleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.OutdoorPaymentTerminalId).ToColumn(@"OutdoorPaymentTerminalId").HasFieldName(@"_OutdoorPaymentTerminalId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.NozzleId).ToColumn(@"NozzleId").HasFieldName(@"_NozzleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.IsDisabled).ToColumn(@"IsDisabled").HasFieldName(@"_IsDisabled").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasAssociation<Nozzle>(x => x.Nozzle).HasFieldName(@"_Nozzle").WithOpposite(op => op.OutdoorPaymentTerminalNozzles).HasConstraint((x, y) =>  x.NozzleId == y.NozzleId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<OutdoorPaymentTerminalSchedule>(x => x.OutdoorPaymentTerminalSchedules).HasFieldName(@"_OutdoorPaymentTerminalSchedules").WithOpposite(op => op.OutdoorPaymentTerminalNozzle).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.OutdoorPaymentTerminalNozzleId == y.OutdoorPaymentTerminalNozzleId);
            configuration.HasAssociation<OutdoorPaymentTerminal>(x => x.OutdoorPaymentTerminal).HasFieldName(@"_OutdoorPaymentTerminal").WithOpposite(op => op.OutdoorPaymentTerminalNozzles).HasConstraint((x, y) =>  x.OutdoorPaymentTerminalId == y.OutdoorPaymentTerminalId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareOutdoorPaymentTerminalNozzleConfigurations(MappingConfiguration<OutdoorPaymentTerminalNozzle> configuration);
    }

#endregion

#region OutdoorPaymentTerminal Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<OutdoorPaymentTerminal> GetOutdoorPaymentTerminalMappingConfiguration()
        {
            MappingConfiguration<OutdoorPaymentTerminal> configuration = this.GetOutdoorPaymentTerminalClassConfiguration();
            this.PrepareOutdoorPaymentTerminalConfigurations(configuration);
            this.OnPrepareOutdoorPaymentTerminalConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<OutdoorPaymentTerminal> GetOutdoorPaymentTerminalClassConfiguration()
        {
            MappingConfiguration<OutdoorPaymentTerminal> configuration = new MappingConfiguration<OutdoorPaymentTerminal>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.OutdoorPaymentTerminal");
            return configuration;
        }
	
        public void PrepareOutdoorPaymentTerminalConfigurations(MappingConfiguration<OutdoorPaymentTerminal> configuration)
        {
            configuration.HasProperty(x => x.OutdoorPaymentTerminalId).ToColumn(@"OutdoorPaymentTerminalId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_OutdoorPaymentTerminalId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ServerIp).ToColumn(@"ServerIp").HasFieldName(@"_ServerIp").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(20).IsUnicode();
            configuration.HasProperty(x => x.ServerPort).ToColumn(@"ServerPort").HasFieldName(@"_ServerPort").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.ClientIp).ToColumn(@"ClientIp").HasFieldName(@"_ClientIp").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(20).IsUnicode();
            configuration.HasProperty(x => x.ClientPort).ToColumn(@"ClientPort").HasFieldName(@"_ClientPort").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.Name).ToColumn(@"Name").HasFieldName(@"_Name").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(50).IsUnicode();
            configuration.HasProperty(x => x.TerminalId).ToColumn(@"TerminalId").HasFieldName(@"_TerminalId").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.TerminalAssembly).ToColumn(@"TerminalAssembly").HasFieldName(@"_TerminalAssembly").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(250).IsUnicode();
            configuration.HasProperty(x => x.IsDisabled).ToColumn(@"IsDisabled").HasFieldName(@"_IsDisabled").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.TerminalType).ToColumn(@"TerminalType").HasFieldName(@"_TerminalType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.ConnectionType).ToColumn(@"ConnectionType").HasFieldName(@"_ConnectionType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasAssociation<OutdoorPaymentTerminalSchedule>(x => x.OutdoorPaymentTerminalSchedules).HasFieldName(@"_OutdoorPaymentTerminalSchedules").WithOpposite(op => op.OutdoorPaymentTerminal).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.OutdoorPaymentTerminalId == y.OutdoorPaymentTerminalId);
            configuration.HasAssociation<OutdoorPaymentTerminalNozzle>(x => x.OutdoorPaymentTerminalNozzles).HasFieldName(@"_OutdoorPaymentTerminalNozzles").WithOpposite(op => op.OutdoorPaymentTerminal).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.OutdoorPaymentTerminalId == y.OutdoorPaymentTerminalId);
            configuration.HasAssociation<OutdoorPaymentTerminalController>(x => x.OutdoorPaymentTerminalControllers).HasFieldName(@"_OutdoorPaymentTerminalControllers").WithOpposite(op => op.OutdoorPaymentTerminal).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.OutdoorPaymentTerminalId == y.OutdoorPaymentTerminalId);
        }

        partial void OnPrepareOutdoorPaymentTerminalConfigurations(MappingConfiguration<OutdoorPaymentTerminal> configuration);
    }

#endregion

#region OutdoorPaymentTerminalController Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<OutdoorPaymentTerminalController> GetOutdoorPaymentTerminalControllerMappingConfiguration()
        {
            MappingConfiguration<OutdoorPaymentTerminalController> configuration = this.GetOutdoorPaymentTerminalControllerClassConfiguration();
            this.PrepareOutdoorPaymentTerminalControllerConfigurations(configuration);
            this.OnPrepareOutdoorPaymentTerminalControllerConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<OutdoorPaymentTerminalController> GetOutdoorPaymentTerminalControllerClassConfiguration()
        {
            MappingConfiguration<OutdoorPaymentTerminalController> configuration = new MappingConfiguration<OutdoorPaymentTerminalController>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.OutdoorPaymentTerminalController");
            return configuration;
        }
	
        public void PrepareOutdoorPaymentTerminalControllerConfigurations(MappingConfiguration<OutdoorPaymentTerminalController> configuration)
        {
            configuration.HasProperty(x => x.OutdoorPaymentTerminalControllerId).ToColumn(@"OutdoorPaymentTerminalControllerId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_OutdoorPaymentTerminalControllerId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.OutdoorPaymentTerminalId).ToColumn(@"OutdoorPaymentTerminalId").HasFieldName(@"_OutdoorPaymentTerminalId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.CommunicationControllerId).ToColumn(@"CommunicationControllerId").HasFieldName(@"_CommunicationControllerId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasAssociation<CommunicationController>(x => x.CommunicationController).HasFieldName(@"_CommunicationController").WithOpposite(op => op.OutdoorPaymentTerminalControllers).HasConstraint((x, y) =>  x.CommunicationControllerId == y.CommunicationControllerId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<OutdoorPaymentTerminal>(x => x.OutdoorPaymentTerminal).HasFieldName(@"_OutdoorPaymentTerminal").WithOpposite(op => op.OutdoorPaymentTerminalControllers).HasConstraint((x, y) =>  x.OutdoorPaymentTerminalId == y.OutdoorPaymentTerminalId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareOutdoorPaymentTerminalControllerConfigurations(MappingConfiguration<OutdoorPaymentTerminalController> configuration);
    }

#endregion

#region TankCheck Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<TankCheck> GetTankCheckMappingConfiguration()
        {
            MappingConfiguration<TankCheck> configuration = this.GetTankCheckClassConfiguration();
            this.PrepareTankCheckConfigurations(configuration);
            this.OnPrepareTankCheckConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<TankCheck> GetTankCheckClassConfiguration()
        {
            MappingConfiguration<TankCheck> configuration = new MappingConfiguration<TankCheck>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.TankCheck");
            return configuration;
        }
	
        public void PrepareTankCheckConfigurations(MappingConfiguration<TankCheck> configuration)
        {
            configuration.HasProperty(x => x.TankCheckId).ToColumn(@"TankCheckId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_TankCheckId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TankId).ToColumn(@"TankId").HasFieldName(@"_TankId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TankLevel).ToColumn(@"TankLevel").HasFieldName(@"_TankLevel").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.CheckDate).ToColumn(@"CheckDate").HasFieldName(@"_CheckDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.Temperature).ToColumn(@"Temperature").HasFieldName(@"_Temperature").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.SentDatetime).ToColumn(@"SentDatetime").HasFieldName(@"_SentDatetime").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNullable();
            configuration.HasAssociation<Tank>(x => x.Tank).HasFieldName(@"_Tank").WithOpposite(op => op.TankChecks).HasConstraint((x, y) =>  x.TankId == y.TankId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareTankCheckConfigurations(MappingConfiguration<TankCheck> configuration);
    }

#endregion

#region ChangeLog Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<ChangeLog> GetChangeLogMappingConfiguration()
        {
            MappingConfiguration<ChangeLog> configuration = this.GetChangeLogClassConfiguration();
            this.PrepareChangeLogConfigurations(configuration);
            this.OnPrepareChangeLogConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<ChangeLog> GetChangeLogClassConfiguration()
        {
            MappingConfiguration<ChangeLog> configuration = new MappingConfiguration<ChangeLog>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.ChangeLog");
            return configuration;
        }
	
        public void PrepareChangeLogConfigurations(MappingConfiguration<ChangeLog> configuration)
        {
            configuration.HasProperty(x => x.ChangeLogId).ToColumn(@"ChangeLogId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_ChangeLogId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.DateTimeStamp).ToColumn(@"DateTimeStamp").HasFieldName(@"_DateTimeStamp").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.TableName).ToColumn(@"TableName").HasFieldName(@"_TableName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.ColumnName).ToColumn(@"ColumnName").HasFieldName(@"_ColumnName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.AdditionalDescription).ToColumn(@"AdditionalDescription").HasFieldName(@"_AdditionalDescription").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.OldValue).ToColumn(@"OldValue").HasFieldName(@"_OldValue").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.NewValue).ToColumn(@"NewValue").HasFieldName(@"_NewValue").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
            configuration.HasProperty(x => x.ApplicationUserName).ToColumn(@"ApplicationUserName").HasFieldName(@"_ApplicationUserName").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.PrimaryKey).ToColumn(@"PrimaryKey").HasFieldName(@"_PrimaryKey").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(50).IsUnicode();
        }

        partial void OnPrepareChangeLogConfigurations(MappingConfiguration<ChangeLog> configuration);
    }

#endregion

#region SaleDataView Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<SaleDataView> GetSaleDataViewMappingConfiguration()
        {
            MappingConfiguration<SaleDataView> configuration = this.GetSaleDataViewClassConfiguration();
            this.PrepareSaleDataViewConfigurations(configuration);
            this.OnPrepareSaleDataViewConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<SaleDataView> GetSaleDataViewClassConfiguration()
        {
            MappingConfiguration<SaleDataView> configuration = new MappingConfiguration<SaleDataView>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.SaleDataView");
            return configuration;
        }
	
        public void PrepareSaleDataViewConfigurations(MappingConfiguration<SaleDataView> configuration)
        {
            configuration.HasProperty(x => x.ViewId).ToColumn(@"ViewId").IsIdentity().HasFieldName(@"_ViewId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.Volume).ToColumn(@"Volume").HasFieldName(@"_Volume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.VatAmount).ToColumn(@"VatAmount").HasFieldName(@"_VatAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.UnitPrice).ToColumn(@"UnitPrice").HasFieldName(@"_UnitPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TransactionTimeStamp).ToColumn(@"TransactionTimeStamp").HasFieldName(@"_TransactionTimeStamp").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.TotalPrice).ToColumn(@"TotalPrice").HasFieldName(@"_TotalPrice").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TotalizerStart).ToColumn(@"TotalizerStart").HasFieldName(@"_TotalizerStart").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TotalizerEnd).ToColumn(@"TotalizerEnd").HasFieldName(@"_TotalizerEnd").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.TotalAmount).ToColumn(@"TotalAmount").HasFieldName(@"_TotalAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.StartVolume).ToColumn(@"StartVolume").HasFieldName(@"_StartVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.StartLevel).ToColumn(@"StartLevel").HasFieldName(@"_StartLevel").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.Number).ToColumn(@"Number").HasFieldName(@"_Number").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.NettoAmount).ToColumn(@"NettoAmount").HasFieldName(@"_NettoAmount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.InvoiceLineVolume).ToColumn(@"InvoiceLineVolume").HasFieldName(@"_InvoiceLineVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(3);
            configuration.HasProperty(x => x.InvoiceLineId).ToColumn(@"InvoiceLineId").HasFieldName(@"_InvoiceLineId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.EndVolume).ToColumn(@"EndVolume").HasFieldName(@"_EndVolume").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(19).HasScale(4);
            configuration.HasProperty(x => x.EndLevel).ToColumn(@"EndLevel").HasFieldName(@"_EndLevel").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNullable().HasPrecision(18).HasScale(3);
        }

        partial void OnPrepareSaleDataViewConfigurations(MappingConfiguration<SaleDataView> configuration);
    }

#endregion

#region DeviceSetting Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<DeviceSetting> GetDeviceSettingMappingConfiguration()
        {
            MappingConfiguration<DeviceSetting> configuration = this.GetDeviceSettingClassConfiguration();
            this.PrepareDeviceSettingConfigurations(configuration);
            this.OnPrepareDeviceSettingConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<DeviceSetting> GetDeviceSettingClassConfiguration()
        {
            MappingConfiguration<DeviceSetting> configuration = new MappingConfiguration<DeviceSetting>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.DeviceSetting");
            return configuration;
        }
	
        public void PrepareDeviceSettingConfigurations(MappingConfiguration<DeviceSetting> configuration)
        {
            configuration.HasProperty(x => x.DeviceSettingId).ToColumn(@"DeviceSettingId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_DeviceSettingId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.DeviceId).ToColumn(@"DeviceId").HasFieldName(@"_DeviceId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.DeviceType).ToColumn(@"DeviceType").HasFieldName(@"_DeviceType").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("varchar").IsNotNullable().HasLength(150).IsNotUnicode();
            configuration.HasProperty(x => x.SettingKey).ToColumn(@"SettingKey").HasFieldName(@"_SettingKey").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(250).IsUnicode();
            configuration.HasProperty(x => x.SettingValue).ToColumn(@"SettingValue").HasFieldName(@"_SettingValue").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNotNullable().IsUnicode();
            configuration.HasProperty(x => x.Description).ToColumn(@"Description").HasFieldName(@"_Description").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(500).IsUnicode();
            configuration.HasProperty(x => x.IsSerialNumber).ToColumn(@"IsSerialNumber").HasFieldName(@"_IsSerialNumber").WithOpenAccessType(OpenAccessType.Boolean).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("bit").IsNotNullable();
        }

        partial void OnPrepareDeviceSettingConfigurations(MappingConfiguration<DeviceSetting> configuration);
    }

#endregion

#region FinancialTransaction Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<FinancialTransaction> GetFinancialTransactionMappingConfiguration()
        {
            MappingConfiguration<FinancialTransaction> configuration = this.GetFinancialTransactionClassConfiguration();
            this.PrepareFinancialTransactionConfigurations(configuration);
            this.OnPrepareFinancialTransactionConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<FinancialTransaction> GetFinancialTransactionClassConfiguration()
        {
            MappingConfiguration<FinancialTransaction> configuration = new MappingConfiguration<FinancialTransaction>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.FinancialTransaction");
            return configuration;
        }
	
        public void PrepareFinancialTransactionConfigurations(MappingConfiguration<FinancialTransaction> configuration)
        {
            configuration.HasProperty(x => x.FinancialTransactionId).ToColumn(@"FinancialTransactionId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_FinancialTransactionId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.InvoiceId).ToColumn(@"InvoiceId").HasFieldName(@"_InvoiceId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TransactionDate).ToColumn(@"TransactionDate").HasFieldName(@"_TransactionDate").WithOpenAccessType(OpenAccessType.DateTime).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.Amount).ToColumn(@"Amount").HasFieldName(@"_Amount").WithOpenAccessType(OpenAccessType.Decimal).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("decimal").IsNotNullable().HasPrecision(19).HasScale(2);
            configuration.HasProperty(x => x.TransactionTYpe).ToColumn(@"TransactionTYpe").HasFieldName(@"_TransactionTYpe").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.Notes).ToColumn(@"Notes").HasFieldName(@"_Notes").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("ntext").IsNullable().IsUnicode();
        }

        partial void OnPrepareFinancialTransactionConfigurations(MappingConfiguration<FinancialTransaction> configuration);
    }

#endregion

#region OilCompany Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<OilCompany> GetOilCompanyMappingConfiguration()
        {
            MappingConfiguration<OilCompany> configuration = this.GetOilCompanyClassConfiguration();
            this.PrepareOilCompanyConfigurations(configuration);
            this.OnPrepareOilCompanyConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<OilCompany> GetOilCompanyClassConfiguration()
        {
            MappingConfiguration<OilCompany> configuration = new MappingConfiguration<OilCompany>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.OilCompany");
            return configuration;
        }
	
        public void PrepareOilCompanyConfigurations(MappingConfiguration<OilCompany> configuration)
        {
            configuration.HasProperty(x => x.OilCompanyId).ToColumn(@"OilCompanyId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_OilCompanyId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Name).ToColumn(@"Name").HasFieldName(@"_Name").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(150).IsUnicode();
            configuration.HasProperty(x => x.Logo).ToColumn(@"Logo").HasFieldName(@"_Logo").WithOpenAccessType(OpenAccessType.VarBinary).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("varbinary(max)").IsNotNullable();
        }

        partial void OnPrepareOilCompanyConfigurations(MappingConfiguration<OilCompany> configuration);
    }

#endregion

#region FleetManagmentSchedule Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<FleetManagmentSchedule> GetFleetManagmentScheduleMappingConfiguration()
        {
            MappingConfiguration<FleetManagmentSchedule> configuration = this.GetFleetManagmentScheduleClassConfiguration();
            this.PrepareFleetManagmentScheduleConfigurations(configuration);
            this.OnPrepareFleetManagmentScheduleConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<FleetManagmentSchedule> GetFleetManagmentScheduleClassConfiguration()
        {
            MappingConfiguration<FleetManagmentSchedule> configuration = new MappingConfiguration<FleetManagmentSchedule>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.FleetManagmentSchedule");
            return configuration;
        }
	
        public void PrepareFleetManagmentScheduleConfigurations(MappingConfiguration<FleetManagmentSchedule> configuration)
        {
            configuration.HasProperty(x => x.FleetManagmentScheduleId).ToColumn(@"FleetManagmentScheduleId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_FleetManagmentScheduleId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.FleetManagerDispenserId).ToColumn(@"FleetManagerDispenserId").HasFieldName(@"_FleetManagerDispenserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TimeFrom).ToColumn(@"TimeFrom").HasFieldName(@"_TimeFrom").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.TimeTo).ToColumn(@"TimeTo").HasFieldName(@"_TimeTo").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.DayMask).ToColumn(@"DayMask").HasFieldName(@"_DayMask").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasAssociation<FleetManagerDispenser>(x => x.FleetManagerDispenser).HasFieldName(@"_FleetManagerDispenser").WithOpposite(op => op.FleetManagmentSchedules).HasConstraint((x, y) =>  x.FleetManagerDispenserId == y.FleetManagerDispenserId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareFleetManagmentScheduleConfigurations(MappingConfiguration<FleetManagmentSchedule> configuration);
    }

#endregion

#region FleetManagmentCotroller Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<FleetManagmentCotroller> GetFleetManagmentCotrollerMappingConfiguration()
        {
            MappingConfiguration<FleetManagmentCotroller> configuration = this.GetFleetManagmentCotrollerClassConfiguration();
            this.PrepareFleetManagmentCotrollerConfigurations(configuration);
            this.OnPrepareFleetManagmentCotrollerConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<FleetManagmentCotroller> GetFleetManagmentCotrollerClassConfiguration()
        {
            MappingConfiguration<FleetManagmentCotroller> configuration = new MappingConfiguration<FleetManagmentCotroller>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.FleetManagmentCotroller");
            return configuration;
        }
	
        public void PrepareFleetManagmentCotrollerConfigurations(MappingConfiguration<FleetManagmentCotroller> configuration)
        {
            configuration.HasProperty(x => x.FleetManagmentCotrollerId).ToColumn(@"FleetManagmentCotrollerId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_FleetManagmentCotrollerId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ComPort).ToColumn(@"ComPort").HasFieldName(@"_ComPort").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNotNullable().HasLength(20).IsUnicode();
            configuration.HasProperty(x => x.BaudRate).ToColumn(@"BaudRate").HasFieldName(@"_BaudRate").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.Parity).ToColumn(@"Parity").HasFieldName(@"_Parity").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.DataBits).ToColumn(@"DataBits").HasFieldName(@"_DataBits").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.StopBits).ToColumn(@"StopBits").HasFieldName(@"_StopBits").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNotNullable();
            configuration.HasProperty(x => x.DevicePort).ToColumn(@"DevicePort").HasFieldName(@"_DevicePort").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.DeviceIp).ToColumn(@"DeviceIp").HasFieldName(@"_DeviceIp").WithOpenAccessType(OpenAccessType.Varchar).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("nvarchar").IsNullable().HasLength(50).IsUnicode();
            configuration.HasProperty(x => x.DeviceIndex).ToColumn(@"DeviceIndex").HasFieldName(@"_DeviceIndex").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasProperty(x => x.ControlerType).ToColumn(@"ControlerType").HasFieldName(@"_ControlerType").WithOpenAccessType(OpenAccessType.Int32).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("int").IsNullable();
            configuration.HasAssociation<FleetManagerDispenser>(x => x.FleetManagerDispensers).HasFieldName(@"_FleetManagerDispensers").WithOpposite(op => op.FleetManagmentCotroller).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.FleetManagmentCotrollerId == y.FleetManagmentCotrollerId);
        }

        partial void OnPrepareFleetManagmentCotrollerConfigurations(MappingConfiguration<FleetManagmentCotroller> configuration);
    }

#endregion

#region FleetManagerDispenser Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<FleetManagerDispenser> GetFleetManagerDispenserMappingConfiguration()
        {
            MappingConfiguration<FleetManagerDispenser> configuration = this.GetFleetManagerDispenserClassConfiguration();
            this.PrepareFleetManagerDispenserConfigurations(configuration);
            this.OnPrepareFleetManagerDispenserConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<FleetManagerDispenser> GetFleetManagerDispenserClassConfiguration()
        {
            MappingConfiguration<FleetManagerDispenser> configuration = new MappingConfiguration<FleetManagerDispenser>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.FleetManagerDispenser");
            return configuration;
        }
	
        public void PrepareFleetManagerDispenserConfigurations(MappingConfiguration<FleetManagerDispenser> configuration)
        {
            configuration.HasProperty(x => x.FleetManagerDispenserId).ToColumn(@"FleetManagerDispenserId").IsIdentity(KeyGenerator.Guid).HasFieldName(@"_FleetManagerDispenserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.FleetManagmentCotrollerId).ToColumn(@"FleetManagmentCotrollerId").HasFieldName(@"_FleetManagmentCotrollerId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.DispenserId).ToColumn(@"DispenserId").HasFieldName(@"_DispenserId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.InvoiceTypeId).ToColumn(@"InvoiceTypeId").HasFieldName(@"_InvoiceTypeId").WithOpenAccessType(OpenAccessType.Guid).WithDataAccessKind(DataAccessKind.ReadWrite).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasAssociation<InvoiceType>(x => x.InvoiceType).HasFieldName(@"_InvoiceType").WithOpposite(op => op.FleetManagerDispensers).HasConstraint((x, y) =>  x.InvoiceTypeId == y.InvoiceTypeId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<Dispenser>(x => x.Dispenser).HasFieldName(@"_Dispenser").WithOpposite(op => op.FleetManagerDispensers).HasConstraint((x, y) =>  x.DispenserId == y.DispenserId).WithDataAccessKind(DataAccessKind.ReadWrite);
            configuration.HasAssociation<FleetManagmentSchedule>(x => x.FleetManagmentSchedules).HasFieldName(@"_FleetManagmentSchedules").WithOpposite(op => op.FleetManagerDispenser).WithDataAccessKind(DataAccessKind.ReadWrite).HasConstraint((x, y) =>  x.FleetManagerDispenserId == y.FleetManagerDispenserId);
            configuration.HasAssociation<FleetManagmentCotroller>(x => x.FleetManagmentCotroller).HasFieldName(@"_FleetManagmentCotroller").WithOpposite(op => op.FleetManagerDispensers).HasConstraint((x, y) =>  x.FleetManagmentCotrollerId == y.FleetManagmentCotrollerId).WithDataAccessKind(DataAccessKind.ReadWrite);
        }

        partial void OnPrepareFleetManagerDispenserConfigurations(MappingConfiguration<FleetManagerDispenser> configuration);
    }

#endregion

#region InvoiceCatalogView Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<InvoiceCatalogView> GetInvoiceCatalogViewMappingConfiguration()
        {
            MappingConfiguration<InvoiceCatalogView> configuration = this.GetInvoiceCatalogViewClassConfiguration();
            this.PrepareInvoiceCatalogViewConfigurations(configuration);
            this.OnPrepareInvoiceCatalogViewConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<InvoiceCatalogView> GetInvoiceCatalogViewClassConfiguration()
        {
            MappingConfiguration<InvoiceCatalogView> configuration = new MappingConfiguration<InvoiceCatalogView>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.InvoiceCatalogView");
            return configuration;
        }
	
        public void PrepareInvoiceCatalogViewConfigurations(MappingConfiguration<InvoiceCatalogView> configuration)
        {
            configuration.HasProperty(x => x.InvoiceId).ToColumn(@"InvoiceId").IsIdentity().HasFieldName(@"_InvoiceId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.InvoiceTypeId).ToColumn(@"InvoiceTypeId").HasFieldName(@"_InvoiceTypeId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TransactionDate).ToColumn(@"TransactionDate").HasFieldName(@"_TransactionDate").WithOpenAccessType(OpenAccessType.DateTime).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.DiscountAmount).ToColumn(@"DiscountAmount").HasFieldName(@"_DiscountAmount").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.NettoAmount).ToColumn(@"NettoAmount").HasFieldName(@"_NettoAmount").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.Number).ToColumn(@"Number").HasFieldName(@"_Number").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNotNullable().HasPrecision(10);
            configuration.HasProperty(x => x.PaymentType).ToColumn(@"PaymentType").HasFieldName(@"_PaymentType").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNotNullable().HasPrecision(10);
            configuration.HasProperty(x => x.TotalAmount).ToColumn(@"TotalAmount").HasFieldName(@"_TotalAmount").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.TraderId).ToColumn(@"TraderId").HasFieldName(@"_TraderId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.TraderName).ToColumn(@"TraderName").HasFieldName(@"_TraderName").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.VehicleId).ToColumn(@"VehicleId").HasFieldName(@"_VehicleId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.PlateNumber).ToColumn(@"PlateNumber").HasFieldName(@"_PlateNumber").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(20).IsUnicode();
            configuration.HasProperty(x => x.VatExemption).ToColumn(@"VatExemption").HasFieldName(@"_VatExemption").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.VatAmount).ToColumn(@"VatAmount").HasFieldName(@"_VatAmount").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.InvoiceTypeDesc).ToColumn(@"InvoiceTypeDesc").HasFieldName(@"_InvoiceTypeDesc").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(10).IsUnicode();
            configuration.HasProperty(x => x.IsLaserPrint).ToColumn(@"IsLaserPrint").HasFieldName(@"_IsLaserPrint").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.IsPrinted).ToColumn(@"IsPrinted").HasFieldName(@"_IsPrinted").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNotNullable();
            configuration.HasProperty(x => x.TransactionSign).ToColumn(@"TransactionSign").HasFieldName(@"_TransactionSign").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNotNullable().HasPrecision(10);
            configuration.HasProperty(x => x.InvoiceLineCount).ToColumn(@"InvoiceLineCount").HasFieldName(@"_InvoiceLineCount").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNotNullable().HasPrecision(10);
            configuration.HasProperty(x => x.Cancelation).ToColumn(@"Cancelation").HasFieldName(@"_Cancelation").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNotNullable().HasPrecision(10);
            configuration.HasProperty(x => x.Canceled).ToColumn(@"Canceled").HasFieldName(@"_Canceled").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNotNullable().HasPrecision(10);
            configuration.HasProperty(x => x.Replaced).ToColumn(@"Replaced").HasFieldName(@"_Replaced").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNotNullable().HasPrecision(10);
            configuration.HasProperty(x => x.ReplaceInvoicesCount).ToColumn(@"ReplaceInvoicesCount").HasFieldName(@"_ReplaceInvoicesCount").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNotNullable().HasPrecision(10);
            configuration.HasProperty(x => x.DebitAmount).ToColumn(@"DebitAmount").HasFieldName(@"_DebitAmount").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(38).HasScale(2);
            configuration.HasProperty(x => x.CreditAmount).ToColumn(@"CreditAmount").HasFieldName(@"_CreditAmount").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(38).HasScale(2);
            configuration.HasProperty(x => x.FuelTypes).ToColumn(@"FuelTypes").HasFieldName(@"_FuelTypes").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(1000).IsUnicode();
            configuration.HasProperty(x => x.VolumeSum).ToColumn(@"VolumeSum").HasFieldName(@"_VolumeSum").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNullable().HasPrecision(38).HasScale(3);
            configuration.HasProperty(x => x.SupplyNumber).ToColumn(@"SupplyNumber").HasFieldName(@"_SupplyNumber").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.VehicleOdometer).ToColumn(@"VehicleOdometer").HasFieldName(@"_VehicleOdometer").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNullable().HasPrecision(10);
            configuration.HasProperty(x => x.DeliveryAddress).ToColumn(@"DeliveryAddress").HasFieldName(@"_DeliveryAddress").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(150).IsUnicode();
            configuration.HasProperty(x => x.Series).ToColumn(@"Series").HasFieldName(@"_Series").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(10).IsUnicode();
        }

        partial void OnPrepareInvoiceCatalogViewConfigurations(MappingConfiguration<InvoiceCatalogView> configuration);
    }

#endregion

#region FinTransaction Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<FinTransaction> GetFinTransactionMappingConfiguration()
        {
            MappingConfiguration<FinTransaction> configuration = this.GetFinTransactionClassConfiguration();
            this.PrepareFinTransactionConfigurations(configuration);
            this.OnPrepareFinTransactionConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<FinTransaction> GetFinTransactionClassConfiguration()
        {
            MappingConfiguration<FinTransaction> configuration = new MappingConfiguration<FinTransaction>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.FinTransaction");
            return configuration;
        }
	
        public void PrepareFinTransactionConfigurations(MappingConfiguration<FinTransaction> configuration)
        {
            configuration.HasProperty(x => x.FinTransactionId).ToColumn(@"FinTransactionId").IsIdentity().HasFieldName(@"_FinTransactionId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ApplicationUserId).ToColumn(@"ApplicationUserId").HasFieldName(@"_ApplicationUserId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TraderId).ToColumn(@"TraderId").HasFieldName(@"_TraderId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.InvoiceId).ToColumn(@"InvoiceId").HasFieldName(@"_InvoiceId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.TransactionDate).ToColumn(@"TransactionDate").HasFieldName(@"_TransactionDate").WithOpenAccessType(OpenAccessType.DateTime).HasColumnType("datetime").IsNotNullable();
            configuration.HasProperty(x => x.Amount).ToColumn(@"Amount").HasFieldName(@"_Amount").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.CreditAmount).ToColumn(@"CreditAmount").HasFieldName(@"_CreditAmount").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.DebitAmount).ToColumn(@"DebitAmount").HasFieldName(@"_DebitAmount").WithOpenAccessType(OpenAccessType.Decimal).HasColumnType("decimal").IsNotNullable().HasPrecision(18).HasScale(2);
            configuration.HasProperty(x => x.TransactionType).ToColumn(@"TransactionType").HasFieldName(@"_TransactionType").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNotNullable().HasPrecision(10);
            configuration.HasProperty(x => x.Notes).ToColumn(@"Notes").HasFieldName(@"_Notes").WithOpenAccessType(OpenAccessType.Clob).HasColumnType("ntext").IsNullable().HasLength(1073741823).IsUnicode();
            configuration.HasAssociation<ApplicationUser>(x => x.ApplicationUser).HasFieldName(@"_ApplicationUser").WithOpposite(op => op.FinTransactions).HasConstraint((x, y) =>  x.ApplicationUserId == y.ApplicationUserId);
            configuration.HasAssociation<Trader>(x => x.Trader).HasFieldName(@"_Trader").WithOpposite(op => op.FinTransactions).HasConstraint((x, y) =>  x.TraderId == y.TraderId);
            configuration.HasAssociation<Invoice>(x => x.Invoice).HasFieldName(@"_Invoice").WithOpposite(op => op.FinTransactions).HasConstraint((x, y) =>  x.InvoiceId == y.InvoiceId);
        }

        partial void OnPrepareFinTransactionConfigurations(MappingConfiguration<FinTransaction> configuration);
    }

#endregion

#region InvoiceTypeTransform Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<InvoiceTypeTransform> GetInvoiceTypeTransformMappingConfiguration()
        {
            MappingConfiguration<InvoiceTypeTransform> configuration = this.GetInvoiceTypeTransformClassConfiguration();
            this.PrepareInvoiceTypeTransformConfigurations(configuration);
            this.OnPrepareInvoiceTypeTransformConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<InvoiceTypeTransform> GetInvoiceTypeTransformClassConfiguration()
        {
            MappingConfiguration<InvoiceTypeTransform> configuration = new MappingConfiguration<InvoiceTypeTransform>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.InvoiceTypeTransform");
            return configuration;
        }
	
        public void PrepareInvoiceTypeTransformConfigurations(MappingConfiguration<InvoiceTypeTransform> configuration)
        {
            configuration.HasProperty(x => x.InvoiceTypeTransformId).ToColumn(@"InvoiceTypeTransformId").IsIdentity().HasFieldName(@"_InvoiceTypeTransformId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ParentInvoiceTypeId).ToColumn(@"ParentInvoiceTypeId").HasFieldName(@"_ParentInvoiceTypeId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ChildInvoiceTypeId).ToColumn(@"ChildInvoiceTypeId").HasFieldName(@"_ChildInvoiceTypeId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.TransformationMode).ToColumn(@"TransformationMode").HasFieldName(@"_TransformationMode").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNotNullable().HasPrecision(10);
            configuration.HasProperty(x => x.NotesAddition).ToColumn(@"NotesAddition").HasFieldName(@"_NotesAddition").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNotNullable().HasLength(500).IsUnicode();
            configuration.HasProperty(x => x.CreationInvoiceTypeId).ToColumn(@"CreationInvoiceTypeId").HasFieldName(@"_CreationInvoiceTypeId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNullable();
            configuration.HasProperty(x => x.CreationType).ToColumn(@"CreationType").HasFieldName(@"_CreationType").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNullable().HasPrecision(10);
            configuration.HasProperty(x => x.CreationNotesAddition).ToColumn(@"CreationNotesAddition").HasFieldName(@"_CreationNotesAddition").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(500).IsUnicode();
            configuration.HasAssociation<InvoiceType>(x => x.InvoiceType_ParentInvoiceTypeId).HasFieldName(@"_InvoiceType_ParentInvoiceTypeId").WithOpposite(op => op.InvoiceTypeTransforms_ParentInvoiceTypeId).HasConstraint((x, y) =>  x.ParentInvoiceTypeId == y.InvoiceTypeId);
            configuration.HasAssociation<InvoiceType>(x => x.InvoiceType_ChildInvoiceTypeId).HasFieldName(@"_InvoiceType_ChildInvoiceTypeId").WithOpposite(op => op.InvoiceTypeTransforms_ChildInvoiceTypeId).HasConstraint((x, y) =>  x.ChildInvoiceTypeId == y.InvoiceTypeId);
            configuration.HasAssociation<InvoiceType>(x => x.InvoiceType_CreationInvoiceTypeId).HasFieldName(@"_InvoiceType_CreationInvoiceTypeId").WithOpposite(op => op.InvoiceTypeTransforms_CreationInvoiceTypeId).HasConstraint((x, y) =>  x.CreationInvoiceTypeId == y.InvoiceTypeId);
        }

        partial void OnPrepareInvoiceTypeTransformConfigurations(MappingConfiguration<InvoiceTypeTransform> configuration);
    }

#endregion

#region InvoiceLineRelation Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<InvoiceLineRelation> GetInvoiceLineRelationMappingConfiguration()
        {
            MappingConfiguration<InvoiceLineRelation> configuration = this.GetInvoiceLineRelationClassConfiguration();
            this.PrepareInvoiceLineRelationConfigurations(configuration);
            this.OnPrepareInvoiceLineRelationConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<InvoiceLineRelation> GetInvoiceLineRelationClassConfiguration()
        {
            MappingConfiguration<InvoiceLineRelation> configuration = new MappingConfiguration<InvoiceLineRelation>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.InvoiceLineRelation");
            return configuration;
        }
	
        public void PrepareInvoiceLineRelationConfigurations(MappingConfiguration<InvoiceLineRelation> configuration)
        {
            configuration.HasProperty(x => x.InvoiceLineRelationId).ToColumn(@"InvoiceLineRelationId").IsIdentity().HasFieldName(@"_InvoiceLineRelationId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.InvoiceRelationId).ToColumn(@"InvoiceRelationId").HasFieldName(@"_InvoiceRelationId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ParentLineId).ToColumn(@"ParentLineId").HasFieldName(@"_ParentLineId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.ChildRelationId).ToColumn(@"ChildRelationId").HasFieldName(@"_ChildRelationId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasAssociation<InvoiceRelation>(x => x.InvoiceRelation).HasFieldName(@"_InvoiceRelation").WithOpposite(op => op.InvoiceLineRelations).HasConstraint((x, y) =>  x.InvoiceRelationId == y.InvoiceRelationId);
            configuration.HasAssociation<InvoiceLine>(x => x.InvoiceLine_ParentLineId).HasFieldName(@"_InvoiceLine_ParentLineId").WithOpposite(op => op.InvoiceLineRelations_ParentLineId).HasConstraint((x, y) =>  x.ParentLineId == y.InvoiceLineId);
            configuration.HasAssociation<InvoiceLine>(x => x.InvoiceLine_ChildRelationId).HasFieldName(@"_InvoiceLine_ChildRelationId").WithOpposite(op => op.InvoiceLineRelations_ChildRelationId).HasConstraint((x, y) =>  x.ChildRelationId == y.InvoiceLineId);
        }

        partial void OnPrepareInvoiceLineRelationConfigurations(MappingConfiguration<InvoiceLineRelation> configuration);
    }

#endregion

#region MyDataInvoice Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<MyDataInvoice> GetMyDataInvoiceMappingConfiguration()
        {
            MappingConfiguration<MyDataInvoice> configuration = this.GetMyDataInvoiceClassConfiguration();
            this.PrepareMyDataInvoiceConfigurations(configuration);
            this.OnPrepareMyDataInvoiceConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<MyDataInvoice> GetMyDataInvoiceClassConfiguration()
        {
            MappingConfiguration<MyDataInvoice> configuration = new MappingConfiguration<MyDataInvoice>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.MyDataInvoice");
            return configuration;
        }
	
        public void PrepareMyDataInvoiceConfigurations(MappingConfiguration<MyDataInvoice> configuration)
        {
            configuration.HasProperty(x => x.MyDataInvoiceId).ToColumn(@"MyDataInvoiceId").IsIdentity().HasFieldName(@"_MyDataInvoiceId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.Uid).ToColumn(@"Uid").HasFieldName(@"_Uid").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNullable().HasLength(100).IsUnicode();
            configuration.HasProperty(x => x.Mark).ToColumn(@"Mark").HasFieldName(@"_Mark").WithOpenAccessType(OpenAccessType.Int64).HasColumnType("bigint").IsNullable().HasPrecision(19);
            configuration.HasProperty(x => x.InvoiceId).ToColumn(@"InvoiceId").HasFieldName(@"_InvoiceId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.DateTimeSent).ToColumn(@"DateTimeSent").HasFieldName(@"_DateTimeSent").WithOpenAccessType(OpenAccessType.DateTime).HasColumnType("datetime").IsNullable();
            configuration.HasProperty(x => x.Status).ToColumn(@"Status").HasFieldName(@"_Status").WithOpenAccessType(OpenAccessType.Int32).HasColumnType("int").IsNotNullable().HasPrecision(10);
            configuration.HasProperty(x => x.Data).ToColumn(@"Data").HasFieldName(@"_Data").WithOpenAccessType(OpenAccessType.Clob).HasColumnType("ntext").IsNullable().HasLength(1073741823).IsUnicode();
            configuration.HasProperty(x => x.CanceledByMark).ToColumn(@"CanceledByMark").HasFieldName(@"_CanceledByMark").WithOpenAccessType(OpenAccessType.Int64).HasColumnType("bigint").IsNullable().HasPrecision(19);
            configuration.HasProperty(x => x.CancelationMark).ToColumn(@"CancelationMark").HasFieldName(@"_CancelationMark").WithOpenAccessType(OpenAccessType.Int64).HasColumnType("bigint").IsNullable().HasPrecision(19);
            configuration.HasProperty(x => x.Errors).ToColumn(@"Errors").HasFieldName(@"_Errors").WithOpenAccessType(OpenAccessType.Clob).HasColumnType("ntext").IsNullable().HasLength(1073741823).IsUnicode();
        }

        partial void OnPrepareMyDataInvoiceConfigurations(MappingConfiguration<MyDataInvoice> configuration);
    }

#endregion

#region Country Mapping

    public partial class DatabaseModelMetadataSource
    {
        public MappingConfiguration<Country> GetCountryMappingConfiguration()
        {
            MappingConfiguration<Country> configuration = this.GetCountryClassConfiguration();
            this.PrepareCountryConfigurations(configuration);
            this.OnPrepareCountryConfigurations(configuration);
            return configuration;
        }

        public MappingConfiguration<Country> GetCountryClassConfiguration()
        {
            MappingConfiguration<Country> configuration = new MappingConfiguration<Country>();
            configuration.MapType(x => new { }).WithConcurencyControl(OptimisticConcurrencyControlStrategy.Changed).ToTable("dbo.Country");
            return configuration;
        }
	
        public void PrepareCountryConfigurations(MappingConfiguration<Country> configuration)
        {
            configuration.HasProperty(x => x.CountryId).ToColumn(@"CountryId").IsIdentity().HasFieldName(@"_CountryId").WithOpenAccessType(OpenAccessType.Guid).HasColumnType("uniqueidentifier").IsNotNullable();
            configuration.HasProperty(x => x.CountryCode).ToColumn(@"CountryCode").HasFieldName(@"_CountryCode").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNotNullable().HasLength(50).IsUnicode();
            configuration.HasProperty(x => x.DisplayMember).ToColumn(@"DisplayMember").HasFieldName(@"_DisplayMember").WithOpenAccessType(OpenAccessType.Varchar).HasColumnType("nvarchar").IsNotNullable().HasLength(250).IsUnicode();
            configuration.HasProperty(x => x.IsEu).ToColumn(@"IsEu").HasFieldName(@"_IsEu").WithOpenAccessType(OpenAccessType.Boolean).HasColumnType("bit").IsNotNullable();
        }

        partial void OnPrepareCountryConfigurations(MappingConfiguration<Country> configuration);
    }

#endregion

}
